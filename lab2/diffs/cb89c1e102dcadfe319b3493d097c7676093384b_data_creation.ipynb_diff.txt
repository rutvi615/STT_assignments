@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 126,
+   "execution_count": 271,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -23,7 +23,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 127,
+   "execution_count": 272,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -33,7 +33,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 128,
+   "execution_count": 273,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -43,7 +43,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 129,
+   "execution_count": 274,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -56,7 +56,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 130,
+   "execution_count": 275,
    "metadata": {},
    "outputs": [
     {
@@ -95,7 +95,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 131,
+   "execution_count": 276,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -117,7 +117,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 132,
+   "execution_count": 277,
    "metadata": {},
    "outputs": [
     {
@@ -126,7 +126,7 @@
        "'khoor'"
       ]
      },
-     "execution_count": 132,
+     "execution_count": 277,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -137,7 +137,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 133,
+   "execution_count": 278,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -146,7 +146,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 134,
+   "execution_count": 279,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -155,16 +155,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 135,
+   "execution_count": 280,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<sha1 HASH object @ 0x0000024C2CECE7B0>"
+       "<sha1 HASH object @ 0x00000247D6FBB940>"
       ]
      },
-     "execution_count": 135,
+     "execution_count": 280,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -175,7 +175,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 136,
+   "execution_count": 281,
    "metadata": {},
    "outputs": [
     {
@@ -184,7 +184,7 @@
        "'8cbc22deca78b710224fff70e7b6fd148b88f35f'"
       ]
      },
-     "execution_count": 136,
+     "execution_count": 281,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -195,7 +195,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 137,
+   "execution_count": 282,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -207,7 +207,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 138,
+   "execution_count": 283,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -219,7 +219,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 139,
+   "execution_count": 284,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -238,7 +238,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 140,
+   "execution_count": 285,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -250,16 +250,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 141,
+   "execution_count": 286,
    "metadata": {},
    "outputs": [],
    "source": [
-    "types = [\"sha1\", \"md5\", \"sha256\", \"sha512\", \"caeser\", \"caeser\", \"plaintext\" ]"
+    "types = [\"sha1\", \"md5\", \"sha256\", \"sha512\", \"caeser\", \"caeser\", \"plaintext\", \"reverse\", \"morse\", \"base64\", \"binary\", \"hexadecimal\", \"ascii\" ]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 142,
+   "execution_count": 287,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -271,7 +271,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 143,
+   "execution_count": 288,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -284,7 +284,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 289,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -294,37 +294,39 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 290,
    "metadata": {},
    "outputs": [],
    "source": [
-    "def base64(s):\n",
-    "    return base64.b64encode(s)"
+    "def b64(s):\n",
+    "    s = s.encode()\n",
+    "    s = base64.b64encode(s)\n",
+    "    return s.decode()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 291,
    "metadata": {},
    "outputs": [],
    "source": [
     "def binary(s):\n",
-    "    return ' '.join(format(x, 'b') for x in bytearray(st))"
+    "    return ' '.join(format(x, 'b') for x in bytearray(s))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 292,
    "metadata": {},
    "outputs": [],
    "source": [
     "def hexade(s):\n",
-    "    return s.to_bytes(4, byteorder='big').hex()"
+    "    return ''.join(hex(ord(c))[2:] for c in s)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 293,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -349,19 +351,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 294,
    "metadata": {},
    "outputs": [],
    "source": [
     "def asci(s):\n",
     "    a = []\n",
     "    for ch in s:\n",
-    "        a.append"
+    "        a.append(str(ord(ch)))\n",
+    "    return ' '.join(a)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 144,
+   "execution_count": 295,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -389,7 +392,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 145,
+   "execution_count": 296,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -401,7 +404,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 146,
+   "execution_count": 297,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -413,7 +416,9 @@
     "    letterfreq = getLetterFreq(text)\n",
     "    chi = chisquare(letterfreq)[1]\n",
     "    \n",
+    "    \n",
     "    used = cipher\n",
+    "    used = str(used)\n",
     "    if used == \"sha1\":\n",
     "        used = 0\n",
     "    elif used == \"md5\":\n",
@@ -424,8 +429,22 @@
     "        used = 3\n",
     "    elif used == \"caesar\":\n",
     "        used = 4\n",
-    "    elif used == \"plaintext\":\n",
+    "    elif used == \"reverse\":\n",
     "        used = 5\n",
+    "    elif used == \"morse\":\n",
+    "        used = 6\n",
+    "    elif used == \"base64\":\n",
+    "        used = 7\n",
+    "    elif used == \"binary\":\n",
+    "        used = 8\n",
+    "    elif used == \"hexadecimal\":\n",
+    "        used = 9\n",
+    "    elif used == \"ascii\":\n",
+    "        used == 10\n",
+    "    elif used.startswith(\"a\") or used.startswith(\"A\"):\n",
+    "        used = 10\n",
+    "    elif used == 10:\n",
+    "        pass\n",
     "    if plaintext == \"\" or plaintext == None:\n",
     "        return (1)\n",
     "    global counter\n",
@@ -435,7 +454,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 147,
+   "execution_count": 298,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -451,7 +470,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 148,
+   "execution_count": 299,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -459,37 +478,70 @@
     "import random\n",
     "for sent in sentences:        \n",
     "    result = random.choice(types)\n",
-    "    if sent == None or sent == \"\" or sent == \" \":\n",
-    "        continue\n",
-    "    if sent[0] == \" \":\n",
-    "        sent = sent[1::]\n",
-    "    if result == \"sha1\":\n",
-    "        temp = sha1hash(sent)\n",
-    "        if temp == None:\n",
-    "            continue\n",
-    "        makeCsvLine(sent, temp, \"sha1\")\n",
-    "    elif result == \"md5\":\n",
-    "        temp = md5hash(sent)\n",
-    "        if temp == None:\n",
+    "    try:\n",
+    "        if sent == None or sent == \"\" or sent == \" \":\n",
     "            continue\n",
-    "        makeCsvLine(sent, temp, \"md5\")\n",
-    "    elif result == \"sha256\":\n",
-    "        temp = sha256hash(sent)\n",
-    "        if temp == None:\n",
-    "            continue\n",
-    "        makeCsvLine(sent, temp, \"sha256\")\n",
-    "    elif result == \"sha512\":\n",
-    "        temp = sha512hash(sent)\n",
-    "        if temp == None:\n",
-    "            continue\n",
-    "        makeCsvLine(sent, temp, \"sha512\")\n",
-    "    elif result == \"caeser\":\n",
-    "        temp = caesar_cipher(sent, random.randint(1, 25))\n",
-    "        if temp == None:\n",
-    "            continue\n",
-    "        makeCsvLine(sent, temp, \"caesar\")\n",
-    "    elif result == \"plaintext\":\n",
-    "        makeCsvLine(sent, sent, \"plaintext\")"
+    "        if sent[0] == \" \":\n",
+    "            sent = sent[1::]\n",
+    "        if result == \"sha1\":\n",
+    "            temp = sha1hash(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"sha1\")\n",
+    "        elif result == \"md5\":\n",
+    "            temp = md5hash(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"md5\")\n",
+    "        elif result == \"sha256\":\n",
+    "            temp = sha256hash(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"sha256\")\n",
+    "        elif result == \"sha512\":\n",
+    "            temp = sha512hash(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"sha512\")\n",
+    "        elif result == \"caeser\":\n",
+    "            temp = caesar_cipher(sent, random.randint(1, 25))\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"caesar\")\n",
+    "        elif result == \"reverse\":\n",
+    "            temp = reverse(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"reverse\")\n",
+    "        elif result == \"morse\":\n",
+    "            temp = morse(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"morse\")\n",
+    "        elif result == \"base64\":\n",
+    "            temp = b64(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"base64\")\n",
+    "        elif result==\"binary\":\n",
+    "            temp = binary(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"binary\")\n",
+    "        elif result == \"hexadecimal\":\n",
+    "            temp = hexade(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, \"hexadecimal\")\n",
+    "        elif result == \"ascii\":\n",
+    "            temp = asci(sent)\n",
+    "            if temp == None:\n",
+    "                continue\n",
+    "            makeCsvLine(sent, temp, 10)\n",
+    "    except TypeError as e:\n",
+    "        continue\n",
+    "    except RuntimeWarning as e:\n",
+    "        continue"
    ]
   },
   {
@@ -508,7 +560,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 149,
+   "execution_count": 300,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -517,7 +569,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 150,
+   "execution_count": 301,
    "metadata": {},
    "outputs": [],
    "source": [
