@@ -174,40 +174,3 @@ def threaded(hashvalue):
         print(hashvalue + " : " + resp)
         result[hashvalue] = resp
 
-
-def grepper(directory):
-    os.system(
-        """grep -Pr "[a-f0-9]{128}|[a-f0-9]{96}|[a-f0-9]{64}|[a-f0-9]{40}|[a-f0-9]{32}" %s --exclude=\*.{png,jpg,jpeg,mp3,mp4,zip,gz} |
-        grep -Po "[a-f0-9]{128}|[a-f0-9]{96}|[a-f0-9]{64}|[a-f0-9]{40}|[a-f0-9]{32}" >> %s/%s.txt"""
-        % (directory, cwd, directory.split("/")[-1])
-    )
-    print("%s Results saved in %s.txt" % (info, directory.split("/")[-1]))
-
-
-def miner(file):
-    lines = []
-    found = set()
-    with open(file, "r") as f:
-        for line in f:
-            lines.append(line.strip("\n"))
-    for line in lines:
-        matches = re.findall(
-            r"[a-f0-9]{128}|[a-f0-9]{96}|[a-f0-9]{64}|[a-f0-9]{40}|[a-f0-9]{32}", line
-        )
-        if matches:
-            for match in matches:
-                found.add(match)
-    print("%s Hashes found: %i" % (info, len(found)))
-    threadpool = concurrent.futures.ThreadPoolExecutor(max_workers=thread_count)
-    futures = (threadpool.submit(threaded, hashvalue) for hashvalue in found)
-    for i, _ in enumerate(concurrent.futures.as_completed(futures)):
-        if i + 1 == len(found) or (i + 1) % thread_count == 0:
-            print("%s Progress: %i/%i" % (info, i + 1, len(found)), end="\r")
-
-
-def single(args):
-    result = crack(args.hash)
-    if result:
-        print(result)
-    else:
-        print("%s Hash was not found in any database." % bad)
