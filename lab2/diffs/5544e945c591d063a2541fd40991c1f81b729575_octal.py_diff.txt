@@ -1,30 +1,28 @@
-from typing import Optional, Dict, Any
+from typing import Dict, Optional
 
 from loguru import logger
 
-import ciphey
-from ciphey.iface import registry
+from ciphey.iface import Config, Decoder, ParamSpec, T, U, registry
 
 
 @registry.register
-class Octal(ciphey.iface.Decoder[str, bytes]):
-    def decode(self, text: str) -> Optional[bytes]:
+class Octal(Decoder[str]):
+    def decode(self, ctext: T) -> Optional[U]:
         """
-        It takes an octal string and return a string
-            :octal_str: octal str like "110 145 154"
+        Performs Octal decoding
         """
         str_converted = []
-        octal_seq = text.split(" ")
+        octal_seq = ctext.split(" ")
         if len(octal_seq) == 1:
             # Concatted octal must be formed of octal triplets
-            if len(text) % 3 != 0:
+            if len(ctext) % 3 != 0:
                 return None
-            octal_seq = [text[i : i + 3] for i in range(0, len(text), 3)]
+            octal_seq = [ctext[i : i + 3] for i in range(0, len(ctext), 3)]
             logger.trace(f"Trying chunked octal {octal_seq}")
         try:
             for octal_char in octal_seq:
                 if len(octal_char) > 3:
-                    logger.trace(f"Octal subseq too long")
+                    logger.trace("Octal subseq too long")
                     return None
                 n = int(octal_char, 8)
                 if (
@@ -43,14 +41,13 @@ class Octal(ciphey.iface.Decoder[str, bytes]):
     def priority() -> float:
         return 0.025
 
-    def __init__(self, config: ciphey.iface.Config):
+    def __init__(self, config: Config):
         super().__init__(config)
 
     @staticmethod
-    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:
-        pass
+    def getParams() -> Optional[Dict[str, ParamSpec]]:
+        return None
 
     @staticmethod
     def getTarget() -> str:
         return "octal"
-
