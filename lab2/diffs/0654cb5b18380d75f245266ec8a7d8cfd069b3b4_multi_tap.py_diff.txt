@@ -7,54 +7,59 @@ from ciphey.iface import ParamSpec, Config, T, U, Decoder, registry
 class multiTap(Decoder[str, str]):
     def decode(self, ctext: str) -> Optional[str]:
         decode_text = ""
-        for x in split_the_text(ctext):
-            if x == "0":
+        for x in multiTap.split_the_text(ctext):
+            if not x.isdigit() or len(set(x)) != 1:
+                return None
+            if x == "0":  # if it space
                 decode_text += " "
-            elif valid_code_part(code):
-                decode_text += number_to_char(x)
+            elif multiTap.valid_code_part(ctext):
+                decode_text += self.number_to_char(x)
 
         return decode_text
 
+    @staticmethod
+    def split_the_text(text):
+        return text.split()
 
-def split_the_text(text):
-    return text.split()
-
-
-def valid_code_part(code):
-    return int(code[0]) in range(2, 10)
-
-
-def number_to_char(number: str) -> str:
-    index = calculate_index(number)
-    return number_index_to_char(index)
-
-
-def number_index_to_char(index_number: int) -> str:
-    start_ascii_value = ord("A")
-    return chr(start_ascii_value + index_number)
+    @staticmethod
+    def valid_code_part(code):
+        try:
+            return int(code[0]) in range(2, 10)
+        except ValueError:
+            return False
 
+    @staticmethod
+    def number_to_char(number: str) -> str:
+        index = multiTap.calculate_index(number)
+        return multiTap.number_index_to_char(index)
 
-def calculate_index(number: str) -> int:
-    first_number_as_int = int(number[0])
+    @staticmethod
+    def number_index_to_char(index_number: int) -> str:
+        start_ascii_value = ord("A")
+        return chr(start_ascii_value + index_number)
 
-    number_index = get_index_from_first_digit(first_number_as_int)
+    @staticmethod
+    def calculate_index(number: str) -> int:
+        first_number_as_int = int(number[0])
 
-    num_rest_numbers = len(number) - 1
-    number_index += num_rest_numbers
+        number_index = multiTap.get_index_from_first_digit(first_number_as_int)
 
-    return number_index
+        num_rest_numbers = len(number) - 1
+        number_index += num_rest_numbers
 
+        return number_index
 
-def get_index_from_first_digit(first_digit):
-    number_index = 0
-    if first_digit >= 8:  # s have 4 chars
-        number_index += 1
+    @staticmethod
+    def get_index_from_first_digit(first_digit):
+        number_index = 0
+        if first_digit >= 8:  # s have 4 chars
+            number_index += 1
 
-    first_digit -= 2  # start in 200
+        first_digit -= 2  # start in 200
 
-    number_index += first_digit * 3  # jump 3 every time
+        number_index += first_digit * 3  # jump 3 every time
 
-    return number_index
+        return number_index
 
     @staticmethod
     def priority() -> float:
