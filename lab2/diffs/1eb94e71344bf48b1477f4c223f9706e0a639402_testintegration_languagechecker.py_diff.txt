@@ -1,35 +1,35 @@
 import sys
 sys.path.append("..")
 import unittest
-from languageCheckerMod import LanguageChecker
+from languageCheckerMod.languageChecker import LanguageChecker
 # python3 -m unittest Tests.testchi_squared
 # python -m unittest discover -s tests
 # python3 -m unittest discover -s Tests -p test*.py
 class TestLanguageChecker(unittest.TestCase):
     def test_basics(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("Hello my name is new and this is an example of some english text")
         self.assertEqual(result, True)
     def test_basics_german(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("hallo keine lieben leute nach")
         self.assertEqual(result, False)
     def test_basics_quickbrownfox(self):
         """
         This returns true becaue by default chi squared returns true so long as it's less than 10 items it's processed
         """
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         self.assertEqual(result, True)
     def test_basics_quickbrownfox(self):
         """
         This returns true becaue by default chi squared returns true so long as it's less than 10 items it's processed
         """
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         self.assertEqual(result, True)
     def test_chi_maxima(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
@@ -46,7 +46,7 @@ class TestLanguageChecker(unittest.TestCase):
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         self.assertEqual(result, False)
     def test_chi_maxima_false(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
@@ -66,7 +66,7 @@ class TestLanguageChecker(unittest.TestCase):
         """
         This returns false because s.d is not over 1 as all inputs are English
         """
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("The quick brown fox jumped over the lazy dog")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
         result = lc.checkLanguage("Hypertext Transfer Protocol (HTTP) parameters, including HTTP headers, allow the client and the server to pass additional information with the request or the response.")
@@ -86,7 +86,7 @@ class TestLanguageChecker(unittest.TestCase):
         """
         This returns false because s.d is not over 1 as all inputs are English
         """
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("sa dew fea dxza dcsa da fsa d")
         result = lc.checkLanguage("df grtsf a sgrds fgserwqd")
         result = lc.checkLanguage("fd sa fe safsda srmad sadsa d")
@@ -103,49 +103,49 @@ class TestLanguageChecker(unittest.TestCase):
         result = lc.checkLanguage("My friend is a really nice people who really enjoys swimming, dancing, kicking, English.")
         self.assertEqual(result, True)
     def test_integration_unusual_one(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("HELLO MY NAME IS BRANDON AND I LIKE DOLLAR")
         self.assertEqual(result, True)
     def test_integration_unusual_two(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
         self.assertEqual(result, False)
     def test_integration_unusual_three(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("password")
         self.assertEqual(result, True)
     def test_integration_unusual_three(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("")
         self.assertEqual(result, False)
     def test_integration_unusual_four(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage(".")
         self.assertEqual(result, False)
     def test_integration_unusual_five(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("#")
         self.assertEqual(result, False)
     def test_integration_unusual_6(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("\"")
         self.assertEqual(result, False)
     def test_integration_unusual_7(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")
         self.assertEqual(result, False)
     def test_integration_unusual_7(self):
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("")
         self.assertEqual(result, False)
     def test_integration_addition(self):
         """
         Makes sure you can add 2 lanuggae objecs together
         """
-        lc = LanguageChecker.languageChecker()
+        lc = LanguageChecker()
         result = lc.checkLanguage("hello my darling")
 
-        lc2 = LanguageChecker.languageChecker()
+        lc2 = LanguageChecker()
         result = lc.checkLanguage("sad as dasr as s")
 
         temp = lc.getChiScore()
