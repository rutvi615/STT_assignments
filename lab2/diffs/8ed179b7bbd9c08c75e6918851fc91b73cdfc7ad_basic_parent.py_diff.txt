@@ -1,8 +1,8 @@
-from Decryptor.basicEncryption.caesar import Caesar
-from Decryptor.basicEncryption.reverse import Reverse
-from Decryptor.basicEncryption.viginere import Viginere
-from Decryptor.basicEncryption.pigLatin import PigLatin
-from Decryptor.basicEncryption.transposition import Transposition
+import app.Decryptor.basicEncryption.caesar
+import app.Decryptor.basicEncryption.reverse
+import app.Decryptor.basicEncryption.viginere
+import app.Decryptor.basicEncryption.pigLatin
+
 """
 So I want to assign the prob distribution to objects
 so it makes sense to do this?
@@ -32,23 +32,22 @@ for key, val in self.prob:
             list_objs.insert(counter, list_objs.pop(listCounter))
             counter = counter + 1
 
-Eventually we get a sorted list of objs
-
-
+Eventually we get a sorted list of obj
 """
+
 class BasicParent:
     def __init__(self, lc):
         self.lc = lc
-        self.caesar = Caesar(self.lc)
-        self.reverse = Reverse(self.lc)
-        self.viginere = Viginere(self.lc)
-        self.pig = PigLatin(self.lc)
+        self.caesar = app.Decryptor.basicEncryption.caesar.Caesar(self.lc)
+        self.reverse = app.Decryptor.basicEncryption.reverse.Reverse(self.lc)
+        self.viginere = app.Decryptor.basicEncryption.viginere.Viginere(self.lc)
+        self.pig = app.Decryptor.basicEncryption.pigLatin.PigLatin(self.lc)
         # self.trans = Transposition(self.lc)
 
         self.list_of_objects = [self.caesar, self.reverse, self.pig]
+
     def decrypt(self, text):
         self.text = text
-
         from multiprocessing.dummy import Pool as ThreadPool 
         pool = ThreadPool(4) 
         answers = pool.map(self.callDecrypt, self.list_of_objects)
@@ -69,11 +68,13 @@ class BasicParent:
         if result["IsPlaintext?"]:
             return result
         return {"lc": self.lc, "IsPlaintext?": False, "Plaintext": None, "Cipher": None, "Extra Information": None}
+
     def callDecrypt(self, obj):
         # i only exist to call decrypt
         return obj.decrypt(self.text) 
             
     def setProbTable(self, prob):
+        """I'm still writing this"""
         self.probabilityDistribution = prob
         # we get a sorted list of objects :)
         counter = 0
