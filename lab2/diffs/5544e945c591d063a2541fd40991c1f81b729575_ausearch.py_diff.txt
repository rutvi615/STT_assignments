@@ -1,39 +1,32 @@
+import bisect
 import distutils
 import math
-import bisect
 from copy import copy
+from dataclasses import dataclass
 from functools import lru_cache
-from typing import (
-    Generic,
-    List,
-    Optional,
-    Dict,
-    Any,
-    Union,
-    TypeVar,
-)
+from typing import Any, Dict, Generic, List, Optional, TypeVar, Union
+
+import cipheycore
+from loguru import logger
+
 from ciphey.iface import (
-    T,
-    Cracker,
+    Checker,
     Config,
-    Searcher,
-    ParamSpec,
+    Cracker,
     CrackInfo,
-    SearchLevel,
     CrackResult,
-    SearchResult,
     Decoder,
+    ParamSpec,
+    Searcher,
+    SearchLevel,
+    SearchResult,
+    T,
     registry,
-    Checker,
 )
-from loguru import logger
-import cipheycore
-from dataclasses import dataclass
 
 """
-    We are using a tree structure here, because that makes searching and tracing back easier
-    
-    As such, when we encounter another possible parent, we remove that edge
+We are using a tree structure here, because that makes searching and tracing back easier
+As such, when we encounter another possible parent, we remove that edge
 """
 
 
@@ -131,9 +124,7 @@ class PriorityWorkQueue(Generic[PriorityType, T]):
     _queues: Dict[Any, List[T]]
 
     def add_work(self, priority: PriorityType, work: List[T]) -> None:
-        logger.trace(
-            f"""Adding work at depth {priority}"""
-        )
+        logger.trace(f"""Adding work at depth {priority}""")
 
         idx = bisect.bisect_left(self._sorted_priorities, priority)
         if (
@@ -177,7 +168,7 @@ class AuSearch(Searcher):
 
     @lru_cache()  # To save extra sorting
     def get_decoders_for(self, t: type):
-        ret = [j for i in registry[Decoder][t].values() for j in i]
+        ret = registry[Decoder[t]]
         ret.sort(key=lambda x: x.priority(), reverse=True)
         return ret
 
@@ -194,7 +185,9 @@ class AuSearch(Searcher):
 
         for i in self.get_crackers_for(type(res)):
             inst = self._config()(i)
-            additional_work.append(Edge(source=node, route=inst, info=convert_edge_info(inst.getInfo(res))))
+            additional_work.append(
+                Edge(source=node, route=inst, info=convert_edge_info(inst.getInfo(res)))
+            )
         priority = min(node.depth, self.priority_cap)
         if self.invert_priority:
             priority = -priority
@@ -216,7 +209,7 @@ class AuSearch(Searcher):
             except DuplicateNode:
                 continue
 
-            logger.trace(f"Nesting encodings")
+            logger.trace("Nesting encodings")
             self.recursive_expand(new_node, False)
 
     def recursive_expand(self, node: Node, nested: bool = True) -> None:
@@ -299,9 +292,13 @@ class AuSearch(Searcher):
         super().__init__(config)
         self._checker: Checker = config.objs["checker"]
         self.work = PriorityWorkQueue()  # Has to be defined here because of sharing
-        self.invert_priority = bool(distutils.util.strtobool(self._params()["invert_priority"]))
+        self.invert_priority = bool(
+            distutils.util.strtobool(self._params()["invert_priority"])
+        )
         self.priority_cap = int(self._params()["priority_cap"])
-        self.enable_nested = bool(distutils.util.strtobool(self._params()["enable_nested"]))
+        self.enable_nested = bool(
+            distutils.util.strtobool(self._params()["enable_nested"])
+        )
         self.max_cipher_depth = int(self._params()["max_cipher_depth"])
         if self.max_cipher_depth == 0:
             self.max_cipher_depth = math.inf
@@ -312,24 +309,32 @@ class AuSearch(Searcher):
     @staticmethod
     def getParams() -> Optional[Dict[str, ParamSpec]]:
         return {
-            "enable_nested": ParamSpec(req=False,
-                                       desc="Enables nested ciphers. "
-                                            "Incredibly slow, and not guaranteed to terminate",
-                                       default="False"),
-
-            "invert_priority": ParamSpec(req=False,
-                                         desc="Causes more complex encodings to be looked at first. "
-                                              "Good for deeply buried encodings.",
-                                         default="False"),
-            "max_cipher_depth": ParamSpec(req=False,
-                                          desc="The depth at which we stop trying to crack ciphers. "
-                                               "Set to 0 to disable",
-                                          default="0"),
-            "max_depth": ParamSpec(req=False,
-                                   desc="The depth at which we give up. "
-                                        "Set to 0 to disable",
-                                   default="0"),
-            "priority_cap": ParamSpec(req=False,
-                                      desc="Sets the maximum depth before we give up ordering items.",
-                                      default="2"),
+            "enable_nested": ParamSpec(
+                req=False,
+                desc="Enables nested ciphers. "
+                "Incredibly slow, and not guaranteed to terminate",
+                default="False",
+            ),
+            "invert_priority": ParamSpec(
+                req=False,
+                desc="Causes more complex encodings to be looked at first. "
+                "Good for deeply buried encodings.",
+                default="False",
+            ),
+            "max_cipher_depth": ParamSpec(
+                req=False,
+                desc="The depth at which we stop trying to crack ciphers. "
+                "Set to 0 to disable",
+                default="0",
+            ),
+            "max_depth": ParamSpec(
+                req=False,
+                desc="The depth at which we give up. " "Set to 0 to disable",
+                default="0",
+            ),
+            "priority_cap": ParamSpec(
+                req=False,
+                desc="Sets the maximum depth before we give up ordering items.",
+                default="2",
+            ),
         }
