@@ -7,28 +7,26 @@
 Â© Brandon Skerritt
 Github: brandonskerritt
 """
-from copy import copy
 from distutils import util
-from typing import Optional, Dict, Union, Set, List
+from typing import Dict, List, Optional, Union
 
-import re
-
-from loguru import logger
-import ciphey
 import cipheycore
+from loguru import logger
 
-from ciphey.iface import ParamSpec, Cracker, CrackResult, T, CrackInfo, registry
 from ciphey.common import fix_case
+from ciphey.iface import Config, Cracker, CrackInfo, CrackResult, ParamSpec, registry
 
 
 @registry.register
-class Vigenere(ciphey.iface.Cracker[str]):
+class Vigenere(Cracker[str]):
     def getInfo(self, ctext: str) -> CrackInfo:
         if self.keysize is not None:
             analysis = self.cache.get_or_update(
                 ctext,
                 f"vigenere::{self.keysize}",
-                lambda: cipheycore.analyse_string(ctext.lower(), self.keysize, self.group),
+                lambda: cipheycore.analyse_string(
+                    ctext.lower(), self.keysize, self.group
+                ),
             )
 
             val = cipheycore.vigenere_detect(analysis, self.expected)
@@ -44,13 +42,14 @@ class Vigenere(ciphey.iface.Cracker[str]):
 
         likely_lens = self.cache.get_or_update(
             ctext,
-            f"vigenere::likely_lens",
-            lambda: cipheycore.vigenere_likely_key_lens(ctext.lower(), self.expected, self.group, self.detect_p_value),
+            "vigenere::likely_lens",
+            lambda: cipheycore.vigenere_likely_key_lens(
+                ctext.lower(), self.expected, self.group, self.detect_p_value
+            ),
         )
 
-        likely_lens_cpy = likely_lens
         # Filter out the lens that make no sense
-        likely_lens = [i for i in likely_lens if i.len <= self.MAX_KEY_LENGTH]
+        likely_lens = [i for i in likely_lens if i.len <= self.max_key_length]
 
         for keysize in likely_lens:
             # Store the analysis
@@ -65,7 +64,9 @@ class Vigenere(ciphey.iface.Cracker[str]):
                 failure_runtime=2e-2,
             )
 
-        logger.debug(f"Vigenere has likelihood {likely_lens[0].p_value} with lens {[i.len for i in likely_lens]}")
+        logger.debug(
+            f"Vigenere has likelihood {likely_lens[0].p_value} with lens {[i.len for i in likely_lens]}"
+        )
 
         return CrackInfo(
             success_likelihood=likely_lens[0].p_value,
@@ -85,15 +86,18 @@ class Vigenere(ciphey.iface.Cracker[str]):
             analysis, self.expected, self.group, self.p_value
         )
         if len(possible_keys) > self.clamp:
-            possible_keys = possible_keys[:self.clamp]
+            possible_keys = possible_keys[: self.clamp]
         logger.trace(
             f"Vigenere crack got keys: {[[i for i in candidate.key] for candidate in possible_keys]}"
         )
         return [
             CrackResult(
-                value=fix_case(cipheycore.vigenere_decrypt(ctext, candidate.key, self.group), real_ctext),
+                value=fix_case(
+                    cipheycore.vigenere_decrypt(ctext, candidate.key, self.group),
+                    real_ctext,
+                ),
                 key_info="".join([self.group[i] for i in candidate.key]),
-                misc_info=f"p-value was {candidate.p_value}"
+                misc_info=f"p-value was {candidate.p_value}",
             )
             for candidate in possible_keys[: min(len(possible_keys), 10)]
         ]
@@ -113,80 +117,84 @@ class Vigenere(ciphey.iface.Cracker[str]):
                 self.cache.get_or_update(
                     ctext,
                     f"vigenere::{self.keysize}",
-                    lambda: cipheycore.analyse_string(message, self.keysize, self.group),
+                    lambda: cipheycore.analyse_string(
+                        message, self.keysize, self.group
+                    ),
                 ),
-                ctext
-            )
-        else:
-            arrs = []
-            likely_lens = self.cache.get_or_update(
                 ctext,
-                f"vigenere::likely_lens",
-                lambda: cipheycore.vigenere_likely_key_lens(message, self.expected, self.group),
             )
-            possible_lens = [i for i in likely_lens]
-            possible_lens.sort(key=lambda i: i.p_value)
-            logger.trace(f"Got possible lengths {[i.len for i in likely_lens]}")
-            # TODO: work out length
-            for i in possible_lens:
-                arrs.extend(
-                    self.crackOne(
-                        message,
-                        self.cache.get_or_update(
-                            ctext,
-                            f"vigenere::{i.len}",
-                            lambda: cipheycore.analyse_string(message, i.len, self.group),
-                        ),
-                        ctext
-                    )
+
+        arrs = []
+        likely_lens = self.cache.get_or_update(
+            ctext,
+            "vigenere::likely_lens",
+            lambda: cipheycore.vigenere_likely_key_lens(
+                message, self.expected, self.group
+            ),
+        )
+        possible_lens = [i for i in likely_lens]
+        possible_lens.sort(key=lambda i: i.p_value)
+        logger.trace(f"Got possible lengths {[i.len for i in likely_lens]}")
+        # TODO: work out length
+        for i in possible_lens:
+            arrs.extend(
+                self.crackOne(
+                    message,
+                    self.cache.get_or_update(
+                        ctext,
+                        f"vigenere::{i.len}",
+                        lambda: cipheycore.analyse_string(message, i.len, self.group),
+                    ),
+                    ctext,
                 )
+            )
 
-            logger.debug(f"Vigenere returned {len(arrs)} candidates")
-            return arrs
+        logger.debug(f"Vigenere returned {len(arrs)} candidates")
+        return arrs
 
     @staticmethod
     def getParams() -> Optional[Dict[str, ParamSpec]]:
         return {
-            "expected": ciphey.iface.ParamSpec(
+            "expected": ParamSpec(
                 desc="The expected distribution of the plaintext",
                 req=False,
                 config_ref=["default_dist"],
             ),
-            "group": ciphey.iface.ParamSpec(
+            "group": ParamSpec(
                 desc="An ordered sequence of chars that make up the caesar cipher alphabet",
                 req=False,
                 default="abcdefghijklmnopqrstuvwxyz",
             ),
-            "lower": ciphey.iface.ParamSpec(
+            "lower": ParamSpec(
                 desc="Whether or not the ciphertext should be converted to lowercase first",
                 req=False,
                 default=True,
             ),
-            "keysize": ciphey.iface.ParamSpec(
+            "keysize": ParamSpec(
                 desc="A key size that should be used. If not given, will attempt to work it out",
                 req=False,
             ),
-            "p_value": ciphey.iface.ParamSpec(
+            "p_value": ParamSpec(
                 desc="The p-value to use for windowed frequency analysis",
                 req=False,
                 default=0.5,
             ),
-            "detect_p_value": ciphey.iface.ParamSpec(
+            "detect_p_value": ParamSpec(
                 desc="The p-value to use for the detection of Vigenere length",
                 req=False,
                 default=0.01,
             ),
-            "clamp": ciphey.iface.ParamSpec(
+            "clamp": ParamSpec(
                 desc="The maximum number of candidates that can be returned per key len",
                 req=False,
                 default=10,
             ),
         }
 
-    def __init__(self, config: ciphey.iface.Config):
+    def __init__(self, config: Config):
         super().__init__(config)
         self.lower: Union[str, bool] = self._params()["lower"]
-        if type(self.lower) != bool:
+        if not isinstance(self.lower, bool):
             self.lower = util.strtobool(self.lower)
         self.group = list(self._params()["group"])
         self.expected = config.get_resource(self._params()["expected"])
@@ -197,4 +205,4 @@ class Vigenere(ciphey.iface.Cracker[str]):
         self.p_value = float(self._params()["p_value"])
         self.detect_p_value = float(self._params()["detect_p_value"])
         self.clamp = int(self._params()["clamp"])
-        self.MAX_KEY_LENGTH = 16
+        self.max_key_length = 16
