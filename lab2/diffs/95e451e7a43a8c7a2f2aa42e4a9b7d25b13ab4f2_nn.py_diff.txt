@@ -1,12 +1,20 @@
 # i need the below code to make tensorflow shut up
 import os
-os.environ["TF_CPP_MIN_LOG_LEVEL"]="3"
+
+os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
 
 import tensorflow as tf
 from scipy.stats import chisquare
 from tensorflow.keras.callbacks import TensorBoard
-from tensorflow.keras.layers import (Activation, Conv2D, Dense, Dropout,
-                                     Flatten, MaxPooling2D, Reshape)
+from tensorflow.keras.layers import (
+    Activation,
+    Conv2D,
+    Dense,
+    Dropout,
+    Flatten,
+    MaxPooling2D,
+    Reshape,
+)
 from tensorflow.keras.models import Sequential, load_model
 from string import punctuation
 import numpy
@@ -20,12 +28,16 @@ class NeuralNetwork:
     """
     Class to use the neural network
     """
+
     def __init__(self):
         self.CATEGORIES = ["sha1", "md5", "sha256", "sha512", "caeser", "plaintext"]
         self.CATEGORIES = [1, 2, 3, 4, 5, 6]
-        self.MODEL = load_model("app/neuralNetworkMod/NeuralNetworkModel.model")
-        
+        script_dir = os.path.dirname(__file__)
+        file_path = os.path.join(script_dir, "NeuralNetworkModel.model")
+        self.MODEL = load_model(file_path)
+
         self.mh = app.mathsHelper.mathsHelper()
+
     def formatData(self, text):
         """
         formats the data
@@ -34,6 +46,7 @@ class NeuralNetwork:
         result.append(len(text))
         result.append(len(list(set(list(text)))))
         return result
+
     def editData(self, data):
         """
         Data has to be in format:
@@ -42,6 +55,7 @@ class NeuralNetwork:
         new = []
         new.append(self.formatData(data))
         return numpy.asarray(new)
+
     def predictnn(self, text):
         """
         use this to create predictions for the NN
@@ -49,19 +63,48 @@ class NeuralNetwork:
         """
         text = self.editData(text)
         return self.MODEL.predict(text)
+
     def getLetterFreq(self, text):
         # This part creates a letter frequency of the text
-        letterFreq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}
+        letterFreq = {
+            "a": 0,
+            "b": 0,
+            "c": 0,
+            "d": 0,
+            "e": 0,
+            "f": 0,
+            "g": 0,
+            "h": 0,
+            "i": 0,
+            "j": 0,
+            "k": 0,
+            "l": 0,
+            "m": 0,
+            "n": 0,
+            "o": 0,
+            "p": 0,
+            "q": 0,
+            "r": 0,
+            "s": 0,
+            "t": 0,
+            "u": 0,
+            "v": 0,
+            "w": 0,
+            "x": 0,
+            "y": 0,
+            "z": 0,
+        }
 
         for letter in text.lower():
             if letter in letterFreq:
-                letterFreq[letter] +=1
+                letterFreq[letter] += 1
             else:
                 # if letter is not puncuation, but it is still ascii
                 # it's probably a different language so add it to the dict
                 if letter not in punctuation and self.mh.isAscii(letter):
                     letterFreq[letter] = 1
         return list(letterFreq.values())
+
     def useNetwork(self, data):
         """data is a list containing these 3 things (in this order)
         * length of text
@@ -72,21 +115,24 @@ class NeuralNetwork:
         final = numpy.asarray(final)
         result = model.predict(new)
         return result
+
     def refreshEverything(self):
         """creates data and retrains the neural network. warning - can take a long time"""
         pass
+
     def train(self, data):
         """Run this when you want to retrain the neural network"""
         import csv
-        with open('output.csv', 'r') as f:
+
+        with open("output.csv", "r") as f:
             reader = csv.reader(f)
             your_list = list(reader)
-        
+
         # prepares the data
-        # it should only return the length and how many letters it has     
+        # it should only return the length and how many letters it has
         # length of text
         # how many letters
-        # chi squared score   
+        # chi squared score
         x = []
         y = []
         counter = 0.0
@@ -112,24 +158,26 @@ class NeuralNetwork:
         y_train = numpy.asarray(y)
 
         model = Sequential()
-        model.add(Dense(526, activation='relu', input_shape=(3,)))
+        model.add(Dense(526, activation="relu", input_shape=(3,)))
         model.add(Flatten())
-        model.add(Dense(526, activation='relu'))
+        model.add(Dense(526, activation="relu"))
         model.add(layer_dropout(0.2))
-        model.add(Dense(526, activation='relu'))
+        model.add(Dense(526, activation="relu"))
         model.add(Flatten())
-        model.add(Dense(6, activation='softmax'))
+        model.add(Dense(6, activation="softmax"))
 
-        model.compile(optimizer='adam',
-                loss='sparse_categorical_crossentropy',  
-                metrics=['accuracy'])
-        model.fit(x_train, y_train, validation_split=0.2, epochs = 50, batch_size = 25)
+        model.compile(
+            optimizer="adam",
+            loss="sparse_categorical_crossentropy",
+            metrics=["accuracy"],
+        )
+        model.fit(x_train, y_train, validation_split=0.2, epochs=50, batch_size=25)
 
         model.save("NeuralNetworkModel.model")
 
-
         def makeTrainingData(self, file):
             import hashlib
+
             #%%
             from string import punctuation
             from scipy.stats import chisquare
@@ -139,7 +187,7 @@ class NeuralNetwork:
                 text = f.read()
 
             # replaces new lines with full stops
-            text = text.replace('\n', '.').lower()
+            text = text.replace("\n", ".").lower()
 
             # splits it up into sentences
             sentences = text.split(".")
@@ -152,7 +200,7 @@ class NeuralNetwork:
 
             # So I want the table to look like:
             # text | length | how many letters are used (uniqueness) | maybe the chi squared score ? (normalised distribution not english) | frequency distribution | what it is | the plaintext
-            # 
+            #
             # I want it to include these things:
             # base64
             # sha1
@@ -160,54 +208,66 @@ class NeuralNetwork:
             # sha256
             # caeser cipher
             # plaintext
-            # 
+            #
             # So the next step would be to create encryption functions
             # then for every sentence in it
             # encrypt it
             # create a csv line
             # plaintext | encrypted text | length | how many letters are used | frequency distribution | chi squared score | what it is (base 64, sha 256, etc)
-            # 
-            
+            #
+
             def caesar_cipher(s, k):
                 """Iterates through each letter and constructs the cipher text"""
-                new_message = ''
+                new_message = ""
                 factor = k % 26
                 for c in s:
                     new_message += apply_rotation(c, factor)
                 return new_message
+
             def sha1hash(s):
                 temp = str.encode(s)
                 temp = hashlib.sha1(temp)
                 return temp.hexdigest()
+
             def md5hash(s):
                 temp = str.encode(s)
                 temp = hashlib.md5(temp)
                 return temp.hexdigest()
+
             def sha256hash(s):
                 temp = str.encode(s)
                 temp = hashlib.sha256(temp)
                 return temp.hexdigest()
+
             def sha512hash(s):
                 temp = str.encode(s)
                 temp = hashlib.sha512(temp)
                 return temp.hexdigest()
-            types = ["sha1", "md5", "sha256", "sha512", "caeser", "caeser", "plaintext" ]
+
+            types = ["sha1", "md5", "sha256", "sha512", "caeser", "caeser", "plaintext"]
+
             def apply_rotation(c, factor):
                 """Applies a shift of factor to the letter denoted by c"""
                 if c.isalpha():
-                    lower = ord('A') if c.isupper() else ord('a')
+                    lower = ord("A") if c.isupper() else ord("a")
                     c = chr(lower + ((ord(c) - lower + factor) % 26))
                 return c
+
             def isAscii(letter):
                 """Determines whether a letter (or word) is ASCII"""
                 # checks if a charecter is ascii
                 # https://stackoverflow.com/questions/196345/how-to-check-if-a-string-in-python-is-in-ascii
                 return bool(lambda s: len(s) == len(s.encode()))
+
             # starts to write the data
             import csv
+
             f = open("encryptionData.csv", "w")
             counter = 0
-            encryption_writer = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
+            encryption_writer = csv.writer(
+                f, delimiter=",", quotechar='"', quoting=csv.QUOTE_MINIMAL
+            )
+
             def makeCsvLine(plaintext, text, cipher):
                 plaintext = plaintext
                 ciphertext = text
@@ -215,7 +275,7 @@ class NeuralNetwork:
                 howManyLetters = self.howManyLettersUsed(text)
                 letterfreq = self.getLetterFreq(text)
                 chi = chisquare(letterfreq)[1]
-                
+
                 used = cipher
                 if used == "sha1":
                     used = 0
@@ -230,11 +290,23 @@ class NeuralNetwork:
                 elif used == "plaintext":
                     used = 5
                 if plaintext == "" or plaintext == None:
-                    return (1)
+                    return 1
                 global counter
-                encryption_writer.writerow([plaintext, ciphertext, length, howManyLetters, letterfreq, chi, used])
+                encryption_writer.writerow(
+                    [
+                        plaintext,
+                        ciphertext,
+                        length,
+                        howManyLetters,
+                        letterfreq,
+                        chi,
+                        used,
+                    ]
+                )
+
             import random
-            for sent in sentences:        
+
+            for sent in sentences:
                 result = random.choice(types)
                 if sent == None or sent == "" or sent == " ":
                     continue
