@@ -54,7 +54,6 @@ class chiSquared:
         # ones at the start
         self.chiSquared(text)
         if self.mh.percentage(self.oldAverage, self.average) >= self.chiSquaredSignificaneThreshold or self.totalDone < self.totalDoneThreshold:
-            print("It's significant!")
             return(True)
         else:
             return(False)
@@ -63,7 +62,8 @@ class chiSquared:
 
         # This part creates a letter frequency of the text
         letterFreq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}
-        for letter in text:
+        
+        for letter in text.lower():
             if letter in letterFreq:
                 letterFreq[letter] +=1
             else:
@@ -92,6 +92,7 @@ class chiSquared:
             languagesChi[language] = temp
             if temp > maxChiSquare:
                 self.highestLanguage = language
+                maxChiSquare = temp
         # calculates running average
         self.oldAverage = self.average
         self.totalDone += 1
@@ -104,8 +105,6 @@ class chiSquared:
         # http://practicalcryptography.com/cryptanalysis/text-characterisation/chi-squared-statistic/
         # given a text frequency and a distribution, calculate it's Chi score
         chiScore = 0.0
-        print(len(text))
-        print(len(distribution))
         for counter, letter in enumerate(text.values()):
             chiScore = chiScore + ((letter - distribution[counter])**2) / distribution[counter]
         return chiScore
