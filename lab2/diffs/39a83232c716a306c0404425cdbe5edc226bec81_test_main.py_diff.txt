@@ -19,7 +19,7 @@ def test_ascii_shift():
         Config().library_default().complete_config(),
         '"?FFIzGSzH;G?zCMz<??z;H>z#zFCE?z>IAz;H>z;JJF?z;H>zNL??',
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_atbash():
@@ -35,7 +35,7 @@ def test_base32():
         Config().library_default().complete_config(),
         "JBSWY3DPEBWXSIDOMFWWKIDJOMQGEZLFEBQW4ZBAJEQGY2LLMUQGI33HEBQW4ZBAMFYHA3DFEBQW4ZBAORZGKZI=",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base58_bitcoin():
@@ -43,7 +43,7 @@ def test_base58_bitcoin():
         Config().library_default().complete_config(),
         "6qYhNwsP46Mn4gy6gyANfsMm2icAxGFA6gnFjVm9phYHeby7PZm3vthiXxSU77teQgTFGbHETn",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base58_ripple():
@@ -51,7 +51,7 @@ def test_base58_ripple():
         Config().library_default().complete_config(),
         "aqY64A1PhaM8hgyagyw4C1Mmp5cwxGEwag8EjVm9F6YHebyfPZmsvt65XxS7ffteQgTEGbHNT8",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base62():
@@ -59,7 +59,7 @@ def test_base62():
         Config().library_default().complete_config(),
         "2mQvnz9Yevvb7DRCuyDltsP31vJLToR5pjE9orWkzHMUsht2kbC96PLbZ1sdIocsGHENrzC2n",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base64():
@@ -84,7 +84,7 @@ def test_base85():
         Config().library_default().complete_config(),
         "87cURD]inB+DtV)AKY].+C\\nn+CT.u+A!\\lBkq9&A8c*'@;]Tu@;p1%AKYE!A0>u7ARt",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base91():
@@ -92,7 +92,7 @@ def test_base91():
         Config().library_default().complete_config(),
         ">OwJh>=/fV@$x88j9ZNKB*ge$yV%lE%ZKi,<d,TX2$0t,,cjPD@JY<UCHRWznuWoQPD",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_baudot():
@@ -129,7 +129,7 @@ def test_braille():
         Config.library_default().complete_config(),
         "⠓⠑⠇⠇⠕⠀⠍⠽⠀⠝⠁⠍⠑⠀⠊⠎⠀⠃⠑⠑⠀⠁⠝⠙⠀⠊⠀⠇⠊⠅⠑⠀⠙⠕⠛⠀⠁⠝⠙⠀⠁⠏⠏⠇⠑⠀⠁⠝⠙⠀⠞⠗⠑⠑",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str.lower()
 
 
 def test_brainfuck():
@@ -162,7 +162,7 @@ def test_decimal():
         Config().library_default().complete_config(),
         "72 101 108 108 111 32 109 121 32 110 97 109 101 32 105 115 32 98 101 101 32 97 110 100 32 73 32 108 105 107 101 32 100 111 103 32 97 110 100 32 97 112 112 108 101 32 97 110 100 32 116 114 101 101",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_galactic():
@@ -170,7 +170,7 @@ def test_galactic():
         Config().library_default().complete_config(),
         "⍑ᒷꖎꖎ𝙹 ᒲ|| リᔑᒲᒷ ╎ᓭ ʖᒷᒷ ᔑリ↸ i ꖎ╎ꖌᒷ ↸𝙹⊣ ᔑリ↸ ᔑ!¡!¡ꖎᒷ ᔑリ↸ ℸ ̣ ∷ᒷᒷ",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str.lower()
 
 
 def test_galactic_Xproblem():
@@ -178,7 +178,7 @@ def test_galactic_Xproblem():
         Config().library_default().complete_config(),
         "⍑ᔑꖎ╎⎓ᔑ ̇/,  ̇/||ꖎ𝙹!¡⍑𝙹リᒷ, ᔑ  ̇/ ᔑꖎ𝙹リᒷ ᔑリ↸  ̇/ᒷ∷𝙹 ̇/ ⎓∷𝙹ᒲ 𝙹 ̇/⎓𝙹∷↸",
     )
-    assert res.lower() == "halifax, xylophone, a x alone and xerox from oxford"
+    assert res == "halifax, xylophone, a x alone and xerox from oxford"
 
 
 def test_gzip():
@@ -186,7 +186,7 @@ def test_gzip():
         Config().library_default().complete_config(),
         "H4sIAAzul18A/yXJzQmAMBSEwVa+ckwZT7LIw80P6sXuA3ocZpM9aC89msibXSJ6peA8RR3Hx5jTfzyXtAAbQvCyNgAAAA==",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_hexadecimal():
@@ -195,7 +195,7 @@ def test_hexadecimal():
         "48 65 6c 6c 6f 20 6d 79 20 6e 61 6d 65 20 69 73 20 62 65 65 20 61 6e 64 20 49 20 6c 69 6b 65 20 64 6f 67 20 61 6e 64 20 61 70 70 6c 65 20 61 6e 64 20 74 72 65 65",
     )
 
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_json_problem():
@@ -235,7 +235,7 @@ def test_new_line_at_start_returns():
     # but the new line should be returned to the user as new lines are important
     res = decrypt(Config().library_default().complete_config(), "\npass\n")
 
-    assert res.lower() == "\npass\n"
+    assert res == "\npass\n"
 
 
 def test_new_line_strip_and_return():
@@ -243,7 +243,7 @@ def test_new_line_strip_and_return():
     # but the new line should be returned to the user as new lines are important
     res = decrypt(Config().library_default().complete_config(), "pass\n")
 
-    assert res.lower() == "pass\n"
+    assert res == "pass\n"
 
 
 def test_octal():
@@ -251,7 +251,7 @@ def test_octal():
         Config().library_default().complete_config(),
         "110 145 154 154 157 40 155 171 40 156 141 155 145 40 151 163 40 142 145 145 40 141 156 144 40 111 40 154 151 153 145 40 144 157 147 40 141 156 144 40 141 160 160 154 145 40 141 156 144 40 164 162 145 145",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_plaintext():
@@ -264,7 +264,7 @@ def test_reversed_text():
         Config().library_default().complete_config(),
         "eert dna elppa dna god ekil I dna eeb si eman ym olleH",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_rot47():
@@ -294,9 +294,9 @@ def test_tap_code():
 def test_url():
     res = decrypt(
         Config().library_default().complete_config(),
-        "Hello%20my%20name%20is%20bee%20and%20I%20like%20dog%20and%20apple%20and%20tree",
+        "https%3A%2F%2Fwww%2Egoogle%2Ecom%2Fsearch%3Fq%3Dciphey",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == "https://www.google.com/search?q=ciphey"
 
 
 def test_uuencode():
@@ -324,6 +324,6 @@ def test_vigenere():
 def test_xandy():
     res = decrypt(
         Config().library_default().complete_config(),
-        "xDDxDxxx xDDxxDxD xDDxDDxx xDDxDDxx xDDxDDDD xxDxxxxx xDDxDDxD xDDDDxxD xxDxxxxx xDDxDDDx xDDxxxxD xDDxDDxD xDDxxDxD xxDxxxxx xDDxDxxD xDDDxxDD xxDxxxxx xDDxxxDx xDDxxDxD xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDxxDxxD xxDxxxxx xDDxDDxx xDDxDxxD xDDxDxDD xDDxxDxD xxDxxxxx xDDxxDxx xDDxDDDD xDDxxDDD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDxxxxD xDDDxxxx xDDDxxxx xDDxDDxx xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDDxDxx xDDDxxDx xDDxxDxD xDDxxDxD",
+        "xDxxDxxx xDDxxDxD xDDxDDxx xDDxDDxx xDDxDDDD xxDxxxxx xDDxDDxD xDDDDxxD xxDxxxxx xDDxDDDx xDDxxxxD xDDxDDxD xDDxxDxD xxDxxxxx xDDxDxxD xDDDxxDD xxDxxxxx xDDxxxDx xDDxxDxD xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDxxDxxD xxDxxxxx xDDxDDxx xDDxDxxD xDDxDxDD xDDxxDxD xxDxxxxx xDDxxDxx xDDxDDDD xDDxxDDD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDxxxxD xDDDxxxx xDDDxxxx xDDxDDxx xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDDxDxx xDDDxxDx xDDxxDxD xDDxxDxD",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
