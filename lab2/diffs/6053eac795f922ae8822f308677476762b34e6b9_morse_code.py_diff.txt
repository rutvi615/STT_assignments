@@ -1,6 +1,7 @@
 from typing import Dict, Optional
 
-from loguru import logger
+import logging
+from rich.logging import RichHandler
 
 from ciphey.iface import Config, Decoder, ParamSpec, T, Translation, U, registry
 
@@ -16,7 +17,7 @@ class Morse_code(Decoder[str]):
     MORSE_CODE_DICT_INV: Dict[str, str]
 
     def decode(self, ctext: T) -> Optional[U]:
-        logger.trace("Attempting Morse code decoder")
+        logging.debug("Attempting Morse code decoder")
 
         char_boundary = word_boundary = None
 
@@ -28,7 +29,7 @@ class Morse_code(Decoder[str]):
             if i_priority is None:
                 if i in self.ALLOWED:
                     continue
-                logger.trace(f"Non-morse char '{i}' found")
+                logging.debug(f"Non-morse char '{i}' found")
                 return None
 
             if i_priority <= char_priority or i == char_boundary or i == word_boundary:
@@ -45,14 +46,14 @@ class Morse_code(Decoder[str]):
             char_priority = i_priority
             char_boundary = i
 
-        logger.trace(
+        logging.debug(
             f"Char boundary is unicode {ord(char_boundary)}, and word boundary is unicode {ord(word_boundary) if word_boundary is not None else None}"
         )
 
         result = ""
 
         for word in ctext.split(word_boundary) if word_boundary else [ctext]:
-            logger.trace(f"Attempting to decode word {word}")
+            logging.debug(f"Attempting to decode word {word}")
             for char in word.split(char_boundary):
                 char = char.translate(self.PURGE)
                 if len(char) == 0:
@@ -60,17 +61,17 @@ class Morse_code(Decoder[str]):
                 try:
                     m = self.MORSE_CODE_DICT_INV[char]
                 except KeyError:
-                    logger.trace(f"Invalid codeword '{char}' found")
+                    logging.debug(f"Invalid codeword '{char}' found")
                     return None
                 result = result + m
             # after every word add a space
             result = result + " "
         if len(result) == 0:
-            logger.trace("Morse code failed to match")
+            logging.debug("Morse code failed to match")
             return None
         # Remove trailing space
         result = result[:-1]
-        logger.debug(f"Morse code successful, returning {result}")
+        logging.info(f"Morse code successful, returning {result}")
         return result.strip().upper()
 
     @staticmethod
