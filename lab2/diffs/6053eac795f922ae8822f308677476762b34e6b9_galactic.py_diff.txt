@@ -1,6 +1,7 @@
 from typing import Dict, Optional
 
-from loguru import logger
+import logging
+from rich.logging import RichHandler
 
 from ciphey.iface import Config, Decoder, ParamSpec, T, Translation, U, registry
 
@@ -12,7 +13,7 @@ class Galactic(Decoder[str]):
         Takes a string written in the 'Standard Galactic Alphabet'
         (aka Minecraft Enchanting Table Symbols) and translates it to ASCII text.
         """
-        logger.trace("Attempting Standard Galactic Alphabet decoder")
+        logging.debug("Attempting Standard Galactic Alphabet decoder")
 
         # To avoid complications, only move forward with the decoding if we can
         # reasonably assume that the input string is written in the galactic alphabet
@@ -25,11 +26,11 @@ class Galactic(Decoder[str]):
             else:
                 continue
         if galactic_matches == 0:
-            logger.trace(
+            logging.debug(
                 "No matching galactic alphabet letters found. Skipping galactic decoder"
             )
             return None
-        logger.trace(f"{galactic_matches} galactic alphabet letters found. ")
+        logging.debug(f"{galactic_matches} galactic alphabet letters found. ")
 
         result = ""
         # Take out the problematic characters consisting of multiple symbols
@@ -40,7 +41,7 @@ class Galactic(Decoder[str]):
             .replace(" ̣ ", "")
             .replace("̇", "x")
         )
-        logger.trace(f"Modified string is {ctext}")
+        logging.debug(f"Modified string is {ctext}")
 
         for letter in ctext:
             if letter in self.GALACTIC_DICT.keys():
@@ -53,7 +54,7 @@ class Galactic(Decoder[str]):
         # Remove the trailing space (appearing as a leading space)
         # from the x that results from the diacritic replacement
         result = result.replace("x ", "x")
-        logger.trace(f"Decoded string is {result}")
+        logging.debug(f"Decoded string is {result}")
         return result
 
     @staticmethod
