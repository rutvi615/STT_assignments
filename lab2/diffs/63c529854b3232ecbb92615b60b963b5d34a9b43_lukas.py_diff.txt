@@ -1,11 +1,13 @@
 import cipheydists
 import random
 
-class galactic_encode():
-    '''
+
+class galactic_encode:
+    """
     (Attempts to) encode an input string with the Standard Galactic Alphabet.
-    '''
-    def __init__(self, text:str):
+    """
+
+    def __init__(self, text: str):
         self.text = text.lower()
         self.ctext = ""
 
@@ -21,11 +23,12 @@ class galactic_encode():
         return self.ctext
 
 
-class atbash_encode():
-    '''
+class atbash_encode:
+    """
     Encodes an input string with the Atbash cipher.
-    '''
-    def __init__(self, text:str):
+    """
+
+    def __init__(self, text: str):
         self.text = text.lower()
         self.letters = list("abcdefghijklmnopqrstuvwxyz")
         self.atbash_dict = {self.letters[::-1][i]: self.letters[i] for i in range(26)}
@@ -43,16 +46,23 @@ class atbash_encode():
         return self.ctext
 
 
-class XY_encrypt():
-    '''
+class XY_encrypt:
+    """
     Encrypts an input string using binary substitution (called XandY in Ciphey) in which
     first, the input string is converted to its binary representation and then the 0s and 1s
     of the binary string are replaced with any two characters. 
     - flip: Which of the two possible rotations of the substitute characters is used?
     - randomize: If True, random spaces are inserted into the cstring, which Ciphey can handle.
     - key: Which two characters are used to represent the 0s and 1s?
-    '''
-    def __init__(self, text: str, flip: bool = bool(random.randint(0, 1)), randomize:bool = True, key: list = None):
+    """
+
+    def __init__(
+        self,
+        text: str,
+        flip: bool = bool(random.randint(0, 1)),
+        randomize: bool = True,
+        key: list = None,
+    ):
         self.ASCII = list(chr(x).encode() for x in range(128))
         self.text = text.lower()
         self.ctext = ""
@@ -62,7 +72,7 @@ class XY_encrypt():
 
     def randomizer(self):
         s = list(self.ctext)
-        for i in range(len(s)-1):
+        for i in range(len(s) - 1):
             while random.randrange(2):
                 s[i] = s[i] + " "
         return "".join(s)
@@ -78,7 +88,9 @@ class XY_encrypt():
         else:
             one, two = random.choice(self.ASCII), random.choice(self.ASCII)
 
-        self.ctext = self.ctext.replace(str(int(self.flip)), one).replace(str(int(not self.flip)), two)
+        self.ctext = self.ctext.replace(str(int(self.flip)), one).replace(
+            str(int(not self.flip)), two
+        )
         self.ctext = self.randomizer() if self.randomize == True else self.ctext
 
         return self.ctext
