@@ -85,11 +85,13 @@ class mathsHelper:
 
         # gets maximum key then sets it to the front
         for key, value in probTable.items():
+            logger.debug(f"Sorting {key}")
             maxLocal = 0
             # for each item in that table
             for key2, value2 in value.items():
                 maxLocal = maxLocal + value2
             if maxLocal > maxOverall:
+                logger.debug(f"New max local found {maxLocal}")
                 # because the dict doesnt reset
                 maxDictPair = {}
                 maxOverall = maxLocal
@@ -99,7 +101,8 @@ class mathsHelper:
         # removes the highest key from the prob table
         del probTable[highestKey]
         # returns the max dict (at the start) with the prob table
-        # this way, it should always work on most likely first.#
+        # this way, it should always work on most likely first.
+        logger.debug(f"The prob table is {probTable} and the maxDictPair is {maxDictPair}")
         d = {**maxDictPair, **probTable}
         logger.debug(f"The new sorted prob table is {d}")
         return d
@@ -111,7 +114,9 @@ class mathsHelper:
         d = dict(newDict)
 
         # (f"d is {d}")
+        logger.debug(f"The old dictionary before newSort() is {newDict}")
         sortedI = OrderedDict(sorted(d.items(), key=lambda x: x[1], reverse=True))
+        logger.debug(f"The dictionary after newSort() is {sortedI}")
         # sortedI = sortDictionary(x)
         return sortedI
 
