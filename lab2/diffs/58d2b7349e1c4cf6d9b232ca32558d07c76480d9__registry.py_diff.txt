@@ -36,9 +36,13 @@ class Registry:
     _reg: Dict[Type, RegElem] = {}
     _names: Dict[str, Tuple[Type, Set[Type]]] = {}
     _targets: Dict[str, Dict[Type, List[Type]]] = {}
-    _modules = {Checker, Cracker, Decoder, ResourceLoader, Searcher}
+    _modules = {Checker, Cracker, Decoder, ResourceLoader, Searcher, PolymorphicChecker}
 
     def _register_one(self, input_type, module_base, module_args):
+        if len(module_args) == 0:
+            self._reg.setdefault(module_base, []).append(input_type)
+            return
+
         target_reg = self._reg.setdefault(module_base, {})
         # Seek to the given type
         for subtype in module_args[0:-1]:
@@ -54,6 +58,17 @@ class Registry:
         else:
             target = None
 
+        # Replace checker with polymorphic checker
+        if issubclass(input_type, Checker):
+            if len(args) == 0:
+                arg = [get_args(i) for i in input_type.__orig_bases__ if get_origin(i) == Checker][0]
+                if len(arg) != 1:
+                    raise TypeError(f"No argument for Checker")
+                converted = input_type.convert({arg[0]})
+            else:
+                converted = input_type.convert(set(args))
+            return self._real_register(converted)
+
         if issubclass(input_type, Searcher):
             module_type = module_base = Searcher
             module_args = ()
@@ -62,7 +77,7 @@ class Registry:
             module_base = None
 
             # Work out what module type this is
-            if len(args) == 0:
+            if len(args) == 0 and hasattr(input_type, "__orig_bases__"):
                 for i in input_type.__orig_bases__:
                     if module_type is not None:
                         raise TypeError(
@@ -86,7 +101,9 @@ class Registry:
 
             # Now handle the difference between register and register_multi
             if len(args) == 0:
-                if module_base is None:
+                if module_type is PolymorphicChecker:
+                    module_base = PolymorphicChecker
+                elif module_base is None:
                     raise TypeError("No type argument given")
                 self._register_one(input_type, module_base, get_args(module_type))
                 name_target[1].add(module_base)
