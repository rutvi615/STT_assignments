@@ -5,22 +5,27 @@ class Binary:
         self.lc = lc
     def decrypt(self, text):
         try:
-            ret = text_to_bits(text)
+            result = self.decode(text)
         except ValueError as e:
             return {"lc": self.lc, "IsPlaintext?": False, "Plaintext": None, "Cipher": None, "Extra Information": None}
+        except TypeError as e:
+            return {"lc": self.lc, "IsPlaintext?": False, "Plaintext": None, "Cipher": None, "Extra Information": None}
+
         if self.lc.checkLanguage(result):
             return {"lc": self.lc, "IsPlaintext?": True, "Plaintext": result, "Cipher": "Ascii to Binary encoded", "Extra Information": None}
-
-    def text_to_bits(text, encoding='utf-8', errors='surrogatepass'):
-        bits = bin(int(binascii.hexlify(text.encode(encoding, errors)), 16))[2:]
-        return bits.zfill(8 * ((len(bits) + 7) // 8))
-    
-    def text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):
-        n = int(bits, 2)
-        return int2bytes(n).decode(encoding, errors)
     
-    def int2bytes(i):
-        hex_string = '%x' % i
-        n = len(hex_string)
-        return binascii.unhexlify(hex_string.zfill(n + (n & 1)))
-    
\ No newline at end of file
+    def decode(self, text):
+        """
+        my own binary decoder lol ;p
+        """
+        text = text.replace(" ", "")
+        # to a bytes string
+        text = text.encode('utf-8')
+
+        # into base 2
+        n = int(text, 2)
+
+        # into ascii
+        text = n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()
+
+        return text
\ No newline at end of file
