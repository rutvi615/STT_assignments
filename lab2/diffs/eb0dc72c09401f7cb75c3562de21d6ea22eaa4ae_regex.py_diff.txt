@@ -35,6 +35,33 @@ class Regex(ciphey.iface.Checker[str]):
             )
         }
 
+
+@registry.register
+class RegexList(ciphey.iface.Checker[str]):
+    def getExpectedRuntime(self, text: T) -> float:
+        return 1e-5  # TODO: actually calculate this
+
+    def __init__(self, config: Config):
+        super().__init__(config)
+        self.regexes = []
+        for i in self._params()["resource"]:
+            self.regexes += [re.compile(regex) for regex in config.get_resource(i)]
+        logger.trace(f"There are {len(self.regexes)} regexes")
+
+    def check(self, text: str) -> Optional[str]:
+        for regex in self.regexes:
+            logger.trace(f"Trying regex {regex} on {text}")
+            res = regex.search(text)
+            logger.trace(f"Results: {res}")
+            if res:
+                return f"passed with regex {regex}"
+
     @staticmethod
-    def getName() -> str:
-        return "regex"
+    def getParams() -> Optional[Dict[str, ParamSpec]]:
+        return {
+            "resource": ParamSpec(
+                req=True,
+                desc="A list of regexes that could be matched",
+                list=True,
+            )
+        }
