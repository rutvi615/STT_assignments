@@ -10,7 +10,8 @@ import re
 from typing import Dict, List, Optional
 
 import requests
-from loguru import logger
+import logging
+from rich.logging import RichHandler
 
 from ciphey.iface import Config, Cracker, CrackInfo, CrackResult, ParamSpec, T, registry
 
@@ -27,7 +28,7 @@ def beta(ctext, hashtype):
             "https://hashtoolkit.com/reverse-hash/?hash=", ctext, timeout=5
         ).text
     except requests.exceptions.ReadTimeout as e:
-        logger.debug(f"Beta failed timeout {e}")
+        logging.info(f"Beta failed timeout {e}")
     match = re.search(r'/generate-hash/?text=.*?"', response)
     if match:
         return match.group(1)
@@ -40,7 +41,7 @@ def gamma(ctext, hashtype):
             "https://www.nitrxgen.net/md5db/" + ctext, timeout=5
         ).text
     except requests.exceptions.ReadTimeout as e:
-        logger.debug(f"Gamma failed with {e}")
+        logging.info(f"Gamma failed with {e}")
     if response:
         return response
     else:
@@ -59,7 +60,7 @@ def theta(ctext, hashtype):
             timeout=5,
         ).text
     except requests.exceptions.ReadTimeout as e:
-        logger.debug(f"Gamma failed with {e}")
+        logging.info(f"Gamma failed with {e}")
     if len(response) != 0:
         return response
     else:
@@ -110,7 +111,7 @@ class HashBuster(Cracker[str]):
         )
 
     def attemptCrack(self, ctext: T) -> List[CrackResult]:
-        logger.debug("Starting to crack hashes")
+        logging.info("Starting to crack hashes")
         result = False
 
         candidates = []
@@ -118,35 +119,35 @@ class HashBuster(Cracker[str]):
             for api in md5:
                 r = api(ctext, "md5")
                 if result is not None or r is not None:
-                    logger.trace("MD5 returns True {r}")
+                    logging.debug("MD5 returns True {r}")
                     candidates.append(result, "MD5")
         elif len(ctext) == 40:
             for api in sha1:
                 r = api(ctext, "sha1")
                 if result is not None and r is not None:
-                    logger.trace("sha1 returns true")
+                    logging.debug("sha1 returns true")
                     candidates.append(result, "SHA1")
         elif len(ctext) == 64:
             for api in sha256:
                 r = api(ctext, "sha256")
                 if result is not None and r is not None:
-                    logger.trace("sha256 returns true")
+                    logging.debug("sha256 returns true")
                     candidates.append(result, "SHA256")
         elif len(ctext) == 96:
             for api in sha384:
                 r = api(ctext, "sha384")
                 if result is not None and r is not None:
-                    logger.trace("sha384 returns true")
+                    logging.debug("sha384 returns true")
                     candidates.append(result, "SHA384")
         elif len(ctext) == 128:
             for api in sha512:
                 r = api(ctext, "sha512")
                 if result is not None and r is not None:
-                    logger.trace("sha512 returns true")
+                    logging.debug("sha512 returns true")
                     candidates.append(result, "SHA512")
 
         # TODO what the fuck is this code?
-        logger.trace(f"Hash buster returning {result}")
+        logging.debug(f"Hash buster returning {result}")
         # TODO add to 5.1 make this return multiple possible candidates
         return [CrackResult(value=candidates[0][0], misc_info=candidates[1][1])]
 
