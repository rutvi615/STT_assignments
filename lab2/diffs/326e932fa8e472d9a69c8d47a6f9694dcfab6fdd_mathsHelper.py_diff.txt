@@ -17,7 +17,8 @@ from string import punctuation
 class mathsHelper:
     """Class to provide helper functions for mathematics and other small things"""
     def __init__(self):
-        None
+        self.ETAOIN = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'
+        self.LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     def percentage(self, part, whole):
         """Works with percentages"""
         # yeah uhm sometimes I'm a dummy dum dum and I think dividing by 0 is a good idea
@@ -54,4 +55,76 @@ class mathsHelper:
                 # it's probably a different language so add it to the dict
                 if letter not in punctuation and self.mh.isAscii(letter) :
                     letterFreq[letter] = 1
-        return letterFreq
\ No newline at end of file
+        return letterFreq
+
+    def getLetterCount(self, message):
+        # Returns a dictionary with keys of single letters and values of the
+        # count of how many times they appear in the message parameter:
+        letterCount = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}
+    
+        for letter in message.upper():
+            if letter in self.LETTERS:
+                letterCount[letter] += 1
+    
+        return letterCount
+    
+    
+    def getItemAtIndexZero(self, items):
+        return items[0]
+    
+    
+    def getFrequencyOrder(self, message):
+        # Returns a string of the alphabet letters arranged in order of most
+        # frequently occurring in the message parameter.
+    
+        # First, get a dictionary of each letter and its frequency count:
+        letterToFreq = self.getLetterCount(message)
+    
+        # Second, make a dictionary of each frequency count to each letter(s)
+        # with that frequency:
+        freqToLetter = {}
+        for letter in self.LETTERS:
+            if letterToFreq[letter] not in freqToLetter:
+                freqToLetter[letterToFreq[letter]] = [letter]
+            else:
+                freqToLetter[letterToFreq[letter]].append(letter)
+    
+        # Third, put each list of letters in reverse "self.self.ETAOIN" order, and then
+        # convert it to a string:
+        for freq in freqToLetter:
+            freqToLetter[freq].sort(key=self.ETAOIN.find, reverse=True)
+            freqToLetter[freq] = ''.join(freqToLetter[freq])
+    
+        # Fourth, convert the freqToLetter dictionary to a list of
+        # tuple pairs (key, value), then sort them:
+        freqPairs = list(freqToLetter.items())
+        freqPairs.sort(key=self.getItemAtIndexZero, reverse=True)
+    
+        # Fifth, now that the letters are ordered by frequency, extract all
+        # the letters for the final string:
+        freqOrder = []
+        for freqPair in freqPairs:
+            freqOrder.append(freqPair[1])
+    
+        return ''.join(freqOrder)
+    
+    
+    def englishFreqMatchScore(self, message):
+        # Return the number of matches that the string in the message
+        # parameter has when its letter frequency is compared to English
+        # letter frequency. A "match" is how many of its six most frequent
+        # and six least frequent letters is among the six most frequent and
+        # six least frequent letters for English.
+        freqOrder = self.getFrequencyOrder(message)
+    
+        matchScore = 0
+        # Find how many matches for the six most common letters there are:
+        for commonLetter in self.ETAOIN[:6]:
+            if commonLetter in freqOrder[:6]:
+                matchScore += 1
+        # Find how many matches for the six least common letters there are:
+        for uncommonLetter in self.ETAOIN[-6:]:
+            if uncommonLetter in freqOrder[-6:]:
+                matchScore += 1
+    
+        return matchScore
\ No newline at end of file
