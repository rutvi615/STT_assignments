@@ -321,61 +321,7 @@ def get_name(ctx, param, value):
         return value
 
 
-@click.command()
-@click.option(
-    "-t",
-    "--text",
-    help="The ciphertext you want to decrypt.",
-    type=str,
-    call_back=get_name,
-)
-@click.option(
-    "-g", "--greppable", help="Only output the answer. Useful for grep.", type=bool
-)
-@click.option("-v", "--verbose", count=True, type=int)
-@click.option("-d", "--debug", help="Activates debug mode at info level", type=bool)
-@click.option("-D", "--trace", help="More verbose than Debug mode", type=bool)
-@click.option("-q", "--quiet", help="Suppress warnings", type=bool)
-@click.option(
-    "-a",
-    "--checker",
-    help="Use the default internal checker. Defaults to brandon",
-    type=bool,
-)
-@click.option(
-    "-A",
-    "--checker-path",
-    help="Uses the language checker at the given path",
-    type=click.Path(exists=True),
-)
-@click.option("-w", "--wordlist", help="Uses the given internal wordlist")
-@click.option(
-    "-W",
-    "--wordlist-file",
-    help="Uses the wordlist at the given path",
-    type=click.File("rb"),
-)
-@click.option(
-    "-p", "--param", help="Passes a parameter to the language checker", type=str
-)
-@click.option(
-    "-l", "--list-params", help="List the parameters of the selected module", type=str,
-)
-@click.option(
-    "-O", "--offline", help="Run Ciphey in offline mode (no hash support)", type=bool,
-)
-def arg_parsing(
-    text,
-    greppable,
-    verbose,
-    checker,
-    checker_path,
-    wordlist,
-    wordlist_file,
-    param,
-    list_params,
-    offline,
-) -> Optional[dict]:
+def arg_parsing() -> Optional[dict]:
     """This function parses arguments.
 
         Args:
@@ -384,6 +330,65 @@ def arg_parsing(
             The config to be passed around for the rest of time
     """
 
+    @click.command()
+    @click.option(
+        "-t", "--text", help="The ciphertext you want to decrypt.", type=str,
+    )
+    @click.option(
+        "-g", "--greppable", help="Only output the answer. Useful for grep.", type=bool
+    )
+    @click.option("-v", "--verbose", count=True, type=int)
+    @click.option(
+        "-a",
+        "--checker",
+        help="Use the default internal checker. Defaults to brandon",
+        type=bool,
+    )
+    @click.option(
+        "-A",
+        "--checker-path",
+        help="Uses the language checker at the given path",
+        type=click.Path(exists=True),
+    )
+    @click.option("-w", "--wordlist", help="Uses the given internal wordlist")
+    @click.option(
+        "-W",
+        "--wordlist-file",
+        help="Uses the wordlist at the given path",
+        type=click.File("rb"),
+    )
+    @click.option(
+        "-p", "--param", help="Passes a parameter to the language checker", type=str
+    )
+    @click.option(
+        "-l",
+        "--list-params",
+        help="List the parameters of the selected module",
+        type=str,
+    )
+    @click.option(
+        "-O",
+        "--offline",
+        help="Run Ciphey in offline mode (no hash support)",
+        type=bool,
+    )
+    @click.argument("text_stdin", callback=get_name, required=False)
+    @click.argument("file_stdin", type=click.File("rb"), required=False)
+    def main(
+        text,
+        greppable,
+        verbose,
+        checker,
+        checker_path,
+        wordlist,
+        wordlist_file,
+        param,
+        list_params,
+        offline,
+        text_stdin,
+        file_stdin,
+    ):
+
     # the below text does:
     # if -t is supplied, use that
     # if ciphey is called like:
