@@ -2,7 +2,7 @@ from ciphey import decrypt
 from ciphey.iface import Config
 import pytest
 
-answer_str = "Hello my name is bee and I like dog and apple and tree".lower()
+answer_str = "Hello my name is bee and I like dog and apple and tree"
 
 
 def test_plaintext():
@@ -10,7 +10,7 @@ def test_plaintext():
 
     print(res)
 
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_base64():
@@ -19,9 +19,7 @@ def test_base64():
         "SGVsbG8gbXkgbmFtZSBpcyBiZWUgYW5kIEkgbGlrZSBkb2cgYW5kIGFwcGxlIGFuZCB0cmVl",
     )
 
-    print(res)
-
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_caesar():
@@ -29,7 +27,8 @@ def test_caesar():
         Config().library_default().complete_config(),
         "Uryyb zl anzr vf orr naq V yvxr qbt naq nccyr naq gerr",
     )
-    assert res.lower() == answer_str.lower()
+
+    assert res == answer_str
 
 
 def test_binary_base64_caesar():
@@ -43,7 +42,8 @@ def test_binary_base64_caesar():
         "01101010 01011001 00110011 01101100 01111001 01001001 01000111 00110101 01101000 01100011 01010011 "
         "01000010 01101110 01011010 01011000 01001010 01111001 00001010",
     )
-    assert res.lower() == answer_str.lower()
+
+    assert res == answer_str
 
 
 def test_vigenere():
@@ -51,7 +51,8 @@ def test_vigenere():
         Config().library_default().complete_config(),
         "Rijvs ki rywi gc fco eln M jsoc nse krb ktnvi yxh rbic",
     )
-    assert res.lower() == answer_str.lower()
+
+    assert res == answer_str
 
 
 def test_binary():
@@ -64,7 +65,7 @@ def test_binary():
         "01100101 00100000 01100001 01101110 01100100 00100000 01110100 01110010 01100101 01100101",
     )
 
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_hex():
@@ -74,7 +75,7 @@ def test_hex():
         "74726565",
     )
 
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
 
 
 def test_atbash():
@@ -82,23 +83,7 @@ def test_atbash():
         Config().library_default().complete_config(),
         "Svool nb mznv rh yvv zmw R orpv wlt zmw zkkov zmw givv",
     )
-    assert res.lower() == answer_str.lower()
-
-
-def test_new_line_strip_and_return():
-    # Language Checker should return True by stripping new line
-    # but the new line should be returned to the user as new lines are important
-    res = decrypt(Config().library_default().complete_config(), "pass\n")
-
-    assert res.lower() == "pass\n"
-
-
-def test_new_line_at_start_returns():
-    # Language Checker should return True by stripping new line
-    # but the new line should be returned to the user as new lines are important
-    res = decrypt(Config().library_default().complete_config(), "\npass\n")
-
-    assert res.lower() == "\npass\n"
+    assert res == answer_str
 
 
 def test_galactic():
@@ -123,5 +108,21 @@ def XandY():
         Config().library_default().complete_config(),
         "xDDxDxxx xDDxxDxD xDDxDDxx xDDxDDxx xDDxDDDD xxDxxxxx xDDxDDxD xDDDDxxD xxDxxxxx xDDxDDDx xDDxxxxD xDDxDDxD xDDxxDxD xxDxxxxx xDDxDxxD xDDDxxDD xxDxxxxx xDDxxxDx xDDxxDxD xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDxxDxxD xxDxxxxx xDDxDDxx xDDxDxxD xDDxDxDD xDDxxDxD xxDxxxxx xDDxxDxx xDDxDDDD xDDxxDDD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDxxxxD xDDDxxxx xDDDxxxx xDDxDDxx xDDxxDxD xxDxxxxx xDDxxxxD xDDxDDDx xDDxxDxx xxDxxxxx xDDDxDxx xDDDxxDx xDDxxDxD xDDxxDxD",
     )
-    assert res.lower() == answer_str.lower()
+    assert res == answer_str
+
+
+def test_new_line_strip_and_return():
+    # Language Checker should return True by stripping new line
+    # but the new line should be returned to the user as new lines are important
+    res = decrypt(Config().library_default().complete_config(), "pass\n")
+
+    assert res.lower() == "pass\n"
+
+
+def test_new_line_at_start_returns():
+    # Language Checker should return True by stripping new line
+    # but the new line should be returned to the user as new lines are important
+    res = decrypt(Config().library_default().complete_config(), "\npass\n")
+
+    assert res.lower() == "\npass\n"
 
