@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 171,
+   "execution_count": 46,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -16,6 +16,9 @@
     "from tensorflow.keras.callbacks import TensorBoard\n",
     "import time\n",
     "import numpy\n",
+    "\n",
+    "import tensorboard\n",
+    "\n",
     "CATEGORIES = [\"sha1\", \"md5\", \"sha256\", \"sha512\", \"caeser\", \"plaintext\"]\n",
     "CATEGORIES = [1, 2, 3, 4, 5, 6]\n",
     "\n",
@@ -30,24 +33,15 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 172,
+   "execution_count": 47,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[['hello my name is brandon', 'iad jadiw aikjawi', '17', '7', '[4, 0, 0, 2, 0, 0, 0, 0, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2]', '0.0001298328198294165', '4'], [\"harry potter and the sorcerer's stone \", '8dc64800cc533373aea0a6b60948141b9d63f047bd983d692de30035c47d13abce4914d7e642ae1c01fedd1e67751bca5fff5bd15222dd1da01c7fd02d567707', '128', '16', '[7, 6, 8, 15, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 11, 7, 9, 10, 5, 11, 6]', '1.7925661639082316e-23', '3']]\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import csv\n",
     "\n",
     "with open('output.csv', 'r') as f:\n",
     "  reader = csv.reader(f)\n",
-    "  your_list = list(reader)\n",
-    "print(your_list[0:2])"
+    "  your_list = list(reader)\n"
    ]
   },
   {
@@ -59,75 +53,179 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 173,
+   "execution_count": 48,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "(190715, 6)\n",
-      "(190715,)\n"
+      "(3,)\n",
+      "array([1.7000000e+01, 7.0000000e+00, 1.2983282e-04])\n",
+      "[1.7000000e+01 7.0000000e+00 1.2983282e-04]\n",
+      "[17.0, 7.0, 0.0001298328198294165]\n"
      ]
     }
    ],
    "source": [
     "x = []\n",
     "y = []\n",
+    "counter = 0.0\n",
+    "totals = 0.00\n",
     "for item in your_list:\n",
-    "    y.append(item[-1])\n",
+    "    counter = counter + 1\n",
+    "    y.append([item[-1]])\n",
+    "    # delete y from it\n",
     "    del item[-1]\n",
+    "    # delete the plaintext\n",
+    "    del item[0]\n",
+    "    # delete the encrypted text\n",
+    "    del item[0]\n",
+    "    # delete the array (this was causing me problems)\n",
+    "    del item[2]\n",
+    "    item[0] = float(item[0])\n",
+    "    item[1] = float(item[1])\n",
+    "    try:\n",
+    "        item[2] = float(item[2])\n",
+    "        totals = totals + item[2]\n",
+    "    except ValueError as e:\n",
+    "        item[2] = float(totals / counter)\n",
+    "        \n",
     "    x.append(item)\n",
-    "x = numpy.asarray(x)\n",
-    "y = numpy.asarray(y)\n",
-    "print(x.shape)\n",
-    "print(y.shape)"
+    "import pprint\n",
+    "x_train = numpy.asarray(x)\n",
+    "y_train = numpy.asarray(y)\n",
+    "print(x_train[0].shape)\n",
+    "pprint.pprint(x_train[0])\n",
+    "print(x_train[0])\n",
+    "print(list(x_train[0]))\n",
+    "\n",
+    "DONOTCHANGE = x[0]\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 186,
-   "metadata": {},
+   "execution_count": 49,
+   "metadata": {
+    "scrolled": true
+   },
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "(190715, 6)\n",
-      "(190715,)\n"
+      "Train on 171643 samples, validate on 19072 samples\n",
+      "171643/171643 [==============================] - 95s 556us/sample - loss: 0.4819 - acc: 0.7962 - val_loss: 0.3457 - val_acc: 0.8400\n"
      ]
     },
     {
-     "ename": "ValueError",
-     "evalue": "could not convert string to float: '[3, 1, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 2, 1, 3, 3, 1, 1, 1]'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
-      "\u001b[1;32m<ipython-input-186-b16b92258eb6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     23\u001b[0m               metrics=['accuracy'])\n\u001b[0;32m     24\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 25\u001b[1;33m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m32\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# train the model\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     26\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[0;32m    778\u001b[0m           \u001b[0mvalidation_steps\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mvalidation_steps\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    779\u001b[0m           \u001b[0mvalidation_freq\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mvalidation_freq\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 780\u001b[1;33m           steps_name='steps_per_epoch')\n\u001b[0m\u001b[0;32m    781\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    782\u001b[0m   def evaluate(self,\n",
-      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training_arrays.py\u001b[0m in \u001b[0;36mmodel_iteration\u001b[1;34m(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq, mode, validation_in_fit, prepared_feed_values_from_dataset, steps_name, **kwargs)\u001b[0m\n\u001b[0;32m    361\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    362\u001b[0m         \u001b[1;31m# Get outputs.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 363\u001b[1;33m         \u001b[0mbatch_outs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    364\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    365\u001b[0m           \u001b[0mbatch_outs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\backend.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, inputs)\u001b[0m\n\u001b[0;32m   3275\u001b[0m         \u001b[0mtensor_type\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdtypes_module\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mas_dtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtensor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3276\u001b[0m         array_vals.append(np.asarray(value,\n\u001b[1;32m-> 3277\u001b[1;33m                                      dtype=tensor_type.as_numpy_dtype))\n\u001b[0m\u001b[0;32m   3278\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3279\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfeed_dict\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\core\\numeric.py\u001b[0m in \u001b[0;36masarray\u001b[1;34m(a, dtype, order)\u001b[0m\n\u001b[0;32m    536\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    537\u001b[0m     \"\"\"\n\u001b[1;32m--> 538\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    539\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    540\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: '[3, 1, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 2, 1, 3, 3, 1, 1, 1]'"
-     ]
+     "data": {
+      "text/plain": [
+       "<tensorflow.python.keras.callbacks.History at 0x271b56e8470>"
+      ]
+     },
+     "execution_count": 49,
+     "metadata": {},
+     "output_type": "execute_result"
     }
    ],
    "source": [
     "import tensorflow as tf\n",
     "from tensorflow.keras.models import Sequential\n",
+    "from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D, Reshape\n",
+    "from keras import backend as K\n",
+    "\n",
+    "\n",
+    "model = Sequential()\n",
+    "model.add(Dense(128, activation='relu', input_shape=(3,)))\n",
+    "model.add(Flatten())\n",
+    "model.add(Dense(128, activation='relu'))\n",
+    "model.add(Flatten())\n",
+    "model.add(Dense(6, activation='softmax'))\n",
+    "\n",
+    "\"\"\"\"model = Sequential([Dense(128, activation='relu', input_shape=(3,)),\n",
+    "                    Flatten(),\n",
+    "                    Dense(128, activation='relu'),\n",
+    "                    Dense(6, activation='softmax'),])\"\"\"\n",
+    "\n",
+    "model.compile(optimizer='adam',\n",
+    "              loss='sparse_categorical_crossentropy',  \n",
+    "              metrics=['accuracy'])\n",
+    "model.fit(x_train, y_train, validation_split=0.1, epochs = 1, batch_size = 10)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 53,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "new = []\n",
+    "new.append([17.0, 7.0, 0.0001298328198294165])\n",
+    "new = numpy.asarray(new)\n",
+    "#print(new.shape)\n",
+    "y = model.predict(new)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 64,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "['4']\n",
+      "[6.900671700726946e-11, 1.8297836504643783e-05, 1.193628935925936e-13, 2.516196886265254e-13, 0.6582226753234863, 0.34175899624824524]\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "4"
+      ]
+     },
+     "execution_count": 64,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "print(y_train[0])\n",
+    "numpy.set_printoptions(formatter={'float_kind':'{:f}'.format})\n",
+    "print(y.tolist()[0])\n",
+    "numpy.argmax(y.tolist()[0])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "\"\"\"import tensorflow as tf\n",
+    "from tensorflow.keras.models import Sequential\n",
     "from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\n",
     "from keras import backend as K\n",
     "#K.set_image_dim_ordering('th')\n",
     "\n",
     "model = Sequential()\n",
+    "print(y_train.shape)\n",
+    "print(x_train.shape)\n",
+    "x_train = x_train.reshape((1, 190715, 3, 1))\n",
+    "y_train = y_train.reshape((1, 190715, 3))\n",
+    "y_train = y_train[0]\n",
     "\n",
-    "#x_train = x.reshape((1, 190715, 6, 1))\n",
-    "#y_train = y.reshape((1, 190715))\n",
-    "print(x.shape)\n",
-    "print(y.shape)\n",
     "\n",
-    "model.add(Conv2D(64, (3, 3), input_shape = (190715, 6, 1)))\n",
+    "model.add(Conv2D(64, (3, 3), input_shape = (190715, 3, 1)))\n",
     "\n",
     "model.add(tf.keras.layers.GlobalAveragePooling2D()) # change from flatten to GlobalAveragePooling2D()\n",
     "model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation\n",
@@ -138,7 +236,9 @@
     "              loss='sparse_categorical_crossentropy',  \n",
     "              metrics=['accuracy'])\n",
     "\n",
-    "model.fit(x_train, y_train, epochs=1, batch_size = 3)  # train the model\n",
+    "print(y_train)\n",
+    "\n",
+    "model.fit(x_train, y_train, epochs=1, batch_size = 25, validation_split=0.3)  # train the model\"\"\"\n",
     "\n"
    ]
   },
