@@ -8,7 +8,8 @@ from ciphey.iface import registry
 @registry.register
 class MorseCode(ciphey.iface.Decoder[str, str]):
     # A priority list for char/word boundaries
-    BOUNDARIES = {" ": 1, "/": 2, "\n": 3, ".": -1, "-": -1}
+    BOUNDARIES = {" ": 1, "/": 2, "\n": 3}
+    PURGE = {ord(c): None for c in BOUNDARIES.keys()}
     MAX_PRIORITY = 3
     ALLOWED = {".", "-", " ", "/", "\n"}
     MORSE_CODE_DICT: Dict[str, str]
@@ -19,10 +20,6 @@ class MorseCode(ciphey.iface.Decoder[str, str]):
         return "morse"
 
     def decode(self, text: str) -> Optional[str]:
-        # Trim end
-        while text[-1] in self.BOUNDARIES:
-            text = text[:-1]
-
         logger.trace("Attempting morse code")
 
         char_boundary = word_boundary = None
@@ -33,6 +30,8 @@ class MorseCode(ciphey.iface.Decoder[str, str]):
         for i in text:
             i_priority = self.BOUNDARIES.get(i)
             if i_priority is None:
+                if i in self.ALLOWED:
+                  continue
                 logger.trace(f"Non-morse char '{i}' found")
                 return None
 
@@ -51,7 +50,7 @@ class MorseCode(ciphey.iface.Decoder[str, str]):
             char_boundary = i
 
         logger.trace(
-            f"'Char boundary is '{char_boundary}', and word boundary is '{word_boundary}'"
+            f"Char boundary is unicode {ord(char_boundary)}, and word boundary is unicode {ord(word_boundary) if word_boundary is not None else None}"
         )
 
         result = ""
@@ -59,10 +58,13 @@ class MorseCode(ciphey.iface.Decoder[str, str]):
         for word in text.split(word_boundary) if word_boundary else [text]:
             logger.trace(f"Attempting to decode word {word}")
             for char in word.split(char_boundary):
+                char = char.translate(self.PURGE)
+                if len(char) == 0:
+                  continue
                 try:
                     m = self.MORSE_CODE_DICT_INV[char]
                 except KeyError:
-                    logger.trace(f"Invalid codeword '{word}' found")
+                    logger.trace(f"Invalid codeword '{char}' found")
                     return None
                 result = result + m
             # after every word add a space
