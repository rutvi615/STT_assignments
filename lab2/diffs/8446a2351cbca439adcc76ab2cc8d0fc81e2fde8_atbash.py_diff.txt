@@ -8,19 +8,19 @@ from ciphey.iface import Config, ParamSpec, T, U, Decoder, registry
 @registry.register
 class Atbash(Decoder[str, str]):
     def decode(self, ctext: T) -> Optional[U]:
-        '''
+        """
         Takes an encoded string and attempts to decode it according to the Atbash cipher.
 
             The Atbash cipher is a very simple substitution cipher without a key.
             It operates by replacing every letter in the input by its 'counterpoint'
             in the alphabet. Example: A -> Z, B -> Y, ... , M -> N and vice versa.
-        '''
-        
-        dec = ''
-        letters = list('abcdefghijklmnopqrstuvwxyz')
-        atbash_dict = {letters[i]:letters[::-1][i] for i in range(26)}
+        """
 
-        # Ensure that ciphertext is a string 
+        dec = ""
+        letters = list("abcdefghijklmnopqrstuvwxyz")
+        atbash_dict = {letters[i]: letters[::-1][i] for i in range(26)}
+
+        # Ensure that ciphertext is a string
         if type(ctext) == str:
             # Normalize the string to all-lowercase letters
             ctext = ctext.lower()
@@ -32,7 +32,7 @@ class Atbash(Decoder[str, str]):
                 # Match every letter of the input to its atbash counterpoint
                 dec += atbash_dict[l]
             else:
-                # If the current character is not in the defined alphabet, 
+                # If the current character is not in the defined alphabet,
                 # just accept it as-is (useful for numbers, punctuation,...)
                 dec += l
         return dec
@@ -51,4 +51,4 @@ class Atbash(Decoder[str, str]):
 
     @staticmethod
     def getTarget() -> str:
-        return 'atbash'
+        return "atbash"
