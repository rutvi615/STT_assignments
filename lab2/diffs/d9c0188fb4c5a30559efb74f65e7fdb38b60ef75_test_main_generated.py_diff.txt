@@ -1,793 +1,71 @@
 from ciphey.__main__ import main, make_default_config
-def test_Hex_pGzEQuaq():
-    # {'PlainText Sentences': 'We have the right to come to this place.', 'Encrypted Texts': {'PlainText': 'We have the right to come to this place.', 'EncryptedText': '576520686176652074686520726967687420746f20636f6d6520746f207468697320706c6163652e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''576520686176652074686520726967687420746f20636f6d6520746f207468697320706c6163652e''')
+def test_MorseCode_zqsiszMG():
+    # {'PlainText Sentences': 'A confusing and convoluted question almost resulted in the breakup of the country. One thing agreed on was we do not need new taxes on business done on the Internet. We will look at the provisions concerning the principles that should guide ministers, senior officials, and chairs of commissions and public and parapublic corporations. The government is still sitting in the House of Commons debating what to do next. I think this effort to protect the officers of the board in good measure is a result of the actions of my colleague from Portage-Lisgar in his efforts to bring some accountability and transparency to the board. What is the Secretary of State for Science, Research and Technology doing to address the concerns raised by participants in Ottawa at the congress of the social sciences and humanities that social and cultural skills are also necessary in a knowledge based economy?', 'Encrypted Texts': {'PlainText': 'A confusing and convoluted question almost resulted in the breakup of the country. One thing agreed on was we do not need new taxes on business done on the Internet. We will look at the provisions concerning the principles that should guide ministers, senior officials, and chairs of commissions and public and parapublic corporations. The government is still sitting in the House of Commons debating what to do next. I think this effort to protect the officers of the board in good measure is a result of the actions of my colleague from Portage-Lisgar in his efforts to bring some accountability and transparency to the board. What is the Secretary of State for Science, Research and Technology doing to address the concerns raised by participants in Ottawa at the congress of the social sciences and humanities that social and cultural skills are also necessary in a knowledge based economy?', 'EncryptedText': '.- / -.-. --- -. ..-. ..- ... .. -. --. / .- -. -.. / -.-. --- -. ...- --- .-.. ..- - . -.. / --.- ..- . ... - .. --- -. / .- .-.. -- --- ... - / .-. . ... ..- .-.. - . -.. / .. -. / - .... . / -... .-. . .- -.- ..- .--. / --- ..-. / - .... . / -.-. --- ..- -. - .-. -.-- .-.-.- / --- -. . / - .... .. -. --. / .- --. .-. . . -.. / --- -. / .-- .- ... / .-- . / -.. --- / -. --- - / -. . . -.. / -. . .-- / - .- -..- . ... / --- -. / -... ..- ... .. -. . ... ... / -.. --- -. . / --- -. / - .... . / .. -. - . .-. -. . - .-.-.- / .-- . / .-- .. .-.. .-.. / .-.. --- --- -.- / .- - / - .... . / .--. .-. --- ...- .. ... .. --- -. ... / -.-. --- -. -.-. . .-. -. .. -. --. / - .... . / .--. .-. .. -. -.-. .. .--. .-.. . ... / - .... .- - / ... .... --- ..- .-.. -.. / --. ..- .. -.. . / -- .. -. .. ... - . .-. ... --..-- / ... . -. .. --- .-. / --- ..-. ..-. .. -.-. .. .- .-.. ... --..-- / .- -. -.. / -.-. .... .- .. .-. ... / --- ..-. / -.-. --- -- -- .. ... ... .. --- -. ... / .- -. -.. / .--. ..- -... .-.. .. -.-. / .- -. -.. / .--. .- .-. .- .--. ..- -... .-.. .. -.-. / -.-. --- .-. .--. --- .-. .- - .. --- -. ... .-.-.- / - .... . / --. --- ...- . .-. -. -- . -. - / .. ... / ... - .. .-.. .-.. / ... .. - - .. -. --. / .. -. / - .... . / .... --- ..- ... . / --- ..-. / -.-. --- -- -- --- -. ... / -.. . -... .- - .. -. --. / .-- .... .- - / - --- / -.. --- / -. . -..- - .-.-.- / .. / - .... .. -. -.- / - .... .. ... / . ..-. ..-. --- .-. - / - --- / .--. .-. --- - . -.-. - / - .... . / --- ..-. ..-. .. -.-. . .-. ... / --- ..-. / - .... . / -... --- .- .-. -.. / .. -. / --. --- --- -.. / -- . .- ... ..- .-. . / .. ... / .- / .-. . ... ..- .-.. - / --- ..-. / - .... . / .- -.-. - .. --- -. ... / --- ..-. / -- -.-- / -.-. --- .-.. .-.. . .- --. ..- . / ..-. .-. --- -- / .--. --- .-. - .- --. . -....- .-.. .. ... --. .- .-. / .. -. / .... .. ... / . ..-. ..-. --- .-. - ... / - --- / -... .-. .. -. --. / ... --- -- . / .- -.-. -.-. --- ..- -. - .- -... .. .-.. .. - -.-- / .- -. -.. / - .-. .- -. ... .--. .- .-. . -. -.-. -.-- / - --- / - .... . / -... --- .- .-. -.. .-.-.- / .-- .... .- - / .. ... / - .... . / ... . -.-. .-. . - .- .-. -.-- / --- ..-. / ... - .- - . / ..-. --- .-. / ... -.-. .. . -. -.-. . --..-- / .-. . ... . .- .-. -.-. .... / .- -. -.. / - . -.-. .... -. --- .-.. --- --. -.-- / -.. --- .. -. --. / - --- / .- -.. -.. .-. . ... ... / - .... . / -.-. --- -. -.-. . .-. -. ... / .-. .- .. ... . -.. / -... -.-- / .--. .- .-. - .. -.-. .. .--. .- -. - ... / .. -. / --- - - .- .-- .- / .- - / - .... . / -.-. --- -. --. .-. . ... ... / --- ..-. / - .... . / ... --- -.-. .. .- .-.. / ... -.-. .. . -. -.-. . ... / .- -. -.. / .... ..- -- .- -. .. - .. . ... / - .... .- - / ... --- -.-. .. .- .-.. / .- -. -.. / -.-. ..- .-.. - ..- .-. .- .-.. / ... -.- .. .-.. .-.. ... / .- .-. . / .- .-.. ... --- / -. . -.-. . ... ... .- .-. -.-- / .. -. / .- / -.- -. --- .-- .-.. . -.. --. . / -... .- ... . -.. / . -.-. --- -. --- -- -.-- ..--..', 'CipherUsed': 'MorseCode'}}
+    cfg = make_default_config('''.- / -.-. --- -. ..-. ..- ... .. -. --. / .- -. -.. / -.-. --- -. ...- --- .-.. ..- - . -.. / --.- ..- . ... - .. --- -. / .- .-.. -- --- ... - / .-. . ... ..- .-.. - . -.. / .. -. / - .... . / -... .-. . .- -.- ..- .--. / --- ..-. / - .... . / -.-. --- ..- -. - .-. -.-- .-.-.- / --- -. . / - .... .. -. --. / .- --. .-. . . -.. / --- -. / .-- .- ... / .-- . / -.. --- / -. --- - / -. . . -.. / -. . .-- / - .- -..- . ... / --- -. / -... ..- ... .. -. . ... ... / -.. --- -. . / --- -. / - .... . / .. -. - . .-. -. . - .-.-.- / .-- . / .-- .. .-.. .-.. / .-.. --- --- -.- / .- - / - .... . / .--. .-. --- ...- .. ... .. --- -. ... / -.-. --- -. -.-. . .-. -. .. -. --. / - .... . / .--. .-. .. -. -.-. .. .--. .-.. . ... / - .... .- - / ... .... --- ..- .-.. -.. / --. ..- .. -.. . / -- .. -. .. ... - . .-. ... --..-- / ... . -. .. --- .-. / --- ..-. ..-. .. -.-. .. .- .-.. ... --..-- / .- -. -.. / -.-. .... .- .. .-. ... / --- ..-. / -.-. --- -- -- .. ... ... .. --- -. ... / .- -. -.. / .--. ..- -... .-.. .. -.-. / .- -. -.. / .--. .- .-. .- .--. ..- -... .-.. .. -.-. / -.-. --- .-. .--. --- .-. .- - .. --- -. ... .-.-.- / - .... . / --. --- ...- . .-. -. -- . -. - / .. ... / ... - .. .-.. .-.. / ... .. - - .. -. --. / .. -. / - .... . / .... --- ..- ... . / --- ..-. / -.-. --- -- -- --- -. ... / -.. . -... .- - .. -. --. / .-- .... .- - / - --- / -.. --- / -. . -..- - .-.-.- / .. / - .... .. -. -.- / - .... .. ... / . ..-. ..-. --- .-. - / - --- / .--. .-. --- - . -.-. - / - .... . / --- ..-. ..-. .. -.-. . .-. ... / --- ..-. / - .... . / -... --- .- .-. -.. / .. -. / --. --- --- -.. / -- . .- ... ..- .-. . / .. ... / .- / .-. . ... ..- .-.. - / --- ..-. / - .... . / .- -.-. - .. --- -. ... / --- ..-. / -- -.-- / -.-. --- .-.. .-.. . .- --. ..- . / ..-. .-. --- -- / .--. --- .-. - .- --. . -....- .-.. .. ... --. .- .-. / .. -. / .... .. ... / . ..-. ..-. --- .-. - ... / - --- / -... .-. .. -. --. / ... --- -- . / .- -.-. -.-. --- ..- -. - .- -... .. .-.. .. - -.-- / .- -. -.. / - .-. .- -. ... .--. .- .-. . -. -.-. -.-- / - --- / - .... . / -... --- .- .-. -.. .-.-.- / .-- .... .- - / .. ... / - .... . / ... . -.-. .-. . - .- .-. -.-- / --- ..-. / ... - .- - . / ..-. --- .-. / ... -.-. .. . -. -.-. . --..-- / .-. . ... . .- .-. -.-. .... / .- -. -.. / - . -.-. .... -. --- .-.. --- --. -.-- / -.. --- .. -. --. / - --- / .- -.. -.. .-. . ... ... / - .... . / -.-. --- -. -.-. . .-. -. ... / .-. .- .. ... . -.. / -... -.-- / .--. .- .-. - .. -.-. .. .--. .- -. - ... / .. -. / --- - - .- .-- .- / .- - / - .... . / -.-. --- -. --. .-. . ... ... / --- ..-. / - .... . / ... --- -.-. .. .- .-.. / ... -.-. .. . -. -.-. . ... / .- -. -.. / .... ..- -- .- -. .. - .. . ... / - .... .- - / ... --- -.-. .. .- .-.. / .- -. -.. / -.-. ..- .-.. - ..- .-. .- .-.. / ... -.- .. .-.. .-.. ... / .- .-. . / .- .-.. ... --- / -. . -.-. . ... ... .- .-. -.-- / .. -. / .- / -.- -. --- .-- .-.. . -.. --. . / -... .- ... . -.. / . -.-. --- -. --- -- -.-- ..--..''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Hex_iWodNyIm():
-    # {'PlainText Sentences': 'I have never been in a Parliament that has not been lively.', 'Encrypted Texts': {'PlainText': 'I have never been in a Parliament that has not been lively.', 'EncryptedText': '492068617665206e65766572206265656e20696e2061205061726c69616d656e74207468617420686173206e6f74206265656e206c6976656c792e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''492068617665206e65766572206265656e20696e2061205061726c69616d656e74207468617420686173206e6f74206265656e206c6976656c792e''')
+def test_Base16_ZJqqhmtD():
+    # {'PlainText Sentences': "He was representative of the fact that the only meaningful part of his sentence is the period of parole ineligibility. (2) The committee designated or established by Parliament for the purpose of subsection (1) shall, as soon as practicable, undertake a comprehensive review of the provisions and operation of this Act and shall, within two years after the review is undertaken, submit a report to Parliament.''  On the sheet that the hon. The Deputy Speaker:\nIs there unanimous consent of the House to proceed in this fashion? Mr. Tony Valeri (Parliamentary Secretary to Minister of Finance, Lib. However, the minister will realize that I was responding to a question from the Leader of the Opposition. Cutbacks to the coast guard, search and rescue capacity, the automation of lighthouses were the forerunner and backdrop to the port privatization. Mr. Bill Gilmour (Nanaimo-Alberni, Ref. This would be a power grab, a full-fledged attack on provincial jurisdiction over economic matters. The Acting Speaker (Mr. McClelland):\nIn that case the Deputy Prime Minister has a minute and a half left. Right Hon. If the hon. That is not good. The auditor general has rightly criticized this in public. It does not serve well either side of the House. These people taught me that. We only have to look at the situation with the EI cutbacks which are forcing more and more women into a range of more and more limited options, if they can even claim EI. It is not very often in this House of Commons that we get unanimity from the opposition benches.", 'Encrypted Texts': {'PlainText': "He was representative of the fact that the only meaningful part of his sentence is the period of parole ineligibility. (2) The committee designated or established by Parliament for the purpose of subsection (1) shall, as soon as practicable, undertake a comprehensive review of the provisions and operation of this Act and shall, within two years after the review is undertaken, submit a report to Parliament.''  On the sheet that the hon. The Deputy Speaker:\nIs there unanimous consent of the House to proceed in this fashion? Mr. Tony Valeri (Parliamentary Secretary to Minister of Finance, Lib. However, the minister will realize that I was responding to a question from the Leader of the Opposition. Cutbacks to the coast guard, search and rescue capacity, the automation of lighthouses were the forerunner and backdrop to the port privatization. Mr. Bill Gilmour (Nanaimo-Alberni, Ref. This would be a power grab, a full-fledged attack on provincial jurisdiction over economic matters. The Acting Speaker (Mr. McClelland):\nIn that case the Deputy Prime Minister has a minute and a half left. Right Hon. If the hon. That is not good. The auditor general has rightly criticized this in public. It does not serve well either side of the House. These people taught me that. We only have to look at the situation with the EI cutbacks which are forcing more and more women into a range of more and more limited options, if they can even claim EI. It is not very often in this House of Commons that we get unanimity from the opposition benches.", 'EncryptedTextipherUsed': 'Base16'}}
+    cfg = make_default_config
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Ascii_qGeHCnAX():
-    # {'PlainText Sentences': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'Encrypted Texts': {'PlainText': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'EncryptedText': '65 110 100 32 116 104 101 32 72 111 117 115 101 32 98 101 105 110 103 32 114 101 116 117 114 110 101 100 32 116 111 32 116 104 101 32 67 111 109 109 111 110 115 32 99 104 97 109 98 101 114 58 32 10 84 104 101 32 83 112 101 97 107 101 114 58 10 79 114 100 101 114 44 32 112 108 101 97 115 101 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''65 110 100 32 116 104 101 32 72 111 117 115 101 32 98 101 105 110 103 32 114 101 116 117 114 110 101 100 32 116 111 32 116 104 101 32 67 111 109 109 111 110 115 32 99 104 97 109 98 101 114 58 32 10 84 104 101 32 83 112 101 97 107 101 114 58 10 79 114 100 101 114 44 32 112 108 101 97 115 101 46''')
+def test_Ascii_wgAocjYo():
+    # {'PlainText Sentences': 'This, he argued, constituted a contempt of Parliament. Another of the founding peoples were certainly the English who came in mainly via the 13 colonies and later settled the interior of Canada. Right now, the government is pocketing between $6 and $7 billion, having reduced eligibility for these programs and worked it so that now people pay premiums from the first hour of work. Through its resource centre, public education initiatives and support groups, the Alzheimer Society of Cambridge plays an important role in the community. It also provides for the Minister of Industry to block access to certain types of materials when he or she becomes aware of them. Even on our side there are some problems. We have seen some moves in committees over the last week or so where chairmen who have confronted and challenged the government have been moved aside. Will the Prime Minister undertake to keep his promises and move quickly to free up funds so that the industries and communities in the Jonquière region can improve the quality of the air we breathe? It will have a neutral chair and vice-chairs, and this is the critical part, it will have equal employer and employee representation. Bear in mind that although air crashes are spectacular, the TSB also must put together the puzzles of fragmented trains, ships and pipelines. Is this the best the Liberals could come up with? What have the bureaucracy and the government being doing for the last two years? ):\nMr. Speaker, here are some other inconsistencies.', 'Encrypted Texts': {'PlainText': 'This, he argued, constituted a contempt of Parliament. Another of the founding peoples were certainly the English who came in mainly via the 13 colonies and later settled the interior of Canada. Right now, the government is pocketing between $6 and $7 billion, having reduced eligibility for these programs and worked it so that now people pay premiums from the first hour of work. Through its resource centre, public education initiatives and support groups, the Alzheimer Society of Cambridge plays an important role in the community. It also provides for the Minister of Industry to block access to certain types of materials when he or she becomes aware of them. Even on our side there are some problems. We have seen some moves in committees over the last week or so where chairmen who have confronted and challenged the government have been moved aside. Will the Prime Minister undertake to keep his promises and move quickly to free up funds so that the industries and communities in the Jonquière region can improve the quality of the air we breathe? It will have a neutral chair and vice-chairs, and this is the critical part, it will have equal employer and employee representation. Bear in mind that although air crashes are spectacular, the TSB also must put together the puzzles of fragmented trains, ships and pipelines. Is this the best the Liberals could come up with? What have the bureaucracy and the government being doing for the last two years? ):\nMr. Speaker, here are some other inconsistencies.', 'EncryptedText': '84 104 105 115 44 32 104 101 32 97 114 103 117 101 100 44 32 99 111 110 115 116 105 116 117 116 101 100 32 97 32 99 111 110 116 101 109 112 116 32 111 102 32 80 97 114 108 105 97 109 101 110 116 46 32 65 110 111 116 104 101 114 32 111 102 32 116 104 101 32 102 111 117 110 100 105 110 103 32 112 101 111 112 108 101 115 32 119 101 114 101 32 99 101 114 116 97 105 110 108 121 32 116 104 101 32 69 110 103 108 105 115 104 32 119 104 111 32 99 97 109 101 32 105 110 32 109 97 105 110 108 121 32 118 105 97 32 116 104 101 32 49 51 32 99 111 108 111 110 105 101 115 32 97 110 100 32 108 97 116 101 114 32 115 101 116 116 108 101 100 32 116 104 101 32 105 110 116 101 114 105 111 114 32 111 102 32 67 97 110 97 100 97 46 32 82 105 103 104 116 32 110 111 119 44 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 105 115 32 112 111 99 107 101 116 105 110 103 32 98 101 116 119 101 101 110 32 36 54 32 97 110 100 32 36 55 32 98 105 108 108 105 111 110 44 32 104 97 118 105 110 103 32 114 101 100 117 99 101 100 32 101 108 105 103 105 98 105 108 105 116 121 32 102 111 114 32 116 104 101 115 101 32 112 114 111 103 114 97 109 115 32 97 110 100 32 119 111 114 107 101 100 32 105 116 32 115 111 32 116 104 97 116 32 110 111 119 32 112 101 111 112 108 101 32 112 97 121 32 112 114 101 109 105 117 109 115 32 102 114 111 109 32 116 104 101 32 102 105 114 115 116 32 104 111 117 114 32 111 102 32 119 111 114 107 46 32 84 104 114 111 117 103 104 32 105 116 115 32 114 101 115 111 117 114 99 101 32 99 101 110 116 114 101 44 32 112 117 98 108 105 99 32 101 100 117 99 97 116 105 111 110 32 105 110 105 116 105 97 116 105 118 101 115 32 97 110 100 32 115 117 112 112 111 114 116 32 103 114 111 117 112 115 44 32 116 104 101 32 65 108 122 104 101 105 109 101 114 32 83 111 99 105 101 116 121 32 111 102 32 67 97 109 98 114 105 100 103 101 32 112 108 97 121 115 32 97 110 32 105 109 112 111 114 116 97 110 116 32 114 111 108 101 32 105 110 32 116 104 101 32 99 111 109 109 117 110 105 116 121 46 32 73 116 32 97 108 115 111 32 112 114 111 118 105 100 101 115 32 102 111 114 32 116 104 101 32 77 105 110 105 115 116 101 114 32 111 102 32 73 110 100 117 115 116 114 121 32 116 111 32 98 108 111 99 107 32 97 99 99 101 115 115 32 116 111 32 99 101 114 116 97 105 110 32 116 121 112 101 115 32 111 102 32 109 97 116 101 114 105 97 108 115 32 119 104 101 110 32 104 101 32 111 114 32 115 104 101 32 98 101 99 111 109 101 115 32 97 119 97 114 101 32 111 102 32 116 104 101 109 46 32 69 118 101 110 32 111 110 32 111 117 114 32 115 105 100 101 32 116 104 101 114 101 32 97 114 101 32 115 111 109 101 32 112 114 111 98 108 101 109 115 46 32 87 101 32 104 97 118 101 32 115 101 101 110 32 115 111 109 101 32 109 111 118 101 115 32 105 110 32 99 111 109 109 105 116 116 101 101 115 32 111 118 101 114 32 116 104 101 32 108 97 115 116 32 119 101 101 107 32 111 114 32 115 111 32 119 104 101 114 101 32 99 104 97 105 114 109 101 110 32 119 104 111 32 104 97 118 101 32 99 111 110 102 114 111 110 116 101 100 32 97 110 100 32 99 104 97 108 108 101 110 103 101 100 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 104 97 118 101 32 98 101 101 110 32 109 111 118 101 100 32 97 115 105 100 101 46 32 87 105 108 108 32 116 104 101 32 80 114 105 109 101 32 77 105 110 105 115 116 101 114 32 117 110 100 101 114 116 97 107 101 32 116 111 32 107 101 101 112 32 104 105 115 32 112 114 111 109 105 115 101 115 32 97 110 100 32 109 111 118 101 32 113 117 105 99 107 108 121 32 116 111 32 102 114 101 101 32 117 112 32 102 117 110 100 115 32 115 111 32 116 104 97 116 32 116 104 101 32 105 110 100 117 115 116 114 105 101 115 32 97 110 100 32 99 111 109 109 117 110 105 116 105 101 115 32 105 110 32 116 104 101 32 74 111 110 113 117 105 232 114 101 32 114 101 103 105 111 110 32 99 97 110 32 105 109 112 114 111 118 101 32 116 104 101 32 113 117 97 108 105 116 121 32 111 102 32 116 104 101 32 97 105 114 32 119 101 32 98 114 101 97 116 104 101 63 32 73 116 32 119 105 108 108 32 104 97 118 101 32 97 32 110 101 117 116 114 97 108 32 99 104 97 105 114 32 97 110 100 32 118 105 99 101 45 99 104 97 105 114 115 44 32 97 110 100 32 116 104 105 115 32 105 115 32 116 104 101 32 99 114 105 116 105 99 97 108 32 112 97 114 116 44 32 105 116 32 119 105 108 108 32 104 97 118 101 32 101 113 117 97 108 32 101 109 112 108 111 121 101 114 32 97 110 100 32 101 109 112 108 111 121 101 101 32 114 101 112 114 101 115 101 110 116 97 116 105 111 110 46 32 66 101 97 114 32 105 110 32 109 105 110 100 32 116 104 97 116 32 97 108 116 104 111 117 103 104 32 97 105 114 32 99 114 97 115 104 101 115 32 97 114 101 32 115 112 101 99 116 97 99 117 108 97 114 44 32 116 104 101 32 84 83 66 32 97 108 115 111 32 109 117 115 116 32 112 117 116 32 116 111 103 101 116 104 101 114 32 116 104 101 32 112 117 122 122 108 101 115 32 111 102 32 102 114 97 103 109 101 110 116 101 100 32 116 114 97 105 110 115 44 32 115 104 105 112 115 32 97 110 100 32 112 105 112 101 108 105 110 101 115 46 32 73 115 32 116 104 105 115 32 116 104 101 32 98 101 115 116 32 116 104 101 32 76 105 98 101 114 97 108 115 32 99 111 117 108 100 32 99 111 109 101 32 117 112 32 119 105 116 104 63 32 87 104 97 116 32 104 97 118 101 32 116 104 101 32 98 117 114 101 97 117 99 114 97 99 121 32 97 110 100 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 98 101 105 110 103 32 100 111 105 110 103 32 102 111 114 32 116 104 101 32 108 97 115 116 32 116 119 111 32 121 101 97 114 115 63 32 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 104 101 114 101 32 97 114 101 32 115 111 109 101 32 111 116 104 101 114 32 105 110 99 111 110 115 105 115 116 101 110 99 105 101 115 46', 'CipherUsed': 'Ascii'}}
+    cfg = make_default_config('''84 104 105 115 44 32 104 101 32 97 114 103 117 101 100 44 32 99 111 110 115 116 105 116 117 116 101 100 32 97 32 99 111 110 116 101 109 112 116 32 111 102 32 80 97 114 108 105 97 109 101 110 116 46 32 65 110 111 116 104 101 114 32 111 102 32 116 104 101 32 102 111 117 110 100 105 110 103 32 112 101 111 112 108 101 115 32 119 101 114 101 32 99 101 114 116 97 105 110 108 121 32 116 104 101 32 69 110 103 108 105 115 104 32 119 104 111 32 99 97 109 101 32 105 110 32 109 97 105 110 108 121 32 118 105 97 32 116 104 101 32 49 51 32 99 111 108 111 110 105 101 115 32 97 110 100 32 108 97 116 101 114 32 115 101 116 116 108 101 100 32 116 104 101 32 105 110 116 101 114 105 111 114 32 111 102 32 67 97 110 97 100 97 46 32 82 105 103 104 116 32 110 111 119 44 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 105 115 32 112 111 99 107 101 116 105 110 103 32 98 101 116 119 101 101 110 32 36 54 32 97 110 100 32 36 55 32 98 105 108 108 105 111 110 44 32 104 97 118 105 110 103 32 114 101 100 117 99 101 100 32 101 108 105 103 105 98 105 108 105 116 121 32 102 111 114 32 116 104 101 115 101 32 112 114 111 103 114 97 109 115 32 97 110 100 32 119 111 114 107 101 100 32 105 116 32 115 111 32 116 104 97 116 32 110 111 119 32 112 101 111 112 108 101 32 112 97 121 32 112 114 101 109 105 117 109 115 32 102 114 111 109 32 116 104 101 32 102 105 114 115 116 32 104 111 117 114 32 111 102 32 119 111 114 107 46 32 84 104 114 111 117 103 104 32 105 116 115 32 114 101 115 111 117 114 99 101 32 99 101 110 116 114 101 44 32 112 117 98 108 105 99 32 101 100 117 99 97 116 105 111 110 32 105 110 105 116 105 97 116 105 118 101 115 32 97 110 100 32 115 117 112 112 111 114 116 32 103 114 111 117 112 115 44 32 116 104 101 32 65 108 122 104 101 105 109 101 114 32 83 111 99 105 101 116 121 32 111 102 32 67 97 109 98 114 105 100 103 101 32 112 108 97 121 115 32 97 110 32 105 109 112 111 114 116 97 110 116 32 114 111 108 101 32 105 110 32 116 104 101 32 99 111 109 109 117 110 105 116 121 46 32 73 116 32 97 108 115 111 32 112 114 111 118 105 100 101 115 32 102 111 114 32 116 104 101 32 77 105 110 105 115 116 101 114 32 111 102 32 73 110 100 117 115 116 114 121 32 116 111 32 98 108 111 99 107 32 97 99 99 101 115 115 32 116 111 32 99 101 114 116 97 105 110 32 116 121 112 101 115 32 111 102 32 109 97 116 101 114 105 97 108 115 32 119 104 101 110 32 104 101 32 111 114 32 115 104 101 32 98 101 99 111 109 101 115 32 97 119 97 114 101 32 111 102 32 116 104 101 109 46 32 69 118 101 110 32 111 110 32 111 117 114 32 115 105 100 101 32 116 104 101 114 101 32 97 114 101 32 115 111 109 101 32 112 114 111 98 108 101 109 115 46 32 87 101 32 104 97 118 101 32 115 101 101 110 32 115 111 109 101 32 109 111 118 101 115 32 105 110 32 99 111 109 109 105 116 116 101 101 115 32 111 118 101 114 32 116 104 101 32 108 97 115 116 32 119 101 101 107 32 111 114 32 115 111 32 119 104 101 114 101 32 99 104 97 105 114 109 101 110 32 119 104 111 32 104 97 118 101 32 99 111 110 102 114 111 110 116 101 100 32 97 110 100 32 99 104 97 108 108 101 110 103 101 100 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 104 97 118 101 32 98 101 101 110 32 109 111 118 101 100 32 97 115 105 100 101 46 32 87 105 108 108 32 116 104 101 32 80 114 105 109 101 32 77 105 110 105 115 116 101 114 32 117 110 100 101 114 116 97 107 101 32 116 111 32 107 101 101 112 32 104 105 115 32 112 114 111 109 105 115 101 115 32 97 110 100 32 109 111 118 101 32 113 117 105 99 107 108 121 32 116 111 32 102 114 101 101 32 117 112 32 102 117 110 100 115 32 115 111 32 116 104 97 116 32 116 104 101 32 105 110 100 117 115 116 114 105 101 115 32 97 110 100 32 99 111 109 109 117 110 105 116 105 101 115 32 105 110 32 116 104 101 32 74 111 110 113 117 105 232 114 101 32 114 101 103 105 111 110 32 99 97 110 32 105 109 112 114 111 118 101 32 116 104 101 32 113 117 97 108 105 116 121 32 111 102 32 116 104 101 32 97 105 114 32 119 101 32 98 114 101 97 116 104 101 63 32 73 116 32 119 105 108 108 32 104 97 118 101 32 97 32 110 101 117 116 114 97 108 32 99 104 97 105 114 32 97 110 100 32 118 105 99 101 45 99 104 97 105 114 115 44 32 97 110 100 32 116 104 105 115 32 105 115 32 116 104 101 32 99 114 105 116 105 99 97 108 32 112 97 114 116 44 32 105 116 32 119 105 108 108 32 104 97 118 101 32 101 113 117 97 108 32 101 109 112 108 111 121 101 114 32 97 110 100 32 101 109 112 108 111 121 101 101 32 114 101 112 114 101 115 101 110 116 97 116 105 111 110 46 32 66 101 97 114 32 105 110 32 109 105 110 100 32 116 104 97 116 32 97 108 116 104 111 117 103 104 32 97 105 114 32 99 114 97 115 104 101 115 32 97 114 101 32 115 112 101 99 116 97 99 117 108 97 114 44 32 116 104 101 32 84 83 66 32 97 108 115 111 32 109 117 115 116 32 112 117 116 32 116 111 103 101 116 104 101 114 32 116 104 101 32 112 117 122 122 108 101 115 32 111 102 32 102 114 97 103 109 101 110 116 101 100 32 116 114 97 105 110 115 44 32 115 104 105 112 115 32 97 110 100 32 112 105 112 101 108 105 110 101 115 46 32 73 115 32 116 104 105 115 32 116 104 101 32 98 101 115 116 32 116 104 101 32 76 105 98 101 114 97 108 115 32 99 111 117 108 100 32 99 111 109 101 32 117 112 32 119 105 116 104 63 32 87 104 97 116 32 104 97 118 101 32 116 104 101 32 98 117 114 101 97 117 99 114 97 99 121 32 97 110 100 32 116 104 101 32 103 111 118 101 114 110 109 101 110 116 32 98 101 105 110 103 32 100 111 105 110 103 32 102 111 114 32 116 104 101 32 108 97 115 116 32 116 119 111 32 121 101 97 114 115 63 32 41 58 10 77 114 46 32 83 112 101 97 107 101 114 44 32 104 101 114 101 32 97 114 101 32 115 111 109 101 32 111 116 104 101 114 32 105 110 99 111 110 115 105 115 116 101 110 99 105 101 115 46''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Binary_rYcgvxAt():
-    # {'PlainText Sentences': 'ELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia):\nIt is indeed a great honour to be entrusted with this task.', 'Encrypted Texts': {'PlainText': 'ELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia):\nIt is indeed a great honour to be entrusted with this task.', 'EncryptedText': '1000101 1001100 1000101 1000011 1010100 1001001 1001111 1001110 100000 1001111 1000110 100000 1010011 1010000 1000101 1000001 1001011 1000101 1010010 100000 1010 1010100 1101000 1100101 100000 1010000 1110010 1100101 1110011 1101001 1100100 1101001 1101110 1100111 100000 1001111 1100110 1100110 1101001 1100011 1100101 1110010 100000 101000 1001101 1110010 101110 100000 1000011 1100001 1100011 1100011 1101001 1100001 101001 111010 1010 1001001 1110100 100000 1101001 1110011 100000 1101001 1101110 1100100 1100101 1100101 1100100 100000 1100001 100000 1100111 1110010 1100101 1100001 1110100 100000 1101000 1101111 1101110 1101111 1110101 1110010 100000 1110100 1101111 100000 1100010 1100101 100000 1100101 1101110 1110100 1110010 1110101 1110011 1110100 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1110100 1101000 1101001 1110011 100000 1110100 1100001 1110011 1101011 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1000101 1001100 1000101 1000011 1010100 1001001 1001111 1001110 100000 1001111 1000110 100000 1010011 1010000 1000101 1000001 1001011 1000101 1010010 100000 1010 1010100 1101000 1100101 100000 1010000 1110010 1100101 1110011 1101001 1100100 1101001 1101110 1100111 100000 1001111 1100110 1100110 1101001 1100011 1100101 1110010 100000 101000 1001101 1110010 101110 100000 1000011 1100001 1100011 1100011 1101001 1100001 101001 111010 1010 1001001 1110100 100000 1101001 1110011 100000 1101001 1101110 1100100 1100101 1100101 1100100 100000 1100001 100000 1100111 1110010 1100101 1100001 1110100 100000 1101000 1101111 1101110 1101111 1110101 1110010 100000 1110100 1101111 100000 1100010 1100101 100000 1100101 1101110 1110100 1110010 1110101 1110011 1110100 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1110100 1101000 1101001 1110011 100000 1110100 1100001 1110011 1101011 101110''')
+def test_Base16_iFyLWPyb():
+    # {'PlainText Sentences': "The minister must know that NISA accounts will not even cover farm expenses. Arthur C. Eggleton (Minister of National Defence, Lib. member for making that point. I hate to use that term because it conjures up the wrong things. A provision of this nature seems to protect the interests of taxpayers, as the equipment would become an asset of the company at the end of the lease. I look forward to hearing what Reform members have to say in the upcoming re-examination of the pension system, and to seeing how many of them change their minds and want to opt back into the federal MPs' pension system. Not only that. ):\nMr. Speaker, let me begin by saying that we share the hon. Or, I could have gone outside Canada and examined marriage down through the ages. No, there has not been. When they talk about their code of ethics, we must ask ourselves: what ethics? Once again, Canada's credibility, its prestige as a peacekeeper, is predicated on our respect for the soldiers who represent us abroad. I noted that it was in 1986 when the then auditor general indicated that in fact that money was to be part of the consolidated revenue. All those things aside, I am not here to debate the percentage of farmers or farm based people in my party or in the governing party. Sections 2, 4, 14 and 20 come into force on March 20, 2009 and the remaining provisions of this Act come into''  \nMotion No. It is strange that the Liberal Party is viewed as the party of the centre in this country because when I look at its history I see a party that, when necessary, takes good ideas from wherever it can find them. When will the Minister of Finance introduce a Bill C-29 to help Canada's shipyard workers? These are all things that have to be looked at very closely if we are to make a very meaningful inroad with respect to health care.", 'Encrypted Texts': {'PlainText': "The minister must know that NISA accounts will not even cover farm expenses. Arthur C. Eggleton (Minister of National Defence, Lib. member for making that point. I hate to use that term because it conjures up the wrong things. A provision of this nature seems to protect the interests of taxpayers, as the equipment would become an asset of the company at the end of the lease. I look forward to hearing what Reform members have to say in the upcoming re-examination of the pension system, and to seeing how many of them change their minds and want to opt back into the federal MPs' pension system. Not only that. ):\nMr. Speaker, let me begin by saying that we share the hon. Or, I could have gone outside Canada and examined marriage down through the ages. No, there has not been. When they talk about their code of ethics, we must ask ourselves: what ethics? Once again, Canada's credibility, its prestige as a peacekeeper, is predicated on our respect for the soldiers who represent us abroad. I noted that it was in 1986 when the then auditor general indicated that in fact that money was to be part of the consolidated revenue. All those things aside, I am not here to debate the percentage of farmers or farm based people in my party or in the governing party. Sections 2, 4, 14 and 20 come into force on March 20, 2009 and the remaining provisions of this Act come into''  \nMotion No. It is strange that the Liberal Party is viewed as the party of the centre in this country because when I look at its history I see a party that, when necessary, takes good ideas from wherever it can find them. When will the Minister of Finance introduce a Bill C-29 to help Canada's shipyard workers? These are all things that have to be looked at very closely if we are to make a very meaningful inroad with respect to health care.", 'EncryptedTextipherUsed': 'Base16'}}
+    cfg = make_default_config
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Base16_vLHGdHBJ():
-    # {'PlainText Sentences': 'The Government will continue to be vigilant and responsible about keeping the financial affairs of the country in order: \nIt will put the debt-to-GDP ratio on a permanent downward track.', 'Encrypted Texts': {'PlainText': 'The Government will continue to be vigilant and responsible about keeping the financial affairs of the country in order: \nIt will put the debt-to-GDP ratio on a permanent downward track.', 'EncryptedText': '54686520476F7665726E6D656E742077696C6C20636F6E74696E756520746F20626520766967696C616E7420616E6420726573706F6E7369626C652061626F7574206B656570696E67207468652066696E616E6369616C2061666661697273206F662074686520636F756E74727920696E206F726465723A200A49742077696C6C207075742074686520646562742D746F2D47445020726174696F206F6E2061207065726D616E656E7420646F776E7761726420747261636B2E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''54686520476F7665726E6D656E742077696C6C20636F6E74696E756520746F20626520766967696C616E7420616E6420726573706F6E7369626C652061626F7574206B656570696E67207468652066696E616E6369616C2061666661697273206F662074686520636F756E74727920696E206F726465723A200A49742077696C6C207075742074686520646562742D746F2D47445020726174696F206F6E2061207065726D616E656E7420646F776E7761726420747261636B2E''')
+def test_Reverse_cZUTrEkb():
+    # {'PlainText Sentences': 'There are lessons for our Prime Minister to be learned from Mr. Blair.', 'Encrypted Texts': {'PlainText': 'There are lessons for our Prime Minister to be learned from Mr. Blair.', 'EncryptedText': '.rialB .rM morf denrael eb ot retsiniM emirP ruo rof snossel era erehT', 'CipherUsed': 'Reverse'}}
+    cfg = make_default_config('''.rialB .rM morf denrael eb ot retsiniM emirP ruo rof snossel era erehT''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Reverse_grVuUzvN():
-    # {'PlainText Sentences': 'As you know, over the years I have had considerable respect for you.', 'Encrypted Texts': {'PlainText': 'As you know, over the years I have had considerable respect for you.', 'EncryptedText': '.uoy rof tcepser elbaredisnoc dah evah I sraey eht revo ,wonk uoy sA', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.uoy rof tcepser elbaredisnoc dah evah I sraey eht revo ,wonk uoy sA''')
+def test_Base64_FSakPgWv():
+    # {'PlainText Sentences': "):\nMr. Speaker, here is a news flash for the finance minister. It is clearly in the parliamentary rules that one cannot charge a member with misrepresenting the facts. I can buy a piece of equipment and pay $1 Canadian for it or I can buy the same thing for 65 cents American. * * * \nGOVERNMENT RESPONSE TO PETITIONS \nMr. Peter Adams (Parliamentary Secretary to Leader of the Government in the House of Commons, Lib. It has not happened. The process of filing the business plan alone will help to ensure your business is a success. ``I give you an extra 20 crowns and you cannot even say thank you'' . member for Chicoutimi whether he would be in agreement to the extent of seeing areas of provincial jurisdiction, including that of Quebec-he being a Quebec MP-encroached upon, in order to comply with the motion by the NDP. This clown rises just about every day in this House to proclaim his desire to improve the lot of the most disadvantaged members of society and of the children of Canada who are living in poverty. That is why we need to focus on the long term and not on the short term issues that distract us. But, as you wish, I will move right along. But I made a distinction between those who are ill and those who are homeless. The reality is, there are large payments and there is support going to western Canada. This is in addition to other transfers from the federal government to the provinces like the Canada health and social transfer which supports health care and education, the EI funds, regional grants and other smaller programs. Let us keep it competitive. Mrs. Suzanne Tremblay (Rimouski-Mitis, BQ):\nMadam Speaker, as Parliament reconvenes, I am delighted to rise in this House to speak to Bill C-310 introduced by my hon. 248 \nMr. Mike Scott \nMotions Nos. My question is for the fisheries minister.", 'Encrypted Texts': {'PlainText': "):\nMr. Speaker, here is a news flash for the finance minister. It is clearly in the parliamentary rules that one cannot charge a member with misrepresenting the facts. I can buy a piece of equipment and pay $1 Canadian for it or I can buy the same thing for 65 cents American. * * * \nGOVERNMENT RESPONSE TO PETITIONS \nMr. Peter Adams (Parliamentary Secretary to Leader of the Government in the House of Commons, Lib. It has not happened. The process of filing the business plan alone will help to ensure your business is a success. ``I give you an extra 20 crowns and you cannot even say thank you'' . member for Chicoutimi whether he would be in agreement to the extent of seeing areas of provincial jurisdiction, including that of Quebec-he being a Quebec MP-encroached upon, in order to comply with the motion by the NDP. This clown rises just about every day in this House to proclaim his desire to improve the lot of the most disadvantaged members of society and of the children of Canada who are living in poverty. That is why we need to focus on the long term and not on the short term issues that distract us. But, as you wish, I will move right along. But I made a distinction between those who are ill and those who are homeless. The reality is, there are large payments and there is support going to western Canada. This is in addition to other transfers from the federal government to the provinces like the Canada health and social transfer which supports health care and education, the EI funds, regional grants and other smaller programs. Let us keep it competitive. Mrs. Suzanne Tremblay (Rimouski-Mitis, BQ):\nMadam Speaker, as Parliament reconvenes, I am delighted to rise in this House to speak to Bill C-310 introduced by my hon. 248 \nMr. Mike Scott \nMotions Nos. My question is for the fisheries minister.", 'EncryptedText': 'KToKTXIuIFNwZWFrZXIsIGhlcmUgaXMgYSBuZXdzIGZsYXNoIGZvciB0aGUgZmluYW5jZSBtaW5pc3Rlci4gSXQgaXMgY2xlYXJseSBpbiB0aGUgcGFybGlhbWVudGFyeSBydWxlcyB0aGF0IG9uZSBjYW5ub3QgY2hhcmdlIGEgbWVtYmVyIHdpdGggbWlzcmVwcmVzZW50aW5nIHRoZSBmYWN0cy4gSSBjYW4gYnV5IGEgcGllY2Ugb2YgZXF1aXBtZW50IGFuZCBwYXkgJDEgQ2FuYWRpYW4gZm9yIGl0IG9yIEkgY2FuIGJ1eSB0aGUgc2FtZSB0aGluZyBmb3IgNjUgY2VudHMgQW1lcmljYW4uICogKiAqIApHT1ZFUk5NRU5UIFJFU1BPTlNFIFRPIFBFVElUSU9OUyAKTXIuIFBldGVyIEFkYW1zIChQYXJsaWFtZW50YXJ5IFNlY3JldGFyeSB0byBMZWFkZXIgb2YgdGhlIEdvdmVybm1lbnQgaW4gdGhlIEhvdXNlIG9mIENvbW1vbnMsIExpYi4gSXQgaGFzIG5vdCBoYXBwZW5lZC4gVGhlIHByb2Nlc3Mgb2YgZmlsaW5nIHRoZSBidXNpbmVzcyBwbGFuIGFsb25lIHdpbGwgaGVscCB0byBlbnN1cmUgeW91ciBidXNpbmVzcyBpcyBhIHN1Y2Nlc3MuIGBgSSBnaXZlIHlvdSBhbiBleHRyYSAyMCBjcm93bnMgYW5kIHlvdSBjYW5ub3QgZXZlbiBzYXkgdGhhbmsgeW91JycgLiBtZW1iZXIgZm9yIENoaWNvdXRpbWkgd2hldGhlciBoZSB3b3VsZCBiZSBpbiBhZ3JlZW1lbnQgdG8gdGhlIGV4dGVudCBvZiBzZWVpbmcgYXJlYXMgb2YgcHJvdmluY2lhbCBqdXJpc2RpY3Rpb24sIGluY2x1ZGluZyB0aGF0IG9mIFF1ZWJlYy1oZSBiZWluZyBhIFF1ZWJlYyBNUC1lbmNyb2FjaGVkIHVwb24sIGluIG9yZGVyIHRvIGNvbXBseSB3aXRoIHRoZSBtb3Rpb24gYnkgdGhlIE5EUC4gVGhpcyBjbG93biByaXNlcyBqdXN0IGFib3V0IGV2ZXJ5IGRheSBpbiB0aGlzIEhvdXNlIHRvIHByb2NsYWltIGhpcyBkZXNpcmUgdG8gaW1wcm92ZSB0aGUgbG90IG9mIHRoZSBtb3N0IGRpc2FkdmFudGFnZWQgbWVtYmVycyBvZiBzb2NpZXR5IGFuZCBvZiB0aGUgY2hpbGRyZW4gb2YgQ2FuYWRhIHdobyBhcmUgbGl2aW5nIGluIHBvdmVydHkuIFRoYXQgaXMgd2h5IHdlIG5lZWQgdG8gZm9jdXMgb24gdGhlIGxvbmcgdGVybSBhbmQgbm90IG9uIHRoZSBzaG9ydCB0ZXJtIGlzc3VlcyB0aGF0IGRpc3RyYWN0IHVzLiBCdXQsIGFzIHlvdSB3aXNoLCBJIHdpbGwgbW92ZSByaWdodCBhbG9uZy4gQnV0IEkgbWFkZSBhIGRpc3RpbmN0aW9uIGJldHdlZW4gdGhvc2Ugd2hvIGFyZSBpbGwgYW5kIHRob3NlIHdobyBhcmUgaG9tZWxlc3MuIFRoZSByZWFsaXR5IGlzLCB0aGVyZSBhcmUgbGFyZ2UgcGF5bWVudHMgYW5kIHRoZXJlIGlzIHN1cHBvcnQgZ29pbmcgdG8gd2VzdGVybiBDYW5hZGEuIFRoaXMgaXMgaW4gYWRkaXRpb24gdG8gb3RoZXIgdHJhbnNmZXJzIGZyb20gdGhlIGZlZGVyYWwgZ292ZXJubWVudCB0byB0aGUgcHJvdmluY2VzIGxpa2UgdGhlIENhbmFkYSBoZWFsdGggYW5kIHNvY2lhbCB0cmFuc2ZlciB3aGljaCBzdXBwb3J0cyBoZWFsdGggY2FyZSBhbmQgZWR1Y2F0aW9uLCB0aGUgRUkgZnVuZHMsIHJlZ2lvbmFsIGdyYW50cyBhbmQgb3RoZXIgc21hbGxlciBwcm9ncmFtcy4gTGV0IHVzIGtlZXAgaXQgY29tcGV0aXRpdmUuIE1ycy4gU3V6YW5uZSBUcmVtYmxheSAoUmltb3Vza2ktTWl0aXMsIEJRKToKTWFkYW0gU3BlYWtlciwgYXMgUGFybGlhbWVudCByZWNvbnZlbmVzLCBJIGFtIGRlbGlnaHRlZCB0byByaXNlIGluIHRoaXMgSG91c2UgdG8gc3BlYWsgdG8gQmlsbCBDLTMxMCBpbnRyb2R1Y2VkIGJ5IG15IGhvbi4gMjQ4IApNci4gTWlrZSBTY290dCAKTW90aW9ucyBOb3MuIE15IHF1ZXN0aW9uIGlzIGZvciB0aGUgZmlzaGVyaWVzIG1pbmlzdGVyLg==', 'CipherUsed': 'Base64'}}
+    cfg = make_default_config('''KToKTXIuIFNwZWFrZXIsIGhlcmUgaXMgYSBuZXdzIGZsYXNoIGZvciB0aGUgZmluYW5jZSBtaW5pc3Rlci4gSXQgaXMgY2xlYXJseSBpbiB0aGUgcGFybGlhbWVudGFyeSBydWxlcyB0aGF0IG9uZSBjYW5ub3QgY2hhcmdlIGEgbWVtYmVyIHdpdGggbWlzcmVwcmVzZW50aW5nIHRoZSBmYWN0cy4gSSBjYW4gYnV5IGEgcGllY2Ugb2YgZXF1aXBtZW50IGFuZCBwYXkgJDEgQ2FuYWRpYW4gZm9yIGl0IG9yIEkgY2FuIGJ1eSB0aGUgc2FtZSB0aGluZyBmb3IgNjUgY2VudHMgQW1lcmljYW4uICogKiAqIApHT1ZFUk5NRU5UIFJFU1BPTlNFIFRPIFBFVElUSU9OUyAKTXIuIFBldGVyIEFkYW1zIChQYXJsaWFtZW50YXJ5IFNlY3JldGFyeSB0byBMZWFkZXIgb2YgdGhlIEdvdmVybm1lbnQgaW4gdGhlIEhvdXNlIG9mIENvbW1vbnMsIExpYi4gSXQgaGFzIG5vdCBoYXBwZW5lZC4gVGhlIHByb2Nlc3Mgb2YgZmlsaW5nIHRoZSBidXNpbmVzcyBwbGFuIGFsb25lIHdpbGwgaGVscCB0byBlbnN1cmUgeW91ciBidXNpbmVzcyBpcyBhIHN1Y2Nlc3MuIGBgSSBnaXZlIHlvdSBhbiBleHRyYSAyMCBjcm93bnMgYW5kIHlvdSBjYW5ub3QgZXZlbiBzYXkgdGhhbmsgeW91JycgLiBtZW1iZXIgZm9yIENoaWNvdXRpbWkgd2hldGhlciBoZSB3b3VsZCBiZSBpbiBhZ3JlZW1lbnQgdG8gdGhlIGV4dGVudCBvZiBzZWVpbmcgYXJlYXMgb2YgcHJvdmluY2lhbCBqdXJpc2RpY3Rpb24sIGluY2x1ZGluZyB0aGF0IG9mIFF1ZWJlYy1oZSBiZWluZyBhIFF1ZWJlYyBNUC1lbmNyb2FjaGVkIHVwb24sIGluIG9yZGVyIHRvIGNvbXBseSB3aXRoIHRoZSBtb3Rpb24gYnkgdGhlIE5EUC4gVGhpcyBjbG93biByaXNlcyBqdXN0IGFib3V0IGV2ZXJ5IGRheSBpbiB0aGlzIEhvdXNlIHRvIHByb2NsYWltIGhpcyBkZXNpcmUgdG8gaW1wcm92ZSB0aGUgbG90IG9mIHRoZSBtb3N0IGRpc2FkdmFudGFnZWQgbWVtYmVycyBvZiBzb2NpZXR5IGFuZCBvZiB0aGUgY2hpbGRyZW4gb2YgQ2FuYWRhIHdobyBhcmUgbGl2aW5nIGluIHBvdmVydHkuIFRoYXQgaXMgd2h5IHdlIG5lZWQgdG8gZm9jdXMgb24gdGhlIGxvbmcgdGVybSBhbmQgbm90IG9uIHRoZSBzaG9ydCB0ZXJtIGlzc3VlcyB0aGF0IGRpc3RyYWN0IHVzLiBCdXQsIGFzIHlvdSB3aXNoLCBJIHdpbGwgbW92ZSByaWdodCBhbG9uZy4gQnV0IEkgbWFkZSBhIGRpc3RpbmN0aW9uIGJldHdlZW4gdGhvc2Ugd2hvIGFyZSBpbGwgYW5kIHRob3NlIHdobyBhcmUgaG9tZWxlc3MuIFRoZSByZWFsaXR5IGlzLCB0aGVyZSBhcmUgbGFyZ2UgcGF5bWVudHMgYW5kIHRoZXJlIGlzIHN1cHBvcnQgZ29pbmcgdG8gd2VzdGVybiBDYW5hZGEuIFRoaXMgaXMgaW4gYWRkaXRpb24gdG8gb3RoZXIgdHJhbnNmZXJzIGZyb20gdGhlIGZlZGVyYWwgZ292ZXJubWVudCB0byB0aGUgcHJvdmluY2VzIGxpa2UgdGhlIENhbmFkYSBoZWFsdGggYW5kIHNvY2lhbCB0cmFuc2ZlciB3aGljaCBzdXBwb3J0cyBoZWFsdGggY2FyZSBhbmQgZWR1Y2F0aW9uLCB0aGUgRUkgZnVuZHMsIHJlZ2lvbmFsIGdyYW50cyBhbmQgb3RoZXIgc21hbGxlciBwcm9ncmFtcy4gTGV0IHVzIGtlZXAgaXQgY29tcGV0aXRpdmUuIE1ycy4gU3V6YW5uZSBUcmVtYmxheSAoUmltb3Vza2ktTWl0aXMsIEJRKToKTWFkYW0gU3BlYWtlciwgYXMgUGFybGlhbWVudCByZWNvbnZlbmVzLCBJIGFtIGRlbGlnaHRlZCB0byByaXNlIGluIHRoaXMgSG91c2UgdG8gc3BlYWsgdG8gQmlsbCBDLTMxMCBpbnRyb2R1Y2VkIGJ5IG15IGhvbi4gMjQ4IApNci4gTWlrZSBTY290dCAKTW90aW9ucyBOb3MuIE15IHF1ZXN0aW9uIGlzIGZvciB0aGUgZmlzaGVyaWVzIG1pbmlzdGVyLg==''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Binary_UTkAYUCl():
-    # {'PlainText Sentences': 'Monday, September 22, 1997 \nThis being the day on which Parliament was convoked by proclamation of His Excellency the Governor General of Canada for the dispatch of business, and the members of the House being assembled: \nRobert Marleau, Esquire, Clerk of the House of Commons, read to the House a letter from the Administrative Secretary to the Governor General informing him that the Right Honourable Antonio Lamer, in his capacity as Deputy Governor General, would proceed to the Senate chamber to open the first session of the 36th Parliament of Canada on Monday, September 22 at Ottawa.', 'Encrypted Texts': {'PlainText': 'Monday, September 22, 1997 \nThis being the day on which Parliament was convoked by proclamation of His Excellency the Governor General of Canada for the dispatch of business, and the members of the House being assembled: \nRobert Marleau, Esquire, Clerk of the House of Commons, read to the House a letter from the Administrative Secretary to the Governor General informing him that the Right Honourable Antonio Lamer, in his capacity as Deputy Governor General, would proceed to the Senate chamber to open the first session of the 36th Parliament of Canada on Monday, September 22 at Ottawa.', 'EncryptedText': '1001101 1101111 1101110 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110010 101100 100000 110001 111001 111001 110111 100000 1010 1010100 1101000 1101001 1110011 100000 1100010 1100101 1101001 1101110 1100111 100000 1110100 1101000 1100101 100000 1100100 1100001 1111001 100000 1101111 1101110 100000 1110111 1101000 1101001 1100011 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 100000 1110111 1100001 1110011 100000 1100011 1101111 1101110 1110110 1101111 1101011 1100101 1100100 100000 1100010 1111001 100000 1110000 1110010 1101111 1100011 1101100 1100001 1101101 1100001 1110100 1101001 1101111 1101110 100000 1101111 1100110 100000 1001000 1101001 1110011 100000 1000101 1111000 1100011 1100101 1101100 1101100 1100101 1101110 1100011 1111001 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100100 1101001 1110011 1110000 1100001 1110100 1100011 1101000 100000 1101111 1100110 100000 1100010 1110101 1110011 1101001 1101110 1100101 1110011 1110011 101100 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100010 1100101 1101001 1101110 1100111 100000 1100001 1110011 1110011 1100101 1101101 1100010 1101100 1100101 1100100 111010 100000 1010 1010010 1101111 1100010 1100101 1110010 1110100 100000 1001101 1100001 1110010 1101100 1100101 1100001 1110101 101100 100000 1000101 1110011 1110001 1110101 1101001 1110010 1100101 101100 100000 1000011 1101100 1100101 1110010 1101011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1101111 1100110 100000 1000011 1101111 1101101 1101101 1101111 1101110 1110011 101100 100000 1110010 1100101 1100001 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100001 100000 1101100 1100101 1110100 1110100 1100101 1110010 100000 1100110 1110010 1101111 1101101 100000 1110100 1101000 1100101 100000 1000001 1100100 1101101 1101001 1101110 1101001 1110011 1110100 1110010 1100001 1110100 1101001 1110110 1100101 100000 1010011 1100101 1100011 1110010 1100101 1110100 1100001 1110010 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101001 1101110 1100110 1101111 1110010 1101101 1101001 1101110 1100111 100000 1101000 1101001 1101101 100000 1110100 1101000 1100001 1110100 100000 1110100 1101000 1100101 100000 1010010 1101001 1100111 1101000 1110100 100000 1001000 1101111 1101110 1101111 1110101 1110010 1100001 1100010 1101100 1100101 100000 1000001 1101110 1110100 1101111 1101110 1101001 1101111 100000 1001100 1100001 1101101 1100101 1110010 101100 100000 1101001 1101110 100000 1101000 1101001 1110011 100000 1100011 1100001 1110000 1100001 1100011 1101001 1110100 1111001 100000 1100001 1110011 100000 1000100 1100101 1110000 1110101 1110100 1111001 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 101100 100000 1110111 1101111 1110101 1101100 1100100 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1010011 1100101 1101110 1100001 1110100 1100101 100000 1100011 1101000 1100001 1101101 1100010 1100101 1110010 100000 1110100 1101111 100000 1101111 1110000 1100101 1101110 100000 1110100 1101000 1100101 100000 1100110 1101001 1110010 1110011 1110100 100000 1110011 1100101 1110011 1110011 1101001 1101111 1101110 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 110011 110110 1110100 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1101111 1101110 100000 1001101 1101111 1101110 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110010 100000 1100001 1110100 100000 1001111 1110100 1110100 1100001 1110111 1100001 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1001101 1101111 1101110 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110010 101100 100000 110001 111001 111001 110111 100000 1010 1010100 1101000 1101001 1110011 100000 1100010 1100101 1101001 1101110 1100111 100000 1110100 1101000 1100101 100000 1100100 1100001 1111001 100000 1101111 1101110 100000 1110111 1101000 1101001 1100011 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 100000 1110111 1100001 1110011 100000 1100011 1101111 1101110 1110110 1101111 1101011 1100101 1100100 100000 1100010 1111001 100000 1110000 1110010 1101111 1100011 1101100 1100001 1101101 1100001 1110100 1101001 1101111 1101110 100000 1101111 1100110 100000 1001000 1101001 1110011 100000 1000101 1111000 1100011 1100101 1101100 1101100 1100101 1101110 1100011 1111001 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100100 1101001 1110011 1110000 1100001 1110100 1100011 1101000 100000 1101111 1100110 100000 1100010 1110101 1110011 1101001 1101110 1100101 1110011 1110011 101100 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100010 1100101 1101001 1101110 1100111 100000 1100001 1110011 1110011 1100101 1101101 1100010 1101100 1100101 1100100 111010 100000 1010 1010010 1101111 1100010 1100101 1110010 1110100 100000 1001101 1100001 1110010 1101100 1100101 1100001 1110101 101100 100000 1000101 1110011 1110001 1110101 1101001 1110010 1100101 101100 100000 1000011 1101100 1100101 1110010 1101011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1101111 1100110 100000 1000011 1101111 1101101 1101101 1101111 1101110 1110011 101100 100000 1110010 1100101 1100001 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100001 100000 1101100 1100101 1110100 1110100 1100101 1110010 100000 1100110 1110010 1101111 1101101 100000 1110100 1101000 1100101 100000 1000001 1100100 1101101 1101001 1101110 1101001 1110011 1110100 1110010 1100001 1110100 1101001 1110110 1100101 100000 1010011 1100101 1100011 1110010 1100101 1110100 1100001 1110010 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101001 1101110 1100110 1101111 1110010 1101101 1101001 1101110 1100111 100000 1101000 1101001 1101101 100000 1110100 1101000 1100001 1110100 100000 1110100 1101000 1100101 100000 1010010 1101001 1100111 1101000 1110100 100000 1001000 1101111 1101110 1101111 1110101 1110010 1100001 1100010 1101100 1100101 100000 1000001 1101110 1110100 1101111 1101110 1101001 1101111 100000 1001100 1100001 1101101 1100101 1110010 101100 100000 1101001 1101110 100000 1101000 1101001 1110011 100000 1100011 1100001 1110000 1100001 1100011 1101001 1110100 1111001 100000 1100001 1110011 100000 1000100 1100101 1110000 1110101 1110100 1111001 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 101100 100000 1110111 1101111 1110101 1101100 1100100 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1010011 1100101 1101110 1100001 1110100 1100101 100000 1100011 1101000 1100001 1101101 1100010 1100101 1110010 100000 1110100 1101111 100000 1101111 1110000 1100101 1101110 100000 1110100 1101000 1100101 100000 1100110 1101001 1110010 1110011 1110100 100000 1110011 1100101 1110011 1110011 1101001 1101111 1101110 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 110011 110110 1110100 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1101111 1101110 100000 1001101 1101111 1101110 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110010 100000 1100001 1110100 100000 1001111 1110100 1110100 1100001 1110111 1100001 101110''')
+def test_MorseCode_WvpqBrbL():
+    # {'PlainText Sentences': "This report was the result of six months of extensive consultations and travel throughout the country at an expense of almost half a million dollars. The parental approach to custody and access has been taken in a number of states, where joint custody is considered the best solution for divorcing couples, and sole custody is accorded only if it is in the child's best interest. We have cut employment insurance premiums. We have invested $1.7 billion in the national child benefit in order to help families give their children the best possible start in life. They want the bill amended so that the maximum aggregate liability of $1.5 billion in any fiscal year be changed to $1.5 billion at any time. Introduction and first reading \nMr. Myron Thompson \nPETITIONS \nTaxation \nMr. Ken Epp \nChild Pornography \nMr. Ken Epp \nThe Snowbirds \nMr. Dick Proctor \nThe Constitution \nMiss Deborah Grey \nNuclear Weapons \nMr. Svend J. Robinson \nThe Senate \nMr. Svend J. Robinson \nNisga'a Treaty \nMr. Darrel Stinson \nThe Snowbirds \nMr. Nelson Riis \nGenetically Modified Food Products \nMs. Marlene Jennings \nFood Labelling \nMs. Marlene Jennings \nQUESTIONS ON THE ORDER PAPER \nMr. Derek Lee \nGOVERNMENT ORDERS \nCANADA ELECTIONS ACT \nBill C-2. We will get the particulars on Ontario's position and respond to the hon. These 40 economies account for 85% of the world's annual $500 billion U.S. trade in IT products. It is a classic example of the government responding with alacrity to pressure coming from members of parliament. Ms. Alexa McDonough (Halifax, NDP):\nMr. Speaker, the Prime Minister boasts about balancing the federation but his cuts have created a Canada that is dangerously out of balance.", 'Encrypted Texts': {'PlainText': "This report was the result of six months of extensive consultations and travel throughout the country at an expense of almost half a million dollars. The parental approach to custody and access has been taken in a number of states, where joint custody is considered the best solution for divorcing couples, and sole custody is accorded only if it is in the child's best interest. We have cut employment insurance premiums. We have invested $1.7 billion in the national child benefit in order to help families give their children the best possible start in life. They want the bill amended so that the maximum aggregate liability of $1.5 billion in any fiscal year be changed to $1.5 billion at any time. Introduction and first reading \nMr. Myron Thompson \nPETITIONS \nTaxation \nMr. Ken Epp \nChild Pornography \nMr. Ken Epp \nThe Snowbirds \nMr. Dick Proctor \nThe Constitution \nMiss Deborah Grey \nNuclear Weapons \nMr. Svend J. Robinson \nThe Senate \nMr. Svend J. Robinson \nNisga'a Treaty \nMr. Darrel Stinson \nThe Snowbirds \nMr. Nelson Riis \nGenetically Modified Food Products \nMs. Marlene Jennings \nFood Labelling \nMs. Marlene Jennings \nQUESTIONS ON THE ORDER PAPER \nMr. Derek Lee \nGOVERNMENT ORDERS \nCANADA ELECTIONS ACT \nBill C-2. We will get the particulars on Ontario's position and respond to the hon. These 40 economies account for 85% of the world's annual $500 billion U.S. trade in IT products. It is a classic example of the government responding with alacrity to pressure coming from members of parliament. Ms. Alexa McDonough (Halifax, NDP):\nMr. Speaker, the Prime Minister boasts about balancing the federation but his cuts have created a Canada that is dangerously out of balance.", 'EncryptedText': '- .... .. ... / .-. . .--. --- .-. - / .-- .- ... / - .... . / .-. . ... ..- .-.. - / --- ..-. / ... .. -..- / -- --- -. - .... ... / --- ..-. / . -..- - . -. ... .. ...- . / -.-. --- -. ... ..- .-.. - .- - .. --- -. ... / .- -. -.. / - .-. .- ...- . .-.. / - .... .-. --- ..- --. .... --- ..- - / - .... . / -.-. --- ..- -. - .-. -.-- / .- - / .- -. / . -..- .--. . -. ... . / --- ..-. / .- .-.. -- --- ... - / .... .- .-.. ..-. / .- / -- .. .-.. .-.. .. --- -. / -.. --- .-.. .-.. .- .-. ... .-.-.- / - .... . / .--. .- .-. . -. - .- .-.. / .- .--. .--. .-. --- .- -.-. .... / - --- / -.-. ..- ... - --- -.. -.-- / .- -. -.. / .- -.-. -.-. . ... ... / .... .- ... / -... . . -. / - .- -.- . -. / .. -. / .- / -. ..- -- -... . .-. / --- ..-. / ... - .- - . ... --..-- / .-- .... . .-. . / .--- --- .. -. - / -.-. ..- ... - --- -.. -.-- / .. ... / -.-. --- -. ... .. -.. . .-. . -.. / - .... . / -... . ... - / ... --- .-.. ..- - .. --- -. / ..-. --- .-. / -.. .. ...- --- .-. -.-. .. -. --. / -.-. --- ..- .--. .-.. . ... --..-- / .- -. -.. / ... --- .-.. . / -.-. ..- ... - --- -.. -.-- / .. ... / .- -.-. -.-. --- .-. -.. . -.. / --- -. .-.. -.-- / .. ..-. / .. - / .. ... / .. -. / - .... . / -.-. .... .. .-.. -.. .----. ... / -... . ... - / .. -. - . .-. . ... - .-.-.- / .-- . / .... .- ...- . / -.-. ..- - / . -- .--. .-.. --- -.-- -- . -. - / .. -. ... ..- .-. .- -. -.-. . / .--. .-. . -- .. ..- -- ... .-.-.- / .-- . / .... .- ...- . / .. -. ...- . ... - . -.. / ...-..- .---- .-.-.- --... / -... .. .-.. .-.. .. --- -. / .. -. / - .... . / -. .- - .. --- -. .- .-.. / -.-. .... .. .-.. -.. / -... . -. . ..-. .. - / .. -. / --- .-. -.. . .-. / - --- / .... . .-.. .--. / ..-. .- -- .. .-.. .. . ... / --. .. ...- . / - .... . .. .-. / -.-. .... .. .-.. -.. .-. . -. / - .... . / -... . ... - / .--. --- ... ... .. -... .-.. . / ... - .- .-. - / .. -. / .-.. .. ..-. . .-.-.- / - .... . -.-- / .-- .- -. - / - .... . / -... .. .-.. .-.. / .- -- . -. -.. . -.. / ... --- / - .... .- - / - .... . / -- .- -..- .. -- ..- -- / .- --. --. .-. . --. .- - . / .-.. .. .- -... .. .-.. .. - -.-- / --- ..-. / ...-..- .---- .-.-.- ..... / -... .. .-.. .-.. .. --- -. / .. -. / .- -. -.-- / ..-. .. ... -.-. .- .-.. / -.-- . .- .-. / -... . / -.-. .... .- -. --. . -.. / - --- / ...-..- .---- .-.-.- ..... / -... .. .-.. .-.. .. --- -. / .- - / .- -. -.-- / - .. -- . .-.-.- / .. -. - .-. --- -.. ..- -.-. - .. --- -. / .- -. -.. / ..-. .. .-. ... - / .-. . .- -.. .. -. --. /  -- .-. .-.-.- / -- -.-- .-. --- -. / - .... --- -- .--. ... --- -. /  .--. . - .. - .. --- -. ... /  - .- -..- .- - .. --- -. /  -- .-. .-.-.- / -.- . -. / . .--. .--. /  -.-. .... .. .-.. -.. / .--. --- .-. -. --- --. .-. .- .--. .... -.-- /  -- .-. .-.-.- / -.- . -. / . .--. .--. /  - .... . / ... -. --- .-- -... .. .-. -.. ... /  -- .-. .-.-.- / -.. .. -.-. -.- / .--. .-. --- -.-. - --- .-. /  - .... . / -.-. --- -. ... - .. - ..- - .. --- -. /  -- .. ... ... / -.. . -... --- .-. .- .... / --. .-. . -.-- /  -. ..- -.-. .-.. . .- .-. / .-- . .- .--. --- -. ... /  -- .-. .-.-.- / ... ...- . -. -.. / .--- .-.-.- / .-. --- -... .. -. ... --- -. /  - .... . / ... . -. .- - . /  -- .-. .-.-.- / ... ...- . -. -.. / .--- .-.-.- / .-. --- -... .. -. ... --- -. /  -. .. ... --. .- .----. .- / - .-. . .- - -.-- /  -- .-. .-.-.- / -.. .- .-. .-. . .-.. / ... - .. -. ... --- -. /  - .... . / ... -. --- .-- -... .. .-. -.. ... /  -- .-. .-.-.- / -. . .-.. ... --- -. / .-. .. .. ... /  --. . -. . - .. -.-. .- .-.. .-.. -.-- / -- --- -.. .. ..-. .. . -.. / ..-. --- --- -.. / .--. .-. --- -.. ..- -.-. - ... /  -- ... .-.-.- / -- .- .-. .-.. . -. . / .--- . -. -. .. -. --. ... /  ..-. --- --- -.. / .-.. .- -... . .-.. .-.. .. -. --. /  -- ... .-.-.- / -- .- .-. .-.. . -. . / .--- . -. -. .. -. --. ... /  --.- ..- . ... - .. --- -. ... / --- -. / - .... . / --- .-. -.. . .-. / .--. .- .--. . .-. /  -- .-. .-.-.- / -.. . .-. . -.- / .-.. . . /  --. --- ...- . .-. -. -- . -. - / --- .-. -.. . .-. ... /  -.-. .- -. .- -.. .- / . .-.. . -.-. - .. --- -. ... / .- -.-. - /  -... .. .-.. .-.. / -.-. -....- ..--- .-.-.- / .-- . / .-- .. .-.. .-.. / --. . - / - .... . / .--. .- .-. - .. -.-. ..- .-.. .- .-. ... / --- -. / --- -. - .- .-. .. --- .----. ... / .--. --- ... .. - .. --- -. / .- -. -.. / .-. . ... .--. --- -. -.. / - --- / - .... . / .... --- -. .-.-.- / - .... . ... . / ....- ----- / . -.-. --- -. --- -- .. . ... / .- -.-. -.-. --- ..- -. - / ..-. --- .-. / ---.. .....  / --- ..-. / - .... . / .-- --- .-. .-.. -.. .----. ... / .- -. -. ..- .- .-.. / ...-..- ..... ----- ----- / -... .. .-.. .-.. .. --- -. / ..- .-.-.- ... .-.-.- / - .-. .- -.. . / .. -. / .. - / .--. .-. --- -.. ..- -.-. - ... .-.-.- / .. - / .. ... / .- / -.-. .-.. .- ... ... .. -.-. / . -..- .- -- .--. .-.. . / --- ..-. / - .... . / --. --- ...- . .-. -. -- . -. - / .-. . ... .--. --- -. -.. .. -. --. / .-- .. - .... / .- .-.. .- -.-. .-. .. - -.-- / - --- / .--. .-. . ... ... ..- .-. . / -.-. --- -- .. -. --. / ..-. .-. --- -- / -- . -- -... . .-. ... / --- ..-. / .--. .- .-. .-.. .. .- -- . -. - .-.-.- / -- ... .-.-.- / .- .-.. . -..- .- / -- -.-. -.. --- -. --- ..- --. .... / -.--. .... .- .-.. .. ..-. .- -..- --..-- / -. -.. .--. -.--.- ---...  -- .-. .-.-.- / ... .--. . .- -.- . .-. --..-- / - .... . / .--. .-. .. -- . / -- .. -. .. ... - . .-. / -... --- .- ... - ... / .- -... --- ..- - / -... .- .-.. .- -. -.-. .. -. --. / - .... . / ..-. . -.. . .-. .- - .. --- -. / -... ..- - / .... .. ... / -.-. ..- - ... / .... .- ...- . / -.-. .-. . .- - . -.. / .- / -.-. .- -. .- -.. .- / - .... .- - / .. ... / -.. .- -. --. . .-. --- ..- ... .-.. -.-- / --- ..- - / --- ..-. / -... .- .-.. .- -. -.-. . .-.-.-', 'CipherUsed': 'MorseCode'}}
+    cfg = make_default_config('''- .... .. ... / .-. . .--. --- .-. - / .-- .- ... / - .... . / .-. . ... ..- .-.. - / --- ..-. / ... .. -..- / -- --- -. - .... ... / --- ..-. / . -..- - . -. ... .. ...- . / -.-. --- -. ... ..- .-.. - .- - .. --- -. ... / .- -. -.. / - .-. .- ...- . .-.. / - .... .-. --- ..- --. .... --- ..- - / - .... . / -.-. --- ..- -. - .-. -.-- / .- - / .- -. / . -..- .--. . -. ... . / --- ..-. / .- .-.. -- --- ... - / .... .- .-.. ..-. / .- / -- .. .-.. .-.. .. --- -. / -.. --- .-.. .-.. .- .-. ... .-.-.- / - .... . / .--. .- .-. . -. - .- .-.. / .- .--. .--. .-. --- .- -.-. .... / - --- / -.-. ..- ... - --- -.. -.-- / .- -. -.. / .- -.-. -.-. . ... ... / .... .- ... / -... . . -. / - .- -.- . -. / .. -. / .- / -. ..- -- -... . .-. / --- ..-. / ... - .- - . ... --..-- / .-- .... . .-. . / .--- --- .. -. - / -.-. ..- ... - --- -.. -.-- / .. ... / -.-. --- -. ... .. -.. . .-. . -.. / - .... . / -... . ... - / ... --- .-.. ..- - .. --- -. / ..-. --- .-. / -.. .. ...- --- .-. -.-. .. -. --. / -.-. --- ..- .--. .-.. . ... --..-- / .- -. -.. / ... --- .-.. . / -.-. ..- ... - --- -.. -.-- / .. ... / .- -.-. -.-. --- .-. -.. . -.. / --- -. .-.. -.-- / .. ..-. / .. - / .. ... / .. -. / - .... . / -.-. .... .. .-.. -.. .----. ... / -... . ... - / .. -. - . .-. . ... - .-.-.- / .-- . / .... .- ...- . / -.-. ..- - / . -- .--. .-.. --- -.-- -- . -. - / .. -. ... ..- .-. .- -. -.-. . / .--. .-. . -- .. ..- -- ... .-.-.- / .-- . / .... .- ...- . / .. -. ...- . ... - . -.. / ...-..- .---- .-.-.- --... / -... .. .-.. .-.. .. --- -. / .. -. / - .... . / -. .- - .. --- -. .- .-.. / -.-. .... .. .-.. -.. / -... . -. . ..-. .. - / .. -. / --- .-. -.. . .-. / - --- / .... . .-.. .--. / ..-. .- -- .. .-.. .. . ... / --. .. ...- . / - .... . .. .-. / -.-. .... .. .-.. -.. .-. . -. / - .... . / -... . ... - / .--. --- ... ... .. -... .-.. . / ... - .- .-. - / .. -. / .-.. .. ..-. . .-.-.- / - .... . -.-- / .-- .- -. - / - .... . / -... .. .-.. .-.. / .- -- . -. -.. . -.. / ... --- / - .... .- - / - .... . / -- .- -..- .. -- ..- -- / .- --. --. .-. . --. .- - . / .-.. .. .- -... .. .-.. .. - -.-- / --- ..-. / ...-..- .---- .-.-.- ..... / -... .. .-.. .-.. .. --- -. / .. -. / .- -. -.-- / ..-. .. ... -.-. .- .-.. / -.-- . .- .-. / -... . / -.-. .... .- -. --. . -.. / - --- / ...-..- .---- .-.-.- ..... / -... .. .-.. .-.. .. --- -. / .- - / .- -. -.-- / - .. -- . .-.-.- / .. -. - .-. --- -.. ..- -.-. - .. --- -. / .- -. -.. / ..-. .. .-. ... - / .-. . .- -.. .. -. --. /  -- .-. .-.-.- / -- -.-- .-. --- -. / - .... --- -- .--. ... --- -. /  .--. . - .. - .. --- -. ... /  - .- -..- .- - .. --- -. /  -- .-. .-.-.- / -.- . -. / . .--. .--. /  -.-. .... .. .-.. -.. / .--. --- .-. -. --- --. .-. .- .--. .... -.-- /  -- .-. .-.-.- / -.- . -. / . .--. .--. /  - .... . / ... -. --- .-- -... .. .-. -.. ... /  -- .-. .-.-.- / -.. .. -.-. -.- / .--. .-. --- -.-. - --- .-. /  - .... . / -.-. --- -. ... - .. - ..- - .. --- -. /  -- .. ... ... / -.. . -... --- .-. .- .... / --. .-. . -.-- /  -. ..- -.-. .-.. . .- .-. / .-- . .- .--. --- -. ... /  -- .-. .-.-.- / ... ...- . -. -.. / .--- .-.-.- / .-. --- -... .. -. ... --- -. /  - .... . / ... . -. .- - . /  -- .-. .-.-.- / ... ...- . -. -.. / .--- .-.-.- / .-. --- -... .. -. ... --- -. /  -. .. ... --. .- .----. .- / - .-. . .- - -.-- /  -- .-. .-.-.- / -.. .- .-. .-. . .-.. / ... - .. -. ... --- -. /  - .... . / ... -. --- .-- -... .. .-. -.. ... /  -- .-. .-.-.- / -. . .-.. ... --- -. / .-. .. .. ... /  --. . -. . - .. -.-. .- .-.. .-.. -.-- / -- --- -.. .. ..-. .. . -.. / ..-. --- --- -.. / .--. .-. --- -.. ..- -.-. - ... /  -- ... .-.-.- / -- .- .-. .-.. . -. . / .--- . -. -. .. -. --. ... /  ..-. --- --- -.. / .-.. .- -... . .-.. .-.. .. -. --. /  -- ... .-.-.- / -- .- .-. .-.. . -. . / .--- . -. -. .. -. --. ... /  --.- ..- . ... - .. --- -. ... / --- -. / - .... . / --- .-. -.. . .-. / .--. .- .--. . .-. /  -- .-. .-.-.- / -.. . .-. . -.- / .-.. . . /  --. --- ...- . .-. -. -- . -. - / --- .-. -.. . .-. ... /  -.-. .- -. .- -.. .- / . .-.. . -.-. - .. --- -. ... / .- -.-. - /  -... .. .-.. .-.. / -.-. -....- ..--- .-.-.- / .-- . / .-- .. .-.. .-.. / --. . - / - .... . / .--. .- .-. - .. -.-. ..- .-.. .- .-. ... / --- -. / --- -. - .- .-. .. --- .----. ... / .--. --- ... .. - .. --- -. / .- -. -.. / .-. . ... .--. --- -. -.. / - --- / - .... . / .... --- -. .-.-.- / - .... . ... . / ....- ----- / . -.-. --- -. --- -- .. . ... / .- -.-. -.-. --- ..- -. - / ..-. --- .-. / ---.. .....  / --- ..-. / - .... . / .-- --- .-. .-.. -.. .----. ... / .- -. -. ..- .- .-.. / ...-..- ..... ----- ----- / -... .. .-.. .-.. .. --- -. / ..- .-.-.- ... .-.-.- / - .-. .- -.. . / .. -. / .. - / .--. .-. --- -.. ..- -.-. - ... .-.-.- / .. - / .. ... / .- / -.-. .-.. .- ... ... .. -.-. / . -..- .- -- .--. .-.. . / --- ..-. / - .... . / --. --- ...- . .-. -. -- . -. - / .-. . ... .--. --- -. -.. .. -. --. / .-- .. - .... / .- .-.. .- -.-. .-. .. - -.-- / - --- / .--. .-. . ... ... ..- .-. . / -.-. --- -- .. -. --. / ..-. .-. --- -- / -- . -- -... . .-. ... / --- ..-. / .--. .- .-. .-.. .. .- -- . -. - .-.-.- / -- ... .-.-.- / .- .-.. . -..- .- / -- -.-. -.. --- -. --- ..- --. .... / -.--. .... .- .-.. .. ..-. .- -..- --..-- / -. -.. .--. -.--.- ---...  -- .-. .-.-.- / ... .--. . .- -.- . .-. --..-- / - .... . / .--. .-. .. -- . / -- .. -. .. ... - . .-. / -... --- .- ... - ... / .- -... --- ..- - / -... .- .-.. .- -. -.-. .. -. --. / - .... . / ..-. . -.. . .-. .- - .. --- -. / -... ..- - / .... .. ... / -.-. ..- - ... / .... .- ...- . / -.-. .-. . .- - . -.. / .- / -.-. .- -. .- -.. .- / - .... .- - / .. ... / -.. .- -. --. . .-. --- ..- ... .-.. -.-- / --- ..- - / --- ..-. / -... .- .-.. .- -. -.-. . .-.-.-''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Base64_BEKmOXTS():
-    # {'PlainText Sentences': 'And yet our communities, whether on the coasts or the prairies, whether in the woodlands or on the northern tundra, show the same friendliness, openness, and generosity.', 'Encrypted Texts': {'PlainText': 'And yet our communities, whether on the coasts or the prairies, whether in the woodlands or on the northern tundra, show the same friendliness, openness, and generosity.', 'EncryptedText': 'QW5kIHlldCBvdXIgY29tbXVuaXRpZXMsIHdoZXRoZXIgb24gdGhlIGNvYXN0cyBvciB0aGUgcHJhaXJpZXMsIHdoZXRoZXIgaW4gdGhlIHdvb2RsYW5kcyBvciBvbiB0aGUgbm9ydGhlcm4gdHVuZHJhLCBzaG93IHRoZSBzYW1lIGZyaWVuZGxpbmVzcywgb3Blbm5lc3MsIGFuZCBnZW5lcm9zaXR5Lg==', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''QW5kIHlldCBvdXIgY29tbXVuaXRpZXMsIHdoZXRoZXIgb24gdGhlIGNvYXN0cyBvciB0aGUgcHJhaXJpZXMsIHdoZXRoZXIgaW4gdGhlIHdvb2RsYW5kcyBvciBvbiB0aGUgbm9ydGhlcm4gdHVuZHJhLCBzaG93IHRoZSBzYW1lIGZyaWVuZGxpbmVzcywgb3Blbm5lc3MsIGFuZCBnZW5lcm9zaXR5Lg==''')
+def test_Hex_jMFrjGUK():
+    # {'PlainText Sentences': 'I was involved in a discussion, therefore missing what was said just then. ):\nMr. Speaker, I thank the hon. 135. She says that the commission was operating on misunderstandings of the law. The 10% rule means that for Air Canada, not Canadian Airlines, no single person or body can own more than 10% of Air Canada. I am convinced that the members will not deal with all those important issues, which deserve a response. The Speaker:\nThe hon. Would the minister be good enough to tell the House what she will be saying, on behalf of Canada, at the meeting in Buenos Aires? When they apply for the government aid package they will need to come well equipped. Why do they not like it? It is as if the judges have become desensitized over time because they have seen so much crime in their courts. The government is at the point where it has invested the money wisely and the surpluses being generated now are in fact the property of the Canadian taxpayer. I urge hon. However he did not do it. The spokespeople for the old line federal parties argue that to put such a clause in the constitution would be to merely recognize the sociological fact that Quebec is the homeland of the French language and culture and that Quebec has its civil code which is of course distinct from the English common law. Would it not be a drop in the bucket, but nevertheless significant and valid to say that one way the government could ensure gains in productivity are returned to the people would be through this tax credit or a remittance of taxes to parents wanting their children to fully benefit from activities for youth. It means that when Pauline Marois, the member for Taillon, rose in the National Assembly to vote in favour of the motion, so did the member for Marquette. This is part of the flimflam. It takes the words right out of my mouth to try to figure out why the government felt it had to resort to back to work legislation when there were options before it, when it was a matter of respecting the rights of workers and respecting the role that the labour movement plays in the country.', 'Encrypted Texts': {'PlainText': 'I was involved in a discussion, therefore missing what was said just then. ):\nMr. Speaker, I thank the hon. 135. She says that the commission was operating on misunderstandings of the law. The 10% rule means that for Air Canada, not Canadian Airlines, no single person or body can own more than 10% of Air Canada. I am convinced that the members will not deal with all those important issues, which deserve a response. The Speaker:\nThe hon. Would the minister be good enough to tell the House what she will be saying, on behalf of Canada, at the meeting in Buenos Aires? When they apply for the government aid package they will need to come well equipped. Why do they not like it? It is as if the judges have become desensitized over time because they have seen so much crime in their courts. The government is at the point where it has invested the money wisely and the surpluses being generated now are in fact the property of the Canadian taxpayer. I urge hon. However he did not do it. The spokespeople for the old line federal parties argue that to put such a clause in the constitution would be to merely recognize the sociological fact that Quebec is the homeland of the French language and culture and that Quebec has its civil code which is of course distinct from the English common law. Would it not be a drop in the bucket, but nevertheless significant and valid to say that one way the government could ensure gains in productivity are returned to the people would be through this tax credit or a remittance of taxes to parents wanting their children to fully benefit from activities for youth. It means that when Pauline Marois, the member for Taillon, rose in the National Assembly to vote in favour of the motion, so did the member for Marquette. This is part of the flimflam. It takes the words right out of my mouth to try to figure out why the government felt it had to resort to back to work legislation when there were options before it, when it was a matter of respecting the rights of workers and respecting the role that the labour movement plays in the country.', 'EncryptedText': '492077617320696e766f6c76656420696e20612064697363757373696f6e2c207468657265666f7265206d697373696e672077686174207761732073616964206a757374207468656e2e20293a0a4d722e20537065616b65722c2049207468616e6b2074686520686f6e2e203133352e20536865207361797320746861742074686520636f6d6d697373696f6e20776173206f7065726174696e67206f6e206d6973756e6465727374616e64696e6773206f6620746865206c61772e20546865203130252072756c65206d65616e73207468617420666f72204169722043616e6164612c206e6f742043616e616469616e204169726c696e65732c206e6f2073696e676c6520706572736f6e206f7220626f64792063616e206f776e206d6f7265207468616e20313025206f66204169722043616e6164612e204920616d20636f6e76696e636564207468617420746865206d656d626572732077696c6c206e6f74206465616c207769746820616c6c2074686f736520696d706f7274616e74206973737565732c2077686963682064657365727665206120726573706f6e73652e2054686520537065616b65723a0a54686520686f6e2e20576f756c6420746865206d696e697374657220626520676f6f6420656e6f75676820746f2074656c6c2074686520486f7573652077686174207368652077696c6c20626520736179696e672c206f6e20626568616c66206f662043616e6164612c20617420746865206d656574696e6720696e204275656e6f732041697265733f205768656e2074686579206170706c7920666f722074686520676f7665726e6d656e7420616964207061636b61676520746865792077696c6c206e65656420746f20636f6d652077656c6c2065717569707065642e2057687920646f2074686579206e6f74206c696b652069743f20497420697320617320696620746865206a75646765732068617665206265636f6d6520646573656e736974697a6564206f7665722074696d65206265636175736520746865792068617665207365656e20736f206d756368206372696d6520696e20746865697220636f757274732e2054686520676f7665726e6d656e742069732061742074686520706f696e742077686572652069742068617320696e76657374656420746865206d6f6e657920776973656c7920616e642074686520737572706c75736573206265696e672067656e657261746564206e6f772061726520696e2066616374207468652070726f7065727479206f66207468652043616e616469616e2074617870617965722e2049207572676520686f6e2e20486f776576657220686520646964206e6f7420646f2069742e205468652073706f6b657370656f706c6520666f7220746865206f6c64206c696e65206665646572616c2070617274696573206172677565207468617420746f207075742073756368206120636c6175736520696e2074686520636f6e737469747574696f6e20776f756c6420626520746f206d6572656c79207265636f676e697a652074686520736f63696f6c6f676963616c20666163742074686174205175656265632069732074686520686f6d656c616e64206f6620746865204672656e6368206c616e677561676520616e642063756c7475726520616e64207468617420517565626563206861732069747320636976696c20636f6465207768696368206973206f6620636f757273652064697374696e63742066726f6d2074686520456e676c69736820636f6d6d6f6e206c61772e20576f756c64206974206e6f7420626520612064726f7020696e20746865206275636b65742c20627574206e657665727468656c657373207369676e69666963616e7420616e642076616c696420746f207361792074686174206f6e65207761792074686520676f7665726e6d656e7420636f756c6420656e73757265206761696e7320696e2070726f647563746976697479206172652072657475726e656420746f207468652070656f706c6520776f756c64206265207468726f75676820746869732074617820637265646974206f7220612072656d697474616e6365206f6620746178657320746f20706172656e74732077616e74696e67207468656972206368696c6472656e20746f2066756c6c792062656e656669742066726f6d206163746976697469657320666f7220796f7574682e204974206d65616e732074686174207768656e205061756c696e65204d61726f69732c20746865206d656d62657220666f72205461696c6c6f6e2c20726f736520696e20746865204e6174696f6e616c20417373656d626c7920746f20766f746520696e206661766f7572206f6620746865206d6f74696f6e2c20736f2064696420746865206d656d62657220666f72204d61727175657474652e20546869732069732070617274206f662074686520666c696d666c616d2e2049742074616b65732074686520776f726473207269676874206f7574206f66206d79206d6f75746820746f2074727920746f20666967757265206f7574207768792074686520676f7665726e6d656e742066656c742069742068616420746f207265736f727420746f206261636b20746f20776f726b206c656769736c6174696f6e207768656e2074686572652077657265206f7074696f6e73206265666f72652069742c207768656e206974207761732061206d6174746572206f662072657370656374696e672074686520726967687473206f6620776f726b65727320616e642072657370656374696e672074686520726f6c65207468617420746865206c61626f7572206d6f76656d656e7420706c61797320696e2074686520636f756e7472792e', 'CipherUsed': 'Hex'}}
+    cfg = make_default_config('''492077617320696e766f6c76656420696e20612064697363757373696f6e2c207468657265666f7265206d697373696e672077686174207761732073616964206a757374207468656e2e20293a0a4d722e20537065616b65722c2049207468616e6b2074686520686f6e2e203133352e20536865207361797320746861742074686520636f6d6d697373696f6e20776173206f7065726174696e67206f6e206d6973756e6465727374616e64696e6773206f6620746865206c61772e20546865203130252072756c65206d65616e73207468617420666f72204169722043616e6164612c206e6f742043616e616469616e204169726c696e65732c206e6f2073696e676c6520706572736f6e206f7220626f64792063616e206f776e206d6f7265207468616e20313025206f66204169722043616e6164612e204920616d20636f6e76696e636564207468617420746865206d656d626572732077696c6c206e6f74206465616c207769746820616c6c2074686f736520696d706f7274616e74206973737565732c2077686963682064657365727665206120726573706f6e73652e2054686520537065616b65723a0a54686520686f6e2e20576f756c6420746865206d696e697374657220626520676f6f6420656e6f75676820746f2074656c6c2074686520486f7573652077686174207368652077696c6c20626520736179696e672c206f6e20626568616c66206f662043616e6164612c20617420746865206d656574696e6720696e204275656e6f732041697265733f205768656e2074686579206170706c7920666f722074686520676f7665726e6d656e7420616964207061636b61676520746865792077696c6c206e65656420746f20636f6d652077656c6c2065717569707065642e2057687920646f2074686579206e6f74206c696b652069743f20497420697320617320696620746865206a75646765732068617665206265636f6d6520646573656e736974697a6564206f7665722074696d65206265636175736520746865792068617665207365656e20736f206d756368206372696d6520696e20746865697220636f757274732e2054686520676f7665726e6d656e742069732061742074686520706f696e742077686572652069742068617320696e76657374656420746865206d6f6e657920776973656c7920616e642074686520737572706c75736573206265696e672067656e657261746564206e6f772061726520696e2066616374207468652070726f7065727479206f66207468652043616e616469616e2074617870617965722e2049207572676520686f6e2e20486f776576657220686520646964206e6f7420646f2069742e205468652073706f6b657370656f706c6520666f7220746865206f6c64206c696e65206665646572616c2070617274696573206172677565207468617420746f207075742073756368206120636c6175736520696e2074686520636f6e737469747574696f6e20776f756c6420626520746f206d6572656c79207265636f676e697a652074686520736f63696f6c6f676963616c20666163742074686174205175656265632069732074686520686f6d656c616e64206f6620746865204672656e6368206c616e677561676520616e642063756c7475726520616e64207468617420517565626563206861732069747320636976696c20636f6465207768696368206973206f6620636f757273652064697374696e63742066726f6d2074686520456e676c69736820636f6d6d6f6e206c61772e20576f756c64206974206e6f7420626520612064726f7020696e20746865206275636b65742c20627574206e657665727468656c657373207369676e69666963616e7420616e642076616c696420746f207361792074686174206f6e65207761792074686520676f7665726e6d656e7420636f756c6420656e73757265206761696e7320696e2070726f647563746976697479206172652072657475726e656420746f207468652070656f706c6520776f756c64206265207468726f75676820746869732074617820637265646974206f7220612072656d697474616e6365206f6620746178657320746f20706172656e74732077616e74696e67207468656972206368696c6472656e20746f2066756c6c792062656e656669742066726f6d206163746976697469657320666f7220796f7574682e204974206d65616e732074686174207768656e205061756c696e65204d61726f69732c20746865206d656d62657220666f72205461696c6c6f6e2c20726f736520696e20746865204e6174696f6e616c20417373656d626c7920746f20766f746520696e206661766f7572206f6620746865206d6f74696f6e2c20736f2064696420746865206d656d62657220666f72204d61727175657474652e20546869732069732070617274206f662074686520666c696d666c616d2e2049742074616b65732074686520776f726473207269676874206f7574206f66206d79206d6f75746820746f2074727920746f20666967757265206f7574207768792074686520676f7665726e6d656e742066656c742069742068616420746f207265736f727420746f206261636b20746f20776f726b206c656769736c6174696f6e207768656e2074686572652077657265206f7074696f6e73206265666f72652069742c207768656e206974207761732061206d6174746572206f662072657370656374696e672074686520726967687473206f6620776f726b65727320616e642072657370656374696e672074686520726f6c65207468617420746865206c61626f7572206d6f76656d656e7420706c61797320696e2074686520636f756e7472792e''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
     assert result["IsPlaintext?"] == True 
 
-def test_Base64_sWSSyyAO():
-    # {'PlainText Sentences': 'The polling booths are now open to vote.', 'Encrypted Texts': {'PlainText': 'The polling booths are now open to vote.', 'EncryptedText': 'VGhlIHBvbGxpbmcgYm9vdGhzIGFyZSBub3cgb3BlbiB0byB2b3RlLg==', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''VGhlIHBvbGxpbmcgYm9vdGhzIGFyZSBub3cgb3BlbiB0byB2b3RlLg==''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_YoluzuxY():
-    # {'PlainText Sentences': 'I am, as you know, a servant of this House.', 'Encrypted Texts': {'PlainText': 'I am, as you know, a servant of this House.', 'EncryptedText': 'JEQGC3JMEBQXGIDZN52SA23ON53SYIDBEBZWK4TWMFXHIIDPMYQHI2DJOMQEQ33VONSS4===', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''JEQGC3JMEBQXGIDZN52SA23ON53SYIDBEBZWK4TWMFXHIIDPMYQHI2DJOMQEQ33VONSS4===''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Ascii_wVLLNXXH():
-    # {'PlainText Sentences': 'The Government has regained the ability to address priorities of Canadians while living within its means.', 'Encrypted Texts': {'PlainText': 'The Government has regained the ability to address priorities of Canadians while living within its means.', 'EncryptedText': '84 104 101 32 71 111 118 101 114 110 109 101 110 116 32 104 97 115 32 114 101 103 97 105 110 101 100 32 116 104 101 32 97 98 105 108 105 116 121 32 116 111 32 97 100 100 114 101 115 115 32 112 114 105 111 114 105 116 105 101 115 32 111 102 32 67 97 110 97 100 105 97 110 115 32 119 104 105 108 101 32 108 105 118 105 110 103 32 119 105 116 104 105 110 32 105 116 115 32 109 101 97 110 115 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''84 104 101 32 71 111 118 101 114 110 109 101 110 116 32 104 97 115 32 114 101 103 97 105 110 101 100 32 116 104 101 32 97 98 105 108 105 116 121 32 116 111 32 97 100 100 114 101 115 115 32 112 114 105 111 114 105 116 105 101 115 32 111 102 32 67 97 110 97 100 105 97 110 115 32 119 104 105 108 101 32 108 105 118 105 110 103 32 119 105 116 104 105 110 32 105 116 115 32 109 101 97 110 115 46''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_ktHWRXDs():
-    # {'PlainText Sentences': 'You have come here because you have been chosen to be the spokespersons for Canadians across the land.', 'Encrypted Texts': {'PlainText': 'You have come here because you have been chosen to be the spokespersons for Canadians across the land.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_VqVnQkLp():
-    # {'PlainText Sentences': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'Encrypted Texts': {'PlainText': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'EncryptedText': '5374696d756c6174696e67206a6f62206372656174696f6e20616e642065636f6e6f6d69632067726f77746820686173206265656e2c2072656d61696e732c20616e642077696c6c20636f6e74696e756520746f2062652061206d616a6f72206f626a656374697665206f662074686520476f7665726e6d656e74206f662043616e6164612e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''5374696d756c6174696e67206a6f62206372656174696f6e20616e642065636f6e6f6d69632067726f77746820686173206265656e2c2072656d61696e732c20616e642077696c6c20636f6e74696e756520746f2062652061206d616a6f72206f626a656374697665206f662074686520476f7665726e6d656e74206f662043616e6164612e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_uPKNNjdY():
-    # {'PlainText Sentences': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'Encrypted Texts': {'PlainText': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'EncryptedText': 'KN2GS3LVNRQXI2LOM4QGU33CEBRXEZLBORUW63RAMFXGIIDFMNXW433NNFRSAZ3SN53XI2BANBQXGIDCMVSW4LBAOJSW2YLJNZZSYIDBNZSCA53JNRWCAY3PNZ2GS3TVMUQHI3ZAMJSSAYJANVQWU33SEBXWE2TFMN2GS5TFEBXWMIDUNBSSAR3POZSXE3TNMVXHIIDPMYQEGYLOMFSGCLQ=', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''KN2GS3LVNRQXI2LOM4QGU33CEBRXEZLBORUW63RAMFXGIIDFMNXW433NNFRSAZ3SN53XI2BANBQXGIDCMVSW4LBAOJSW2YLJNZZSYIDBNZSCA53JNRWCAY3PNZ2GS3TVMUQHI3ZAMJSSAYJANVQWU33SEBXWE2TFMN2GS5TFEBXWMIDUNBSSAR3POZSXE3TNMVXHIIDPMYQEGYLOMFSGCLQ=''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_TXIYjGNV():
-    # {'PlainText Sentences': 'members who have not voted and wish to do so, will they please vote now?', 'Encrypted Texts': {'PlainText': 'members who have not voted and wish to do so, will they please vote now?', 'EncryptedText': '1101101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1110111 1101000 1101111 100000 1101000 1100001 1110110 1100101 100000 1101110 1101111 1110100 100000 1110110 1101111 1110100 1100101 1100100 100000 1100001 1101110 1100100 100000 1110111 1101001 1110011 1101000 100000 1110100 1101111 100000 1100100 1101111 100000 1110011 1101111 101100 100000 1110111 1101001 1101100 1101100 100000 1110100 1101000 1100101 1111001 100000 1110000 1101100 1100101 1100001 1110011 1100101 100000 1110110 1101111 1110100 1100101 100000 1101110 1101111 1110111 111111', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1101101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1110111 1101000 1101111 100000 1101000 1100001 1110110 1100101 100000 1101110 1101111 1110100 100000 1110110 1101111 1110100 1100101 1100100 100000 1100001 1101110 1100100 100000 1110111 1101001 1110011 1101000 100000 1110100 1101111 100000 1100100 1101111 100000 1110011 1101111 101100 100000 1110111 1101001 1101100 1101100 100000 1110100 1101000 1100101 1111001 100000 1110000 1101100 1100101 1100001 1110011 1100101 100000 1110110 1101111 1110100 1100101 100000 1101110 1101111 1110111 111111''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_BbJjGYPX():
-    # {'PlainText Sentences': 'The Clerk of the House:\nPursuant to Standing Order 3, I invite Mr. Caccia, member for the electoral district of Davenport, to take the chair and preside over the election of a Speaker.', 'Encrypted Texts': {'PlainText': 'The Clerk of the House:\nPursuant to Standing Order 3, I invite Mr. Caccia, member for the electoral district of Davenport, to take the chair and preside over the election of a Speaker.', 'EncryptedText': '1010100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 111010 1010 1010000 1110101 1110010 1110011 1110101 1100001 1101110 1110100 100000 1110100 1101111 100000 1010011 1110100 1100001 1101110 1100100 1101001 1101110 1100111 100000 1001111 1110010 1100100 1100101 1110010 100000 110011 101100 100000 1001001 100000 1101001 1101110 1110110 1101001 1110100 1100101 100000 1001101 1110010 101110 100000 1000011 1100001 1100011 1100011 1101001 1100001 101100 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100101 1101100 1100101 1100011 1110100 1101111 1110010 1100001 1101100 100000 1100100 1101001 1110011 1110100 1110010 1101001 1100011 1110100 100000 1101111 1100110 100000 1000100 1100001 1110110 1100101 1101110 1110000 1101111 1110010 1110100 101100 100000 1110100 1101111 100000 1110100 1100001 1101011 1100101 100000 1110100 1101000 1100101 100000 1100011 1101000 1100001 1101001 1110010 100000 1100001 1101110 1100100 100000 1110000 1110010 1100101 1110011 1101001 1100100 1100101 100000 1101111 1110110 1100101 1110010 100000 1110100 1101000 1100101 100000 1100101 1101100 1100101 1100011 1110100 1101001 1101111 1101110 100000 1101111 1100110 100000 1100001 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1010100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 111010 1010 1010000 1110101 1110010 1110011 1110101 1100001 1101110 1110100 100000 1110100 1101111 100000 1010011 1110100 1100001 1101110 1100100 1101001 1101110 1100111 100000 1001111 1110010 1100100 1100101 1110010 100000 110011 101100 100000 1001001 100000 1101001 1101110 1110110 1101001 1110100 1100101 100000 1001101 1110010 101110 100000 1000011 1100001 1100011 1100011 1101001 1100001 101100 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100101 1101100 1100101 1100011 1110100 1101111 1110010 1100001 1101100 100000 1100100 1101001 1110011 1110100 1110010 1101001 1100011 1110100 100000 1101111 1100110 100000 1000100 1100001 1110110 1100101 1101110 1110000 1101111 1110010 1110100 101100 100000 1110100 1101111 100000 1110100 1100001 1101011 1100101 100000 1110100 1101000 1100101 100000 1100011 1101000 1100001 1101001 1110010 100000 1100001 1101110 1100100 100000 1110000 1110010 1100101 1110011 1101001 1100100 1100101 100000 1101111 1110110 1100101 1110010 100000 1110100 1101000 1100101 100000 1100101 1101100 1100101 1100011 1110100 1101001 1101111 1101110 100000 1101111 1100110 100000 1100001 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_vjsxOfRG():
-    # {'PlainText Sentences': 'It is now my great pleasure to invite the hon.', 'Encrypted Texts': {'PlainText': 'It is now my great pleasure to invite the hon.', 'EncryptedText': '4974206973206E6F77206D7920677265617420706C65617375726520746F20696E766974652074686520686F6E2E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''4974206973206E6F77206D7920677265617420706C65617375726520746F20696E766974652074686520686F6E2E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_fxgwpFkI():
-    # {'PlainText Sentences': "It will introduce legislation to implement the proposed changes to the Canada Pension Plan and the new Seniors Benefit in order to ensure Canada's public pension system remains sustainable in the 21st century.", 'Encrypted Texts': {'PlainText': "It will introduce legislation to implement the proposed changes to the Canada Pension Plan and the new Seniors Benefit in order to ensure Canada's public pension system remains sustainable in the 21st century.", 'EncryptedText': '.. - / .-- .. .-.. .-.. / .. -. - .-. --- -.. ..- -.-. . / .-.. . --. .. ... .-.. .- - .. --- -. / - --- / .. -- .--. .-.. . -- . -. - / - .... . / .--. .-. --- .--. --- ... . -.. / -.-. .... .- -. --. . ... / - --- / - .... . / -.-. .- -. .- -.. .- / .--. . -. ... .. --- -. / .--. .-.. .- -. / .- -. -.. / - .... . / -. . .-- / ... . -. .. --- .-. ... / -... . -. . ..-. .. - / .. -. / --- .-. -.. . .-. / - --- / . -. ... ..- .-. . / -.-. .- -. .- -.. .- .----. ... / .--. ..- -... .-.. .. -.-. / .--. . -. ... .. --- -. / ... -.-- ... - . -- / .-. . -- .- .. -. ... / ... ..- ... - .- .. -. .- -... .-.. . / .. -. / - .... . / ..--- .---- ... - / -.-. . -. - ..- .-. -.-- .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''.. - / .-- .. .-.. .-.. / .. -. - .-. --- -.. ..- -.-. . / .-.. . --. .. ... .-.. .- - .. --- -. / - --- / .. -- .--. .-.. . -- . -. - / - .... . / .--. .-. --- .--. --- ... . -.. / -.-. .... .- -. --. . ... / - --- / - .... . / -.-. .- -. .- -.. .- / .--. . -. ... .. --- -. / .--. .-.. .- -. / .- -. -.. / - .... . / -. . .-- / ... . -. .. --- .-. ... / -... . -. . ..-. .. - / .. -. / --- .-. -.. . .-. / - --- / . -. ... ..- .-. . / -.-. .- -. .- -.. .- .----. ... / .--. ..- -... .-.. .. -.-. / .--. . -. ... .. --- -. / ... -.-- ... - . -- / .-. . -- .- .. -. ... / ... ..- ... - .- .. -. .- -... .-.. . / .. -. / - .... . / ..--- .---- ... - / -.-. . -. - ..- .-. -.-- .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_cdfUioTo():
-    # {'PlainText Sentences': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'Encrypted Texts': {'PlainText': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'EncryptedText': 'IFXGIIDUNBSSASDPOVZWKIDCMVUW4ZZAOJSXI5LSNZSWIIDUN4QHI2DFEBBW63LNN5XHGIDDNBQW2YTFOI5CACSUNBSSAU3QMVQWWZLSHIFE64TEMVZCYIDQNRSWC43FFY======', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''IFXGIIDUNBSSASDPOVZWKIDCMVUW4ZZAOJSXI5LSNZSWIIDUN4QHI2DFEBBW63LNN5XHGIDDNBQW2YTFOI5CACSUNBSSAU3QMVQWWZLSHIFE64TEMVZCYIDQNRSWC43FFY======''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_mhvLTVuR():
-    # {'PlainText Sentences': 'Some hon.', 'Encrypted Texts': {'PlainText': 'Some hon.', 'EncryptedText': '536f6d6520686f6e2e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''536f6d6520686f6e2e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_fsMzUIin():
-    # {'PlainText Sentences': 'The names just announced are on the second ballot.', 'Encrypted Texts': {'PlainText': 'The names just announced are on the second ballot.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_iHOEejiu():
-    # {'PlainText Sentences': 'As we are now going to commence voting, I would remind the honourable members to print the first and last names of their candidate on the ballot paper.', 'Encrypted Texts': {'PlainText': 'As we are now going to commence voting, I would remind the honourable members to print the first and last names of their candidate on the ballot paper.', 'EncryptedText': '.repap tollab eht no etadidnac rieht fo seman tsal dna tsrif eht tnirp ot srebmem elbaruonoh eht dnimer dluow I ,gnitov ecnemmoc ot gniog won era ew sA', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.repap tollab eht no etadidnac rieht fo seman tsal dna tsrif eht tnirp ot srebmem elbaruonoh eht dnimer dluow I ,gnitov ecnemmoc ot gniog won era ew sA''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_EUHjZQSV():
-    # {'PlainText Sentences': 'Our citizens have the qualities that are needed to succeed in the 21st century: \nWe have the values of sharing and mutual help.', 'Encrypted Texts': {'PlainText': 'Our citizens have the qualities that are needed to succeed in the 21st century: \nWe have the values of sharing and mutual help.', 'EncryptedText': '--- ..- .-. / -.-. .. - .. --.. . -. ... / .... .- ...- . / - .... . / --.- ..- .- .-.. .. - .. . ... / - .... .- - / .- .-. . / -. . . -.. . -.. / - --- / ... ..- -.-. -.-. . . -.. / .. -. / - .... . / ..--- .---- ... - / -.-. . -. - ..- .-. -.-- ---... /  .-- . / .... .- ...- . / - .... . / ...- .- .-.. ..- . ... / --- ..-. / ... .... .- .-. .. -. --. / .- -. -.. / -- ..- - ..- .- .-.. / .... . .-.. .--. .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''--- ..- .-. / -.-. .. - .. --.. . -. ... / .... .- ...- . / - .... . / --.- ..- .- .-.. .. - .. . ... / - .... .- - / .- .-. . / -. . . -.. . -.. / - --- / ... ..- -.-. -.-. . . -.. / .. -. / - .... . / ..--- .---- ... - / -.-. . -. - ..- .-. -.-- ---... /  .-- . / .... .- ...- . / - .... . / ...- .- .-.. ..- . ... / --- ..-. / ... .... .- .-. .. -. --. / .- -. -.. / -- ..- - ..- .- .-.. / .... . .-.. .--. .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Ascii_HLlQkDuG():
-    # {'PlainText Sentences': '(The sitting of the House was suspended at 2.06 p.m.) \nSITTING RESUMED \nThe House resumed at 2.29 p.m.', 'Encrypted Texts': {'PlainText': '(The sitting of the House was suspended at 2.06 p.m.) \nSITTING RESUMED \nThe House resumed at 2.29 p.m.', 'EncryptedText': '40 84 104 101 32 115 105 116 116 105 110 103 32 111 102 32 116 104 101 32 72 111 117 115 101 32 119 97 115 32 115 117 115 112 101 110 100 101 100 32 97 116 32 50 46 48 54 32 112 46 109 46 41 32 10 83 73 84 84 73 78 71 32 82 69 83 85 77 69 68 32 10 84 104 101 32 72 111 117 115 101 32 114 101 115 117 109 101 100 32 97 116 32 50 46 50 57 32 112 46 109 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''40 84 104 101 32 115 105 116 116 105 110 103 32 111 102 32 116 104 101 32 72 111 117 115 101 32 119 97 115 32 115 117 115 112 101 110 100 101 100 32 97 116 32 50 46 48 54 32 112 46 109 46 41 32 10 83 73 84 84 73 78 71 32 82 69 83 85 77 69 68 32 10 84 104 101 32 72 111 117 115 101 32 114 101 115 117 109 101 100 32 97 116 32 50 46 50 57 32 112 46 109 46''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_vOGoBrgy():
-    # {'PlainText Sentences': 'members:\nHear, hear.', 'Encrypted Texts': {'PlainText': 'members:\nHear, hear.', 'EncryptedText': '6D656D626572733A0A486561722C20686561722E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''6D656D626572733A0A486561722C20686561722E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_AGMQocaY():
-    # {'PlainText Sentences': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'Encrypted Texts': {'PlainText': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'EncryptedText': '1001001 100000 1110111 1101111 1110101 1101100 1100100 100000 1100001 1101100 1110011 1101111 100000 1100001 1110011 1101011 100000 1110100 1101000 1100001 1110100 100000 1111001 1101111 1110101 100000 1110011 1100101 1100101 1101011 100000 1110100 1101000 1100101 100000 1100011 1101111 1101110 1110011 1100101 1101110 1110100 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1110100 1101111 100000 1101101 1100001 1101011 1100101 100000 1111001 1101111 1110101 1110010 100000 1100101 1101100 1100101 1100011 1110100 1101001 1101111 1101110 100000 1110101 1101110 1100001 1101110 1101001 1101101 1101111 1110101 1110011 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1001001 100000 1110111 1101111 1110101 1101100 1100100 100000 1100001 1101100 1110011 1101111 100000 1100001 1110011 1101011 100000 1110100 1101000 1100001 1110100 100000 1111001 1101111 1110101 100000 1110011 1100101 1100101 1101011 100000 1110100 1101000 1100101 100000 1100011 1101111 1101110 1110011 1100101 1101110 1110100 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1110100 1101111 100000 1101101 1100001 1101011 1100101 100000 1111001 1101111 1110101 1110010 100000 1100101 1101100 1100101 1100011 1110100 1101001 1101111 1101110 100000 1110101 1101110 1100001 1101110 1101001 1101101 1101111 1110101 1110011 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_mwiYzFNc():
-    # {'PlainText Sentences': 'Introduction and first reading \nRight Hon.', 'Encrypted Texts': {'PlainText': 'Introduction and first reading \nRight Hon.', 'EncryptedText': '496e74726f64756374696f6e20616e642066697273742072656164696e67200a526967687420486f6e2e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''496e74726f64756374696f6e20616e642066697273742072656164696e67200a526967687420486f6e2e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_fwRwcKhz():
-    # {'PlainText Sentences': 'It is to strengthen and unite this country by joining in the common purpose of keeping Canada one of the best places in the world in which to live.', 'Encrypted Texts': {'PlainText': 'It is to strengthen and unite this country by joining in the common purpose of keeping Canada one of the best places in the world in which to live.', 'EncryptedText': '1001001 1110100 100000 1101001 1110011 100000 1110100 1101111 100000 1110011 1110100 1110010 1100101 1101110 1100111 1110100 1101000 1100101 1101110 100000 1100001 1101110 1100100 100000 1110101 1101110 1101001 1110100 1100101 100000 1110100 1101000 1101001 1110011 100000 1100011 1101111 1110101 1101110 1110100 1110010 1111001 100000 1100010 1111001 100000 1101010 1101111 1101001 1101110 1101001 1101110 1100111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1100011 1101111 1101101 1101101 1101111 1101110 100000 1110000 1110101 1110010 1110000 1101111 1110011 1100101 100000 1101111 1100110 100000 1101011 1100101 1100101 1110000 1101001 1101110 1100111 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1101111 1101110 1100101 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100101 1110011 1110100 100000 1110000 1101100 1100001 1100011 1100101 1110011 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1110111 1101111 1110010 1101100 1100100 100000 1101001 1101110 100000 1110111 1101000 1101001 1100011 1101000 100000 1110100 1101111 100000 1101100 1101001 1110110 1100101 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1001001 1110100 100000 1101001 1110011 100000 1110100 1101111 100000 1110011 1110100 1110010 1100101 1101110 1100111 1110100 1101000 1100101 1101110 100000 1100001 1101110 1100100 100000 1110101 1101110 1101001 1110100 1100101 100000 1110100 1101000 1101001 1110011 100000 1100011 1101111 1110101 1101110 1110100 1110010 1111001 100000 1100010 1111001 100000 1101010 1101111 1101001 1101110 1101001 1101110 1100111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1100011 1101111 1101101 1101101 1101111 1101110 100000 1110000 1110101 1110010 1110000 1101111 1110011 1100101 100000 1101111 1100110 100000 1101011 1100101 1100101 1110000 1101001 1101110 1100111 100000 1000011 1100001 1101110 1100001 1100100 1100001 100000 1101111 1101110 1100101 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100101 1110011 1110100 100000 1110000 1101100 1100001 1100011 1100101 1110011 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1110111 1101111 1110010 1101100 1100100 100000 1101001 1101110 100000 1110111 1101000 1101001 1100011 1101000 100000 1110100 1101111 100000 1101100 1101001 1110110 1100101 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_yllFrTMd():
-    # {'PlainText Sentences': 'Canada represents a triumph of the human spirit, bringing together the best of what people can do.', 'Encrypted Texts': {'PlainText': 'Canada represents a triumph of the human spirit, bringing together the best of what people can do.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_rCWnuEOg():
-    # {'PlainText Sentences': 'Do members agree with the terms of the motion?', 'Encrypted Texts': {'PlainText': 'Do members agree with the terms of the motion?', 'EncryptedText': '-.. --- / -- . -- -... . .-. ... / .- --. .-. . . / .-- .. - .... / - .... . / - . .-. -- ... / --- ..-. / - .... . / -- --- - .. --- -. ..--..', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''-.. --- / -- . -- -... . .-. ... / .- --. .-. . . / .-- .. - .... / - .... . / - . .-. -- ... / --- ..-. / - .... . / -- --- - .. --- -. ..--..''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_UXbFCjNc():
-    # {'PlainText Sentences': 'I have considered you a friend.', 'Encrypted Texts': {'PlainText': 'I have considered you a friend.', 'EncryptedText': '49206861766520636f6e7369646572656420796f75206120667269656e642e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''49206861766520636f6e7369646572656420796f75206120667269656e642e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_sGOJPXPy():
-    # {'PlainText Sentences': 'I have never been in a Parliament that has not been lively.', 'Encrypted Texts': {'PlainText': 'I have never been in a Parliament that has not been lively.', 'EncryptedText': '.. / .... .- ...- . / -. . ...- . .-. / -... . . -. / .. -. / .- / .--. .- .-. .-.. .. .- -- . -. - / - .... .- - / .... .- ... / -. --- - / -... . . -. / .-.. .. ...- . .-.. -.-- .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''.. / .... .- ...- . / -. . ...- . .-. / -... . . -. / .. -. / .- / .--. .- .-. .-.. .. .- -- . -. - / - .... .- - / .... .- ... / -. --- - / -... . . -. / .-.. .. ...- . .-.. -.-- .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_zwUcAZuy():
-    # {'PlainText Sentences': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'Encrypted Texts': {'PlainText': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'EncryptedText': '4974206973206e6f7720696e2074686520706f736974696f6e20746f206d616b652073747261746567696320696e766573746d656e747320696e206f7572206368696c6472656e20616e64206f757220796f7574682c206f7572206865616c74682c206f757220636f6d6d756e69746965732c20616e64206f7572206b6e6f776c6564676520616e642063726561746976697479207768696c6520636f6e74696e75696e6720746f20696d70726f766520746865206e6174696f6e27732066696e616e6365732e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''4974206973206e6f7720696e2074686520706f736974696f6e20746f206d616b652073747261746567696320696e766573746d656e747320696e206f7572206368696c6472656e20616e64206f757220796f7574682c206f7572206865616c74682c206f757220636f6d6d756e69746965732c20616e64206f7572206b6e6f776c6564676520616e642063726561746976697479207768696c6520636f6e74696e75696e6720746f20696d70726f766520746865206e6174696f6e27732066696e616e6365732e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Ascii_ZgXRGMOV():
-    # {'PlainText Sentences': 'It is very much appreciated and I take it to heart.', 'Encrypted Texts': {'PlainText': 'It is very much appreciated and I take it to heart.', 'EncryptedText': '73 116 32 105 115 32 118 101 114 121 32 109 117 99 104 32 97 112 112 114 101 99 105 97 116 101 100 32 97 110 100 32 73 32 116 97 107 101 32 105 116 32 116 111 32 104 101 97 114 116 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''73 116 32 105 115 32 118 101 114 121 32 109 117 99 104 32 97 112 112 114 101 99 105 97 116 101 100 32 97 110 100 32 73 32 116 97 107 101 32 105 116 32 116 111 32 104 101 97 114 116 46''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_zskfLKlM():
-    # {'PlainText Sentences': 'members please leave the voting area after voting.', 'Encrypted Texts': {'PlainText': 'members please leave the voting area after voting.', 'EncryptedText': '6D656D6265727320706C65617365206C656176652074686520766F74696E67206172656120616674657220766F74696E672E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''6D656D6265727320706C65617365206C656176652074686520766F74696E67206172656120616674657220766F74696E672E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_kJdOtpgr():
-    # {'PlainText Sentences': 'We will pursue this course and take further action to encourage new investment, to create new jobs, and to generate the national wealth necessary to assure Canadians a stable and secure future.', 'Encrypted Texts': {'PlainText': 'We will pursue this course and take further action to encourage new investment, to create new jobs, and to generate the national wealth necessary to assure Canadians a stable and secure future.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_CypOQFQu():
-    # {'PlainText Sentences': "Canadians feel better about their own future and the country's future.", 'Encrypted Texts': {'PlainText': "Canadians feel better about their own future and the country's future.", 'EncryptedText': '43616E616469616E73206665656C206265747465722061626F7574207468656972206F776E2066757475726520616E642074686520636F756E7472792773206675747572652E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''43616E616469616E73206665656C206265747465722061626F7574207468656972206F776E2066757475726520616E642074686520636F756E7472792773206675747572652E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_EknWSccJ():
-    # {'PlainText Sentences': 'I am, as you know, a servant of this House.', 'Encrypted Texts': {'PlainText': 'I am, as you know, a servant of this House.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_mCUtvEjg():
-    # {'PlainText Sentences': 'But governing in the 21st century also means recognizing that no one government can act alone.', 'Encrypted Texts': {'PlainText': 'But governing in the 21st century also means recognizing that no one government can act alone.', 'EncryptedText': '1000010 1110101 1110100 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101001 1101110 1100111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 110010 110001 1110011 1110100 100000 1100011 1100101 1101110 1110100 1110101 1110010 1111001 100000 1100001 1101100 1110011 1101111 100000 1101101 1100101 1100001 1101110 1110011 100000 1110010 1100101 1100011 1101111 1100111 1101110 1101001 1111010 1101001 1101110 1100111 100000 1110100 1101000 1100001 1110100 100000 1101110 1101111 100000 1101111 1101110 1100101 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1100011 1100001 1101110 100000 1100001 1100011 1110100 100000 1100001 1101100 1101111 1101110 1100101 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1000010 1110101 1110100 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101001 1101110 1100111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 110010 110001 1110011 1110100 100000 1100011 1100101 1101110 1110100 1110101 1110010 1111001 100000 1100001 1101100 1110011 1101111 100000 1101101 1100101 1100001 1101110 1110011 100000 1110010 1100101 1100011 1101111 1100111 1101110 1101001 1111010 1101001 1101110 1100111 100000 1110100 1101000 1100001 1110100 100000 1101110 1101111 100000 1101111 1101110 1100101 100000 1100111 1101111 1110110 1100101 1110010 1101110 1101101 1100101 1101110 1110100 100000 1100011 1100001 1101110 100000 1100001 1100011 1110100 100000 1100001 1101100 1101111 1101110 1100101 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_UebHeTyD():
-    # {'PlainText Sentences': 'SUSPENSION OF SITTING \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'Encrypted Texts': {'PlainText': 'SUSPENSION OF SITTING \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'EncryptedText': 'U1VTUEVOU0lPTiBPRiBTSVRUSU5HIApUaGUgUHJlc2lkaW5nIE9mZmljZXIgKE1yLiBDYWNjaWEpOgpPcmRlciwgcGxlYXNlLg==', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''U1VTUEVOU0lPTiBPRiBTSVRUSU5HIApUaGUgUHJlc2lkaW5nIE9mZmljZXIgKE1yLiBDYWNjaWEpOgpPcmRlciwgcGxlYXNlLg==''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_igbMSMIZ():
-    # {'PlainText Sentences': 'Elected by all Canadians and endowed with the legitimacy that this bestows, the Government of Canada will stand up for the shared values of Canadians at home and abroad.', 'Encrypted Texts': {'PlainText': 'Elected by all Canadians and endowed with the legitimacy that this bestows, the Government of Canada will stand up for the shared values of Canadians at home and abroad.', 'EncryptedText': '456C656374656420627920616C6C2043616E616469616E7320616E6420656E646F776564207769746820746865206C65676974696D6163792074686174207468697320626573746F77732C2074686520476F7665726E6D656E74206F662043616E6164612077696C6C207374616E6420757020666F7220746865207368617265642076616C756573206F662043616E616469616E7320617420686F6D6520616E64206162726F61642E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''456C656374656420627920616C6C2043616E616469616E7320616E6420656E646F776564207769746820746865206C65676974696D6163792074686174207468697320626573746F77732C2074686520476F7665726E6D656E74206F662043616E6164612077696C6C207374616E6420757020666F7220746865207368617265642076616C756573206F662043616E616469616E7320617420686F6D6520616E64206162726F61642E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_AOnoqgml():
-    # {'PlainText Sentences': 'We are poised for success.', 'Encrypted Texts': {'PlainText': 'We are poised for success.', 'EncryptedText': '.-- . / .- .-. . / .--. --- .. ... . -.. / ..-. --- .-. / ... ..- -.-. -.-. . ... ... .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''.-- . / .- .-. . / .--. --- .. ... . -.. / ..-. --- .-. / ... ..- -.-. -.-. . ... ... .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_PdRAqPIj():
-    # {'PlainText Sentences': 'My dear colleagues, thank you again for the honour that you have bestowed on me today.', 'Encrypted Texts': {'PlainText': 'My dear colleagues, thank you again for the honour that you have bestowed on me today.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_nCtJCQwY():
-    # {'PlainText Sentences': '(Members were issued ballots and marked their ballots in secret at voting stations.)', 'Encrypted Texts': {'PlainText': '(Members were issued ballots and marked their ballots in secret at voting stations.)', 'EncryptedText': '101000 1001101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1110111 1100101 1110010 1100101 100000 1101001 1110011 1110011 1110101 1100101 1100100 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1100001 1101110 1100100 100000 1101101 1100001 1110010 1101011 1100101 1100100 100000 1110100 1101000 1100101 1101001 1110010 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1101001 1101110 100000 1110011 1100101 1100011 1110010 1100101 1110100 100000 1100001 1110100 100000 1110110 1101111 1110100 1101001 1101110 1100111 100000 1110011 1110100 1100001 1110100 1101001 1101111 1101110 1110011 101110 101001', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''101000 1001101 1100101 1101101 1100010 1100101 1110010 1110011 100000 1110111 1100101 1110010 1100101 100000 1101001 1110011 1110011 1110101 1100101 1100100 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1100001 1101110 1100100 100000 1101101 1100001 1110010 1101011 1100101 1100100 100000 1110100 1101000 1100101 1101001 1110010 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1101001 1101110 100000 1110011 1100101 1100011 1110010 1100101 1110100 100000 1100001 1110100 100000 1110110 1101111 1110100 1101001 1101110 1100111 100000 1110011 1110100 1100001 1110100 1101001 1101111 1101110 1110011 101110 101001''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_ZpOBjyRs():
-    # {'PlainText Sentences': 'members, I beg to return my humble acknowledgements to the House for the great honour you have been pleased to confer upon me by choosing me to be your Speaker.', 'Encrypted Texts': {'PlainText': 'members, I beg to return my humble acknowledgements to the House for the great honour you have been pleased to confer upon me by choosing me to be your Speaker.', 'EncryptedText': '6D656D626572732C20492062656720746F2072657475726E206D792068756D626C652061636B6E6F776C656467656D656E747320746F2074686520486F75736520666F722074686520677265617420686F6E6F757220796F752068617665206265656E20706C656173656420746F20636F6E6665722075706F6E206D652062792063686F6F73696E67206D6520746F20626520796F757220537065616B65722E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''6D656D626572732C20492062656720746F2072657475726E206D792068756D626C652061636B6E6F776C656467656D656E747320746F2074686520486F75736520666F722074686520677265617420686F6E6F757220796F752068617665206265656E20706C656173656420746F20636F6E6665722075706F6E206D652062792063686F6F73696E67206D6520746F20626520796F757220537065616B65722E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_YUZRlSZI():
-    # {'PlainText Sentences': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'Encrypted Texts': {'PlainText': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_HCraEreX():
-    # {'PlainText Sentences': 'I thank you very much.', 'Encrypted Texts': {'PlainText': 'I thank you very much.', 'EncryptedText': '49207468616E6B20796F752076657279206D7563682E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''49207468616E6B20796F752076657279206D7563682E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_imwiJiOI():
-    # {'PlainText Sentences': 'The Clerk will issue to each member a ballot paper.', 'Encrypted Texts': {'PlainText': 'The Clerk will issue to each member a ballot paper.', 'EncryptedText': '1010100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1110111 1101001 1101100 1101100 100000 1101001 1110011 1110011 1110101 1100101 100000 1110100 1101111 100000 1100101 1100001 1100011 1101000 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1100001 100000 1100010 1100001 1101100 1101100 1101111 1110100 100000 1110000 1100001 1110000 1100101 1110010 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1010100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1110111 1101001 1101100 1101100 100000 1101001 1110011 1110011 1110101 1100101 100000 1110100 1101111 100000 1100101 1100001 1100011 1101000 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1100001 100000 1100010 1100001 1101100 1101100 1101111 1110100 100000 1110000 1100001 1110000 1100101 1110010 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_GaPUJWEY():
-    # {'PlainText Sentences': 'This ballot will be of a different colour.', 'Encrypted Texts': {'PlainText': 'This ballot will be of a different colour.', 'EncryptedText': 'VGhpcyBiYWxsb3Qgd2lsbCBiZSBvZiBhIGRpZmZlcmVudCBjb2xvdXIu', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''VGhpcyBiYWxsb3Qgd2lsbCBiZSBvZiBhIGRpZmZlcmVudCBjb2xvdXIu''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_dIIqqEwv():
-    # {'PlainText Sentences': 'Our prosperity and our ability to create jobs are directly linked to how well we capitalize on international opportunities.', 'Encrypted Texts': {'PlainText': 'Our prosperity and our ability to create jobs are directly linked to how well we capitalize on international opportunities.', 'EncryptedText': '4F75722070726F7370657269747920616E64206F7572206162696C69747920746F20637265617465206A6F627320617265206469726563746C79206C696E6B656420746F20686F772077656C6C207765206361706974616C697A65206F6E20696E7465726E6174696F6E616C206F70706F7274756E69746965732E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''4F75722070726F7370657269747920616E64206F7572206162696C69747920746F20637265617465206A6F627320617265206469726563746C79206C696E6B656420746F20686F772077656C6C207765206361706974616C697A65206F6E20696E7465726E6174696F6E616C206F70706F7274756E69746965732E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_eeyabWKb():
-    # {'PlainText Sentences': 'The names of members eligible for the third ballot are as follows: \nIf any member whose name I have just read wishes to withdraw as a candidate for the third ballot, would he please rise in his place and do so?', 'Encrypted Texts': {'PlainText': 'The names of members eligible for the third ballot are as follows: \nIf any member whose name I have just read wishes to withdraw as a candidate for the third ballot, would he please rise in his place and do so?', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_yNqxCaMz():
-    # {'PlainText Sentences': 'We are poised for success.', 'Encrypted Texts': {'PlainText': 'We are poised for success.', 'EncryptedText': '1010111 1100101 100000 1100001 1110010 1100101 100000 1110000 1101111 1101001 1110011 1100101 1100100 100000 1100110 1101111 1110010 100000 1110011 1110101 1100011 1100011 1100101 1110011 1110011 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1010111 1100101 100000 1100001 1110010 1100101 100000 1110000 1101111 1101001 1110011 1100101 1100100 100000 1100110 1101111 1110010 100000 1110011 1110101 1100011 1100011 1100101 1110011 1110011 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_GVbExvIY():
-    # {'PlainText Sentences': 'My dear colleagues, thank you again for the honour that you have bestowed on me today.', 'Encrypted Texts': {'PlainText': 'My dear colleagues, thank you again for the honour that you have bestowed on me today.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_DZOXWlar():
-    # {'PlainText Sentences': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'Encrypted Texts': {'PlainText': 'And the House being returned to the Commons chamber: \nThe Speaker:\nOrder, please.', 'EncryptedText': '.esaelp ,redrO\n:rekaepS ehT\n :rebmahc snommoC eht ot denruter gnieb esuoH eht dnA', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.esaelp ,redrO
-:rekaepS ehT
- :rebmahc snommoC eht ot denruter gnieb esuoH eht dnA''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_JIPjnSVf():
-    # {'PlainText Sentences': 'ELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia):\nIt is indeed a great honour to be entrusted with this task.', 'Encrypted Texts': {'PlainText': 'ELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia):\nIt is indeed a great honour to be entrusted with this task.', 'EncryptedText': '454c454354494f4e204f4620535045414b4552200a54686520507265736964696e67204f66666963657220284d722e20436163636961293a0a497420697320696e64656564206120677265617420686f6e6f757220746f20626520656e7472757374656420776974682074686973207461736b2e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''454c454354494f4e204f4620535045414b4552200a54686520507265736964696e67204f66666963657220284d722e20436163636961293a0a497420697320696e64656564206120677265617420686f6e6f757220746f20626520656e7472757374656420776974682074686973207461736b2e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_GSurmdQq():
-    # {'PlainText Sentences': 'Our cities, towns, and villages reflect the diversity of all those who have come to this country.', 'Encrypted Texts': {'PlainText': 'Our cities, towns, and villages reflect the diversity of all those who have come to this country.', 'EncryptedText': '4F7572206369746965732C20746F776E732C20616E642076696C6C61676573207265666C6563742074686520646976657273697479206F6620616C6C2074686F73652077686F206861766520636F6D6520746F207468697320636F756E7472792E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''4F7572206369746965732C20746F776E732C20616E642076696C6C61676573207265666C6563742074686520646976657273697479206F6620616C6C2074686F73652077686F206861766520636F6D6520746F207468697320636F756E7472792E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_uGkGxRfa():
-    # {'PlainText Sentences': '(The sitting of the House was suspended at 1.13 p.m.) \nSITTING RESUMED \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'Encrypted Texts': {'PlainText': '(The sitting of the House was suspended at 1.13 p.m.) \nSITTING RESUMED \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'EncryptedText': '-.--. - .... . / ... .. - - .. -. --. / --- ..-. / - .... . / .... --- ..- ... . / .-- .- ... / ... ..- ... .--. . -. -.. . -.. / .- - / .---- .-.-.- .---- ...-- / .--. .-.-.- -- .-.-.- -.--.- /  ... .. - - .. -. --. / .-. . ... ..- -- . -.. /  - .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  --- .-. -.. . .-. --..-- / .--. .-.. . .- ... . .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''-.--. - .... . / ... .. - - .. -. --. / --- ..-. / - .... . / .... --- ..- ... . / .-- .- ... / ... ..- ... .--. . -. -.. . -.. / .- - / .---- .-.-.- .---- ...-- / .--. .-.-.- -- .-.-.- -.--.- /  ... .. - - .. -. --. / .-. . ... ..- -- . -.. /  - .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  --- .-. -.. . .-. --..-- / .--. .-.. . .- ... . .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_uvpqLncU():
-    # {'PlainText Sentences': 'The single most important commitment of the Government is to keep Canada united.', 'Encrypted Texts': {'PlainText': 'The single most important commitment of the Government is to keep Canada united.', 'EncryptedText': 'KRUGKIDTNFXGO3DFEBWW643UEBUW24DPOJ2GC3TUEBRW63LNNF2G2ZLOOQQG6ZRAORUGKICHN53GK4TONVSW45BANFZSA5DPEBVWKZLQEBBWC3TBMRQSA5LONF2GKZBO', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''KRUGKIDTNFXGO3DFEBWW643UEBUW24DPOJ2GC3TUEBRW63LNNF2G2ZLOOQQG6ZRAORUGKICHN53GK4TONVSW45BANFZSA5DPEBVWKZLQEBBWC3TBMRQSA5LONF2GKZBO''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_jrNqQHMc():
-    # {'PlainText Sentences': "Canadians feel better about their own future and the country's future.", 'Encrypted Texts': {'PlainText': "Canadians feel better about their own future and the country's future.", 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_eawXKBce():
-    # {'PlainText Sentences': 'Introduction and first reading \nRight Hon.', 'Encrypted Texts': {'PlainText': 'Introduction and first reading \nRight Hon.', 'EncryptedText': '496E74726F64756374696F6E20616E642066697273742072656164696E67200A526967687420486F6E2E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''496E74726F64756374696F6E20616E642066697273742072656164696E67200A526967687420486F6E2E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_OxvIyurQ():
-    # {'PlainText Sentences': "The Government will build on this success with a focussed strategy, developed in consultation with industry, to improve our international economic performance by expanding Canada's trade base, becoming the location of choice for global investment, and making Canada a preferred tourist destination.", 'Encrypted Texts': {'PlainText': "The Government will build on this success with a focussed strategy, developed in consultation with industry, to improve our international economic performance by expanding Canada's trade base, becoming the location of choice for global investment, and making Canada a preferred tourist destination.", 'EncryptedText': ".noitanitsed tsiruot derreferp a adanaC gnikam dna ,tnemtsevni labolg rof eciohc fo noitacol eht gnimoceb ,esab edart s'adanaC gnidnapxe yb ecnamrofrep cimonoce lanoitanretni ruo evorpmi ot ,yrtsudni htiw noitatlusnoc ni depoleved ,ygetarts dessucof a htiw sseccus siht no dliub lliw tnemnrevoG ehT", 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.noitanitsed tsiruot derreferp a adanaC gnikam dna ,tnemtsevni labolg rof eciohc fo noitacol eht gnimoceb ,esab edart s'adanaC gnidnapxe yb ecnamrofrep cimonoce lanoitanretni ruo evorpmi ot ,yrtsudni htiw noitatlusnoc ni depoleved ,ygetarts dessucof a htiw sseccus siht no dliub lliw tnemnrevoG ehT''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_mLZpzFRz():
-    # {'PlainText Sentences': 'Some hon.', 'Encrypted Texts': {'PlainText': 'Some hon.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_SLbjdygy():
-    # {'PlainText Sentences': 'More than ever, Canadians want their governments to work together in partnership.', 'Encrypted Texts': {'PlainText': 'More than ever, Canadians want their governments to work together in partnership.', 'EncryptedText': 'TW9yZSB0aGFuIGV2ZXIsIENhbmFkaWFucyB3YW50IHRoZWlyIGdvdmVybm1lbnRzIHRvIHdvcmsgdG9nZXRoZXIgaW4gcGFydG5lcnNoaXAu', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''TW9yZSB0aGFuIGV2ZXIsIENhbmFkaWFucyB3YW50IHRoZWlyIGdvdmVybm1lbnRzIHRvIHdvcmsgdG9nZXRoZXIgaW4gcGFydG5lcnNoaXAu''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_wjaSbKIi():
-    # {'PlainText Sentences': '(Motions deemed adopted and bill read the first time)  * * * \nSPEECH FROM THE THRONE \nThe Speaker:\nMembers of the House of Commons, \nLadies and Gentlemen: \nAs Governor General I have visited every province and territory, and I wish every Canadian could share that experience.', 'Encrypted Texts': {'PlainText': '(Motions deemed adopted and bill read the first time)  * * * \nSPEECH FROM THE THRONE \nThe Speaker:\nMembers of the House of Commons, \nLadies and Gentlemen: \nAs Governor General I have visited every province and territory, and I wish every Canadian could share that experience.', 'EncryptedText': '284D6F74696F6E73206465656D65642061646F7074656420616E642062696C6C2072656164207468652066697273742074696D652920202A202A202A200A5350454543482046524F4D20544845205448524F4E45200A54686520537065616B65723A0A4D656D62657273206F662074686520486F757365206F6620436F6D6D6F6E732C200A4C616469657320616E642047656E746C656D656E3A200A417320476F7665726E6F722047656E6572616C2049206861766520766973697465642065766572792070726F76696E636520616E64207465727269746F72792C20616E64204920776973682065766572792043616E616469616E20636F756C64207368617265207468617420657870657269656E63652E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''284D6F74696F6E73206465656D65642061646F7074656420616E642062696C6C2072656164207468652066697273742074696D652920202A202A202A200A5350454543482046524F4D20544845205448524F4E45200A54686520537065616B65723A0A4D656D62657273206F662074686520486F757365206F6620436F6D6D6F6E732C200A4C616469657320616E642047656E746C656D656E3A200A417320476F7665726E6F722047656E6572616C2049206861766520766973697465642065766572792070726F76696E636520616E64207465727269746F72792C20616E64204920776973682065766572792043616E616469616E20636F756C64207368617265207468617420657870657269656E63652E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_PPEgAzzV():
-    # {'PlainText Sentences': 'It is my duty to inform the House that a third vote will be necessary.', 'Encrypted Texts': {'PlainText': 'It is my duty to inform the House that a third vote will be necessary.', 'EncryptedText': '.yrassecen eb lliw etov driht a taht esuoH eht mrofni ot ytud ym si tI', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.yrassecen eb lliw etov driht a taht esuoH eht mrofni ot ytud ym si tI''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_ZUoTlYrv():
-    # {'PlainText Sentences': 'In my functions, I visit with many units of the Canadian Forces.', 'Encrypted Texts': {'PlainText': 'In my functions, I visit with many units of the Canadian Forces.', 'EncryptedText': '496e206d792066756e6374696f6e732c20492076697369742077697468206d616e7920756e697473206f66207468652043616e616469616e20466f726365732e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''496e206d792066756e6374696f6e732c20492076697369742077697468206d616e7920756e697473206f66207468652043616e616469616e20466f726365732e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_xrpCpGGC():
-    # {'PlainText Sentences': '* * * \nOPENING OF SESSION \nThe Speaker read to the House a letter from the Secretary to the Governor General informing him that His Excellency the Governor General would proceed to the Senate chamber on Tuesday, September 23, 1997, at 2.30 p.m. to open officially the first session of the 36th Parliament.', 'Encrypted Texts': {'PlainText': '* * * \nOPENING OF SESSION \nThe Speaker read to the House a letter from the Secretary to the Governor General informing him that His Excellency the Governor General would proceed to the Senate chamber on Tuesday, September 23, 1997, at 2.30 p.m. to open officially the first session of the 36th Parliament.', 'EncryptedText': '101010 100000 101010 100000 101010 100000 1010 1001111 1010000 1000101 1001110 1001001 1001110 1000111 100000 1001111 1000110 100000 1010011 1000101 1010011 1010011 1001001 1001111 1001110 100000 1010 1010100 1101000 1100101 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 100000 1110010 1100101 1100001 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100001 100000 1101100 1100101 1110100 1110100 1100101 1110010 100000 1100110 1110010 1101111 1101101 100000 1110100 1101000 1100101 100000 1010011 1100101 1100011 1110010 1100101 1110100 1100001 1110010 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101001 1101110 1100110 1101111 1110010 1101101 1101001 1101110 1100111 100000 1101000 1101001 1101101 100000 1110100 1101000 1100001 1110100 100000 1001000 1101001 1110011 100000 1000101 1111000 1100011 1100101 1101100 1101100 1100101 1101110 1100011 1111001 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1110111 1101111 1110101 1101100 1100100 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1010011 1100101 1101110 1100001 1110100 1100101 100000 1100011 1101000 1100001 1101101 1100010 1100101 1110010 100000 1101111 1101110 100000 1010100 1110101 1100101 1110011 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110011 101100 100000 110001 111001 111001 110111 101100 100000 1100001 1110100 100000 110010 101110 110011 110000 100000 1110000 101110 1101101 101110 100000 1110100 1101111 100000 1101111 1110000 1100101 1101110 100000 1101111 1100110 1100110 1101001 1100011 1101001 1100001 1101100 1101100 1111001 100000 1110100 1101000 1100101 100000 1100110 1101001 1110010 1110011 1110100 100000 1110011 1100101 1110011 1110011 1101001 1101111 1101110 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 110011 110110 1110100 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''101010 100000 101010 100000 101010 100000 1010 1001111 1010000 1000101 1001110 1001001 1001110 1000111 100000 1001111 1000110 100000 1010011 1000101 1010011 1010011 1001001 1001111 1001110 100000 1010 1010100 1101000 1100101 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 100000 1110010 1100101 1100001 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1001000 1101111 1110101 1110011 1100101 100000 1100001 100000 1101100 1100101 1110100 1110100 1100101 1110010 100000 1100110 1110010 1101111 1101101 100000 1110100 1101000 1100101 100000 1010011 1100101 1100011 1110010 1100101 1110100 1100001 1110010 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1101001 1101110 1100110 1101111 1110010 1101101 1101001 1101110 1100111 100000 1101000 1101001 1101101 100000 1110100 1101000 1100001 1110100 100000 1001000 1101001 1110011 100000 1000101 1111000 1100011 1100101 1101100 1101100 1100101 1101110 1100011 1111001 100000 1110100 1101000 1100101 100000 1000111 1101111 1110110 1100101 1110010 1101110 1101111 1110010 100000 1000111 1100101 1101110 1100101 1110010 1100001 1101100 100000 1110111 1101111 1110101 1101100 1100100 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1010011 1100101 1101110 1100001 1110100 1100101 100000 1100011 1101000 1100001 1101101 1100010 1100101 1110010 100000 1101111 1101110 100000 1010100 1110101 1100101 1110011 1100100 1100001 1111001 101100 100000 1010011 1100101 1110000 1110100 1100101 1101101 1100010 1100101 1110010 100000 110010 110011 101100 100000 110001 111001 111001 110111 101100 100000 1100001 1110100 100000 110010 101110 110011 110000 100000 1110000 101110 1101101 101110 100000 1110100 1101111 100000 1101111 1110000 1100101 1101110 100000 1101111 1100110 1100110 1101001 1100011 1101001 1100001 1101100 1101100 1111001 100000 1110100 1101000 1100101 100000 1100110 1101001 1110010 1110011 1110100 100000 1110011 1100101 1110011 1110011 1101001 1101111 1101110 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 110011 110110 1110100 1101000 100000 1010000 1100001 1110010 1101100 1101001 1100001 1101101 1100101 1101110 1110100 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_EUHDsyki():
-    # {'PlainText Sentences': 'Over the course of this Parliament, the Government will fulfil the commitments it made to the people in its election platform.', 'Encrypted Texts': {'PlainText': 'Over the course of this Parliament, the Government will fulfil the commitments it made to the people in its election platform.', 'EncryptedText': '.mroftalp noitcele sti ni elpoep eht ot edam ti stnemtimmoc eht lifluf lliw tnemnrevoG eht ,tnemailraP siht fo esruoc eht revO', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.mroftalp noitcele sti ni elpoep eht ot edam ti stnemtimmoc eht lifluf lliw tnemnrevoG eht ,tnemailraP siht fo esruoc eht revO''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_WoDghZnd():
-    # {'PlainText Sentences': 'The polling booths are now open.', 'Encrypted Texts': {'PlainText': 'The polling booths are now open.', 'EncryptedText': '- .... . / .--. --- .-.. .-.. .. -. --. / -... --- --- - .... ... / .- .-. . / -. --- .-- / --- .--. . -. .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''- .... . / .--. --- .-.. .-.. .. -. --. / -... --- --- - .... ... / .- .-. . / -. --- .-- / --- .--. . -. .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_hxAjhyrq():
-    # {'PlainText Sentences': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'Encrypted Texts': {'PlainText': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_IecGouvh():
-    # {'PlainText Sentences': 'The Government is committed to following this balanced approach of social investment and prudent financial management as it leads Canada toward renewed and lasting economic health and increased social cohesion.', 'Encrypted Texts': {'PlainText': 'The Government is committed to following this balanced approach of social investment and prudent financial management as it leads Canada toward renewed and lasting economic health and increased social cohesion.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_haqWtCLe():
-    # {'PlainText Sentences': 'If there are no more members in the chamber wishing to vote or cast a ballot, I instruct the Clerk to proceed with the counting of the ballots.', 'Encrypted Texts': {'PlainText': 'If there are no more members in the chamber wishing to vote or cast a ballot, I instruct the Clerk to proceed with the counting of the ballots.', 'EncryptedText': '.. ..-. / - .... . .-. . / .- .-. . / -. --- / -- --- .-. . / -- . -- -... . .-. ... / .. -. / - .... . / -.-. .... .- -- -... . .-. / .-- .. ... .... .. -. --. / - --- / ...- --- - . / --- .-. / -.-. .- ... - / .- / -... .- .-.. .-.. --- - --..-- / .. / .. -. ... - .-. ..- -.-. - / - .... . / -.-. .-.. . .-. -.- / - --- / .--. .-. --- -.-. . . -.. / .-- .. - .... / - .... . / -.-. --- ..- -. - .. -. --. / --- ..-. / - .... . / -... .- .-.. .-.. --- - ... .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''.. ..-. / - .... . .-. . / .- .-. . / -. --- / -- --- .-. . / -- . -- -... . .-. ... / .. -. / - .... . / -.-. .... .- -- -... . .-. / .-- .. ... .... .. -. --. / - --- / ...- --- - . / --- .-. / -.-. .- ... - / .- / -... .- .-.. .-.. --- - --..-- / .. / .. -. ... - .-. ..- -.-. - / - .... . / -.-. .-.. . .-. -.- / - --- / .--. .-. --- -.-. . . -.. / .-- .. - .... / - .... . / -.-. --- ..- -. - .. -. --. / --- ..-. / - .... . / -... .- .-.. .-.. --- - ... .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_aaOwoQLg():
-    # {'PlainText Sentences': "The list of eligible members has also been placed on each member's desk.", 'Encrypted Texts': {'PlainText': "The list of eligible members has also been placed on each member's desk.", 'EncryptedText': ".ksed s'rebmem hcae no decalp neeb osla sah srebmem elbigile fo tsil ehT", 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.ksed s'rebmem hcae no decalp neeb osla sah srebmem elbigile fo tsil ehT''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_YtNvtKno():
-    # {'PlainText Sentences': "We Have Already Built a Foundation for Our Success \nIn recent years, Canadians worked hard and sacrificed to overcome many of our nation's challenges.", 'Encrypted Texts': {'PlainText': "We Have Already Built a Foundation for Our Success \nIn recent years, Canadians worked hard and sacrificed to overcome many of our nation's challenges.", 'EncryptedText': '5765204861766520416C7265616479204275696C74206120466F756E646174696F6E20666F72204F75722053756363657373200A496E20726563656E742079656172732C2043616E616469616E7320776F726B6564206861726420616E64207361637269666963656420746F206F766572636F6D65206D616E79206F66206F7572206E6174696F6E2773206368616C6C656E6765732E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''5765204861766520416C7265616479204275696C74206120466F756E646174696F6E20666F72204F75722053756363657373200A496E20726563656E742079656172732C2043616E616469616E7320776F726B6564206861726420616E64207361637269666963656420746F206F766572636F6D65206D616E79206F66206F7572206E6174696F6E2773206368616C6C656E6765732E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_RPmynFHT():
-    # {'PlainText Sentences': 'You are going to hold strong opinions, and as well you should.', 'Encrypted Texts': {'PlainText': 'You are going to hold strong opinions, and as well you should.', 'EncryptedText': '596F752061726520676F696E6720746F20686F6C64207374726F6E67206F70696E696F6E732C20616E642061732077656C6C20796F752073686F756C642E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''596F752061726520676F696E6720746F20686F6C64207374726F6E67206F70696E696F6E732C20616E642061732077656C6C20796F752073686F756C642E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_EmpGtzWP():
-    # {'PlainText Sentences': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'Encrypted Texts': {'PlainText': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'EncryptedText': 'JF2CA2LTEBXG65ZANFXCA5DIMUQHA33TNF2GS33OEB2G6IDNMFVWKIDTORZGC5DFM5UWGIDJNZ3GK43UNVSW45DTEBUW4IDPOVZCAY3INFWGI4TFNYQGC3TEEBXXK4RAPFXXK5DIFQQG65LSEBUGKYLMORUCYIDPOVZCAY3PNVWXK3TJORUWK4ZMEBQW4ZBAN52XEIDLNZXXO3DFMRTWKIDBNZSCAY3SMVQXI2LWNF2HSIDXNBUWYZJAMNXW45DJNZ2WS3THEB2G6IDJNVYHE33WMUQHI2DFEBXGC5DJN5XCO4ZAMZUW4YLOMNSXGLQ=', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''JF2CA2LTEBXG65ZANFXCA5DIMUQHA33TNF2GS33OEB2G6IDNMFVWKIDTORZGC5DFM5UWGIDJNZ3GK43UNVSW45DTEBUW4IDPOVZCAY3INFWGI4TFNYQGC3TEEBXXK4RAPFXXK5DIFQQG65LSEBUGKYLMORUCYIDPOVZCAY3PNVWXK3TJORUWK4ZMEBQW4ZBAN52XEIDLNZXXO3DFMRTWKIDBNZSCAY3SMVQXI2LWNF2HSIDXNBUWYZJAMNXW45DJNZ2WS3THEB2G6IDJNVYHE33WMUQHI2DFEBXGC5DJN5XCO4ZAMZUW4YLOMNSXGLQ=''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_MTiesVyi():
-    # {'PlainText Sentences': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'Encrypted Texts': {'PlainText': 'Stimulating job creation and economic growth has been, remains, and will continue to be a major objective of the Government of Canada.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Hex_xTlfjeLQ():
-    # {'PlainText Sentences': 'Don Boudria \n(Official Version) \nEDITED HANSARD * NUMBER 2 \nHOUSE OF COMMONS \nTuesday, September 23, 1997 \nThe House met at 2.30 p.m. \nPrayers \nSPEECH FROM THE THRONE \nA message was delivered by the Gentleman Usher of the Black Rod as follows: \nMr. Speaker, His Excellency the Governor General desires the immediate attendance of this honourable House in the Chamber of the Senate.', 'Encrypted Texts': {'PlainText': 'Don Boudria \n(Official Version) \nEDITED HANSARD * NUMBER 2 \nHOUSE OF COMMONS \nTuesday, September 23, 1997 \nThe House met at 2.30 p.m. \nPrayers \nSPEECH FROM THE THRONE \nA message was delivered by the Gentleman Usher of the Black Rod as follows: \nMr. Speaker, His Excellency the Governor General desires the immediate attendance of this honourable House in the Chamber of the Senate.', 'EncryptedText': '446f6e20426f7564726961200a284f6666696369616c2056657273696f6e29200a4544495445442048414e53415244202a204e554d4245522032200a484f555345204f4620434f4d4d4f4e53200a547565736461792c2053657074656d6265722032332c2031393937200a54686520486f757365206d657420617420322e333020702e6d2e200a50726179657273200a5350454543482046524f4d20544845205448524f4e45200a41206d657373616765207761732064656c697665726564206279207468652047656e746c656d616e205573686572206f662074686520426c61636b20526f6420617320666f6c6c6f77733a200a4d722e20537065616b65722c2048697320457863656c6c656e63792074686520476f7665726e6f722047656e6572616c20646573697265732074686520696d6d65646961746520617474656e64616e6365206f66207468697320686f6e6f757261626c6520486f75736520696e20746865204368616d626572206f66207468652053656e6174652e', 'CipherUsed': 'Hex'}}
-    cfg = make_default_config('''446f6e20426f7564726961200a284f6666696369616c2056657273696f6e29200a4544495445442048414e53415244202a204e554d4245522032200a484f555345204f4620434f4d4d4f4e53200a547565736461792c2053657074656d6265722032332c2031393937200a54686520486f757365206d657420617420322e333020702e6d2e200a50726179657273200a5350454543482046524f4d20544845205448524f4e45200a41206d657373616765207761732064656c697665726564206279207468652047656e746c656d616e205573686572206f662074686520426c61636b20526f6420617320666f6c6c6f77733a200a4d722e20537065616b65722c2048697320457863656c6c656e63792074686520476f7665726e6f722047656e6572616c20646573697265732074686520696d6d65646961746520617474656e64616e6365206f66207468697320686f6e6f757261626c6520486f75736520696e20746865204368616d626572206f66207468652053656e6174652e''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_KIyGgjtJ():
-    # {'PlainText Sentences': 'Why should it not be?', 'Encrypted Texts': {'PlainText': 'Why should it not be?', 'EncryptedText': '5768792073686F756C64206974206E6F742062653F', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''5768792073686F756C64206974206E6F742062653F''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_iLbKgAEp():
-    # {'PlainText Sentences': 'More Canadian companies are selling more goods and services to the world than ever before.', 'Encrypted Texts': {'PlainText': 'More Canadian companies are selling more goods and services to the world than ever before.', 'EncryptedText': '4D6F72652043616E616469616E20636F6D70616E696573206172652073656C6C696E67206D6F726520676F6F647320616E6420736572766963657320746F2074686520776F726C64207468616E2065766572206265666F72652E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''4D6F72652043616E616469616E20636F6D70616E696573206172652073656C6C696E67206D6F726520676F6F647320616E6420736572766963657320746F2074686520776F726C64207468616E2065766572206265666F72652E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Ascii_uzluOFXF():
-    # {'PlainText Sentences': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'Encrypted Texts': {'PlainText': 'I would also ask that you seek the consent of the House to make your election unanimous.', 'EncryptedText': '73 32 119 111 117 108 100 32 97 108 115 111 32 97 115 107 32 116 104 97 116 32 121 111 117 32 115 101 101 107 32 116 104 101 32 99 111 110 115 101 110 116 32 111 102 32 116 104 101 32 72 111 117 115 101 32 116 111 32 109 97 107 101 32 121 111 117 114 32 101 108 101 99 116 105 111 110 32 117 110 97 110 105 109 111 117 115 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''73 32 119 111 117 108 100 32 97 108 115 111 32 97 115 107 32 116 104 97 116 32 121 111 117 32 115 101 101 107 32 116 104 101 32 99 111 110 115 101 110 116 32 111 102 32 116 104 101 32 72 111 117 115 101 32 116 111 32 109 97 107 101 32 121 111 117 114 32 101 108 101 99 116 105 111 110 32 117 110 97 110 105 109 111 117 115 46''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base32_slQVszGs():
-    # {'PlainText Sentences': 'Hon.', 'Encrypted Texts': {'PlainText': 'Hon.', 'EncryptedText': 'JBXW4LQ=', 'CipherUsed': 'Base32'}}
-    cfg = make_default_config('''JBXW4LQ=''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Reverse_CRXXELEM():
-    # {'PlainText Sentences': 'We are an open and democratic society.', 'Encrypted Texts': {'PlainText': 'We are an open and democratic society.', 'EncryptedText': '.yteicos citarcomed dna nepo na era eW', 'CipherUsed': 'Reverse'}}
-    cfg = make_default_config('''.yteicos citarcomed dna nepo na era eW''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_ZDNcGlur():
-    # {'PlainText Sentences': 'The sitting is suspended to the ringing of the bells.', 'Encrypted Texts': {'PlainText': 'The sitting is suspended to the ringing of the bells.', 'EncryptedText': '1010100 1101000 1100101 100000 1110011 1101001 1110100 1110100 1101001 1101110 1100111 100000 1101001 1110011 100000 1110011 1110101 1110011 1110000 1100101 1101110 1100100 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1110010 1101001 1101110 1100111 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100101 1101100 1101100 1110011 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1010100 1101000 1100101 100000 1110011 1101001 1110100 1110100 1101001 1101110 1100111 100000 1101001 1110011 100000 1110011 1110101 1110011 1110000 1100101 1101110 1100100 1100101 1100100 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1110010 1101001 1101110 1100111 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100101 1101100 1101100 1110011 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Vigenere_vIeTRLBV():
-    # {'PlainText Sentences': 'While the Clerk is unsealing the ballots, may I remind members that the ballots for the third vote will be a different colour and that the list of names of candidates on this ballot has been placed in each polling station.', 'Encrypted Texts': {'PlainText': 'While the Clerk is unsealing the ballots, may I remind members that the ballots for the third vote will be a different colour and that the list of names of candidates on this ballot has been placed in each polling station.', 'EncryptedText': None, 'CipherUsed': 'Vigenere'}}
-    cfg = make_default_config('''None''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_ElOePbvd():
-    # {'PlainText Sentences': 'EDITED HANSARD * NUMBER 1 \nMonday, September 22, 1997 \nFIRST SESSION-36TH PARLIAMENT \nOpening of Parliament \nThe Clerk of the House \nELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia) \nSuspension of Sitting \nThe Presiding Officer (Mr. Caccia) \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nSuspension of sitting \nSitting resumed \nSuspension of Sitting \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nSuspension of Sitting \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nMr. John Nunziata \nOPENING OF SESSION \n(Official Version) \nEDITED HANSARD * NUMBER 1 \nHOUSE OF COMMONS \nMonday, September 22, 1997 \nFIRST SESSION-36TH PARLIAMENT \nThe 35th Parliament having been dissolved by proclamation on Sunday, April 27, 1997, and writs having been issued and returned, a new Parliament was summoned to meet for the dispatch of business on Monday, September 22, 1997, and did accordingly meet on that day.', 'Encrypted Texts': {'PlainText': 'EDITED HANSARD * NUMBER 1 \nMonday, September 22, 1997 \nFIRST SESSION-36TH PARLIAMENT \nOpening of Parliament \nThe Clerk of the House \nELECTION OF SPEAKER \nThe Presiding Officer (Mr. Caccia) \nSuspension of Sitting \nThe Presiding Officer (Mr. Caccia) \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nSuspension of sitting \nSitting resumed \nSuspension of Sitting \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nSuspension of Sitting \nSitting Resumed \nThe Presiding Officer (Mr. Caccia) \nMr. John Nunziata \nOPENING OF SESSION \n(Official Version) \nEDITED HANSARD * NUMBER 1 \nHOUSE OF COMMONS \nMonday, September 22, 1997 \nFIRST SESSION-36TH PARLIAMENT \nThe 35th Parliament having been dissolved by proclamation on Sunday, April 27, 1997, and writs having been issued and returned, a new Parliament was summoned to meet for the dispatch of business on Monday, September 22, 1997, and did accordingly meet on that day.', 'EncryptedTextipherUsed': 'Base16'}}
-    cfg = make_default_config
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_WBjKuPHf():
-    # {'PlainText Sentences': 'The Presiding Officer (Mr. Caccia):\nIt is my duty to inform the House that a second ballot will be necessary.', 'Encrypted Texts': {'PlainText': 'The Presiding Officer (Mr. Caccia):\nIt is my duty to inform the House that a second ballot will be necessary.', 'EncryptedText': '- .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  .. - / .. ... / -- -.-- / -.. ..- - -.-- / - --- / .. -. ..-. --- .-. -- / - .... . / .... --- ..- ... . / - .... .- - / .- / ... . -.-. --- -. -.. / -... .- .-.. .-.. --- - / .-- .. .-.. .-.. / -... . / -. . -.-. . ... ... .- .-. -.-- .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''- .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  .. - / .. ... / -- -.-- / -.. ..- - -.-- / - --- / .. -. ..-. --- .-. -- / - .... . / .... --- ..- ... . / - .... .- - / .- / ... . -.-. --- -. -.. / -... .- .-.. .-.. --- - / .-- .. .-.. .-.. / -... . / -. . -.-. . ... ... .- .-. -.-- .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_JUrUgBqc():
-    # {'PlainText Sentences': 'The Presiding Officer: (Mr. Caccia):\nIf there are any hon.', 'Encrypted Texts': {'PlainText': 'The Presiding Officer: (Mr. Caccia):\nIf there are any hon.', 'EncryptedText': '- .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. ---... / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  .. ..-. / - .... . .-. . / .- .-. . / .- -. -.-- / .... --- -. .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''- .... . / .--. .-. . ... .. -.. .. -. --. / --- ..-. ..-. .. -.-. . .-. ---... / -.--. -- .-. .-.-.- / -.-. .- -.-. -.-. .. .- -.--.- ---...  .. ..-. / - .... . .-. . / .- .-. . / .- -. -.-- / .... --- -. .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_UyQjKFOx():
-    # {'PlainText Sentences': 'We succeeded, and have started to put in place a strong foundation for our success in the new millennium.', 'Encrypted Texts': {'PlainText': 'We succeeded, and have started to put in place a strong foundation for our success in the new millennium.', 'EncryptedText': '5765207375636365656465642C20616E642068617665207374617274656420746F2070757420696E20706C6163652061207374726F6E6720666F756E646174696F6E20666F72206F7572207375636365737320696E20746865206E6577206D696C6C656E6E69756D2E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''5765207375636365656465642C20616E642068617665207374617274656420746F2070757420696E20706C6163652061207374726F6E6720666F756E646174696F6E20666F72206F7572207375636365737320696E20746865206E6577206D696C6C656E6E69756D2E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_MorseCode_UAyZSAzo():
-    # {'PlainText Sentences': 'And the House being returned to the Commons chamber.', 'Encrypted Texts': {'PlainText': 'And the House being returned to the Commons chamber.', 'EncryptedText': '.- -. -.. / - .... . / .... --- ..- ... . / -... . .. -. --. / .-. . - ..- .-. -. . -.. / - --- / - .... . / -.-. --- -- -- --- -. ... / -.-. .... .- -- -... . .-. .-.-.-', 'CipherUsed': 'MorseCode'}}
-    cfg = make_default_config('''.- -. -.. / - .... . / .... --- ..- ... . / -... . .. -. --. / .-. . - ..- .-. -. . -.. / - --- / - .... . / -.-. --- -- -- --- -. ... / -.-. .... .- -- -... . .-. .-.-.-''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Ascii_GQRkmUml():
-    # {'PlainText Sentences': 'SUSPENSION OF SITTING \nThe Presiding Officer (Mr. Caccia):\nBefore I suspend the sitting may I bring to the attention of hon.', 'Encrypted Texts': {'PlainText': 'SUSPENSION OF SITTING \nThe Presiding Officer (Mr. Caccia):\nBefore I suspend the sitting may I bring to the attention of hon.', 'EncryptedText': '83 85 83 80 69 78 83 73 79 78 32 79 70 32 83 73 84 84 73 78 71 32 10 84 104 101 32 80 114 101 115 105 100 105 110 103 32 79 102 102 105 99 101 114 32 40 77 114 46 32 67 97 99 99 105 97 41 58 10 66 101 102 111 114 101 32 73 32 115 117 115 112 101 110 100 32 116 104 101 32 115 105 116 116 105 110 103 32 109 97 121 32 73 32 98 114 105 110 103 32 116 111 32 116 104 101 32 97 116 116 101 110 116 105 111 110 32 111 102 32 104 111 110 46', 'CipherUsed': 'Ascii'}}
-    cfg = make_default_config('''83 85 83 80 69 78 83 73 79 78 32 79 70 32 83 73 84 84 73 78 71 32 10 84 104 101 32 80 114 101 115 105 100 105 110 103 32 79 102 102 105 99 101 114 32 40 77 114 46 32 67 97 99 99 105 97 41 58 10 66 101 102 111 114 101 32 73 32 115 117 115 112 101 110 100 32 116 104 101 32 115 105 116 116 105 110 103 32 109 97 121 32 73 32 98 114 105 110 103 32 116 111 32 116 104 101 32 97 116 116 101 110 116 105 111 110 32 111 102 32 104 111 110 46''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_ARrngWxB():
-    # {'PlainText Sentences': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'Encrypted Texts': {'PlainText': "It is now in the position to make strategic investments in our children and our youth, our health, our communities, and our knowledge and creativity while continuing to improve the nation's finances.", 'EncryptedText': '1001001 1110100 100000 1101001 1110011 100000 1101110 1101111 1110111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1110000 1101111 1110011 1101001 1110100 1101001 1101111 1101110 100000 1110100 1101111 100000 1101101 1100001 1101011 1100101 100000 1110011 1110100 1110010 1100001 1110100 1100101 1100111 1101001 1100011 100000 1101001 1101110 1110110 1100101 1110011 1110100 1101101 1100101 1101110 1110100 1110011 100000 1101001 1101110 100000 1101111 1110101 1110010 100000 1100011 1101000 1101001 1101100 1100100 1110010 1100101 1101110 100000 1100001 1101110 1100100 100000 1101111 1110101 1110010 100000 1111001 1101111 1110101 1110100 1101000 101100 100000 1101111 1110101 1110010 100000 1101000 1100101 1100001 1101100 1110100 1101000 101100 100000 1101111 1110101 1110010 100000 1100011 1101111 1101101 1101101 1110101 1101110 1101001 1110100 1101001 1100101 1110011 101100 100000 1100001 1101110 1100100 100000 1101111 1110101 1110010 100000 1101011 1101110 1101111 1110111 1101100 1100101 1100100 1100111 1100101 100000 1100001 1101110 1100100 100000 1100011 1110010 1100101 1100001 1110100 1101001 1110110 1101001 1110100 1111001 100000 1110111 1101000 1101001 1101100 1100101 100000 1100011 1101111 1101110 1110100 1101001 1101110 1110101 1101001 1101110 1100111 100000 1110100 1101111 100000 1101001 1101101 1110000 1110010 1101111 1110110 1100101 100000 1110100 1101000 1100101 100000 1101110 1100001 1110100 1101001 1101111 1101110 100111 1110011 100000 1100110 1101001 1101110 1100001 1101110 1100011 1100101 1110011 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1001001 1110100 100000 1101001 1110011 100000 1101110 1101111 1110111 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1110000 1101111 1110011 1101001 1110100 1101001 1101111 1101110 100000 1110100 1101111 100000 1101101 1100001 1101011 1100101 100000 1110011 1110100 1110010 1100001 1110100 1100101 1100111 1101001 1100011 100000 1101001 1101110 1110110 1100101 1110011 1110100 1101101 1100101 1101110 1110100 1110011 100000 1101001 1101110 100000 1101111 1110101 1110010 100000 1100011 1101000 1101001 1101100 1100100 1110010 1100101 1101110 100000 1100001 1101110 1100100 100000 1101111 1110101 1110010 100000 1111001 1101111 1110101 1110100 1101000 101100 100000 1101111 1110101 1110010 100000 1101000 1100101 1100001 1101100 1110100 1101000 101100 100000 1101111 1110101 1110010 100000 1100011 1101111 1101101 1101101 1110101 1101110 1101001 1110100 1101001 1100101 1110011 101100 100000 1100001 1101110 1100100 100000 1101111 1110101 1110010 100000 1101011 1101110 1101111 1110111 1101100 1100101 1100100 1100111 1100101 100000 1100001 1101110 1100100 100000 1100011 1110010 1100101 1100001 1110100 1101001 1110110 1101001 1110100 1111001 100000 1110111 1101000 1101001 1101100 1100101 100000 1100011 1101111 1101110 1110100 1101001 1101110 1110101 1101001 1101110 1100111 100000 1110100 1101111 100000 1101001 1101101 1110000 1110010 1101111 1110110 1100101 100000 1110100 1101000 1100101 100000 1101110 1100001 1110100 1101001 1101111 1101110 100111 1110011 100000 1100110 1101001 1101110 1100001 1101110 1100011 1100101 1110011 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_hryWPBmX():
-    # {'PlainText Sentences': 'As we are now going to commence voting, I would remind the honourable members to print the first and last names of their candidate on the ballot paper.', 'Encrypted Texts': {'PlainText': 'As we are now going to commence voting, I would remind the honourable members to print the first and last names of their candidate on the ballot paper.', 'EncryptedText': '417320776520617265206E6F7720676F696E6720746F20636F6D6D656E636520766F74696E672C204920776F756C642072656D696E642074686520686F6E6F757261626C65206D656D6265727320746F207072696E742074686520666972737420616E64206C617374206E616D6573206F662074686569722063616E646964617465206F6E207468652062616C6C6F742070617065722E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''417320776520617265206E6F7720676F696E6720746F20636F6D6D656E636520766F74696E672C204920776F756C642072656D696E642074686520686F6E6F757261626C65206D656D6265727320746F207072696E742074686520666972737420616E64206C617374206E616D6573206F662074686569722063616E646964617465206F6E207468652062616C6C6F742070617065722E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_dXnyxdBw():
-    # {'PlainText Sentences': '(The sitting of the House was suspended at 1.13 p.m.) \nSITTING RESUMED \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'Encrypted Texts': {'PlainText': '(The sitting of the House was suspended at 1.13 p.m.) \nSITTING RESUMED \nThe Presiding Officer (Mr. Caccia):\nOrder, please.', 'EncryptedText': 'KFRoZSBzaXR0aW5nIG9mIHRoZSBIb3VzZSB3YXMgc3VzcGVuZGVkIGF0IDEuMTMgcC5tLikgClNJVFRJTkcgUkVTVU1FRCAKVGhlIFByZXNpZGluZyBPZmZpY2VyIChNci4gQ2FjY2lhKToKT3JkZXIsIHBsZWFzZS4=', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''KFRoZSBzaXR0aW5nIG9mIHRoZSBIb3VzZSB3YXMgc3VzcGVuZGVkIGF0IDEuMTMgcC5tLikgClNJVFRJTkcgUkVTVU1FRCAKVGhlIFByZXNpZGluZyBPZmZpY2VyIChNci4gQ2FjY2lhKToKT3JkZXIsIHBsZWFzZS4=''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_xkbXpMzt():
-    # {'PlainText Sentences': 'I now instruct the Clerk to proceed with the counting of the ballots after I have cast my ballot.', 'Encrypted Texts': {'PlainText': 'I now instruct the Clerk to proceed with the counting of the ballots after I have cast my ballot.', 'EncryptedText': '1001001 100000 1101110 1101111 1110111 100000 1101001 1101110 1110011 1110100 1110010 1110101 1100011 1110100 100000 1110100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1110100 1101111 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1110100 1101000 1100101 100000 1100011 1101111 1110101 1101110 1110100 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1100001 1100110 1110100 1100101 1110010 100000 1001001 100000 1101000 1100001 1110110 1100101 100000 1100011 1100001 1110011 1110100 100000 1101101 1111001 100000 1100010 1100001 1101100 1101100 1101111 1110100 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1001001 100000 1101110 1101111 1110111 100000 1101001 1101110 1110011 1110100 1110010 1110101 1100011 1110100 100000 1110100 1101000 1100101 100000 1000011 1101100 1100101 1110010 1101011 100000 1110100 1101111 100000 1110000 1110010 1101111 1100011 1100101 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1110100 1101000 1100101 100000 1100011 1101111 1110101 1101110 1110100 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100010 1100001 1101100 1101100 1101111 1110100 1110011 100000 1100001 1100110 1110100 1100101 1110010 100000 1001001 100000 1101000 1100001 1110110 1100101 100000 1100011 1100001 1110011 1110100 100000 1101101 1111001 100000 1100010 1100001 1101100 1101100 1101111 1110100 101110''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base16_CYXwoQQF():
-    # {'PlainText Sentences': 'And it is here, on the floor of the House of Commons, that we will have a chance to express our views.', 'Encrypted Texts': {'PlainText': 'And it is here, on the floor of the House of Commons, that we will have a chance to express our views.', 'EncryptedText': '416E6420697420697320686572652C206F6E2074686520666C6F6F72206F662074686520486F757365206F6620436F6D6D6F6E732C20746861742077652077696C6C20686176652061206368616E636520746F2065787072657373206F75722076696577732E', 'CipherUsed': 'Base16'}}
-    cfg = make_default_config('''416E6420697420697320686572652C206F6E2074686520666C6F6F72206F662074686520486F757365206F6620436F6D6D6F6E732C20746861742077652077696C6C20686176652061206368616E636520746F2065787072657373206F75722076696577732E''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_qBAqUWUJ():
-    # {'PlainText Sentences': 'It will balance the budget no later than fiscal year 1998-99.', 'Encrypted Texts': {'PlainText': 'It will balance the budget no later than fiscal year 1998-99.', 'EncryptedText': 'SXQgd2lsbCBiYWxhbmNlIHRoZSBidWRnZXQgbm8gbGF0ZXIgdGhhbiBmaXNjYWwgeWVhciAxOTk4LTk5Lg==', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''SXQgd2lsbCBiYWxhbmNlIHRoZSBidWRnZXQgbm8gbGF0ZXIgdGhhbiBmaXNjYWwgeWVhciAxOTk4LTk5Lg==''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Base64_HPiXZtDw():
-    # {'PlainText Sentences': 'Over the course of this Parliament, the Government will fulfil the commitments it made to the people in its election platform.', 'Encrypted Texts': {'PlainText': 'Over the course of this Parliament, the Government will fulfil the commitments it made to the people in its election platform.', 'EncryptedText': 'T3ZlciB0aGUgY291cnNlIG9mIHRoaXMgUGFybGlhbWVudCwgdGhlIEdvdmVybm1lbnQgd2lsbCBmdWxmaWwgdGhlIGNvbW1pdG1lbnRzIGl0IG1hZGUgdG8gdGhlIHBlb3BsZSBpbiBpdHMgZWxlY3Rpb24gcGxhdGZvcm0u', 'CipherUsed': 'Base64'}}
-    cfg = make_default_config('''T3ZlciB0aGUgY291cnNlIG9mIHRoaXMgUGFybGlhbWVudCwgdGhlIEdvdmVybm1lbnQgd2lsbCBmdWxmaWwgdGhlIGNvbW1pdG1lbnRzIGl0IG1hZGUgdG8gdGhlIHBlb3BsZSBpbiBpdHMgZWxlY3Rpb24gcGxhdGZvcm0u''')
-    cfg["debug"] = "TRACE"
-    result = main(cfg)
-
-    assert result["IsPlaintext?"] == True 
-
-def test_Binary_ZDEPQZXv():
-    # {'PlainText Sentences': 'The last time I had the honour to be elected your Speaker I said that we are the political gladiators of Canada, and we are.', 'Encrypted Texts': {'PlainText': 'The last time I had the honour to be elected your Speaker I said that we are the political gladiators of Canada, and we are.', 'EncryptedText': '1010100 1101000 1100101 100000 1101100 1100001 1110011 1110100 100000 1110100 1101001 1101101 1100101 100000 1001001 100000 1101000 1100001 1100100 100000 1110100 1101000 1100101 100000 1101000 1101111 1101110 1101111 1110101 1110010 100000 1110100 1101111 100000 1100010 1100101 100000 1100101 1101100 1100101 1100011 1110100 1100101 1100100 100000 1111001 1101111 1110101 1110010 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 100000 1001001 100000 1110011 1100001 1101001 1100100 100000 1110100 1101000 1100001 1110100 100000 1110111 1100101 100000 1100001 1110010 1100101 100000 1110100 1101000 1100101 100000 1110000 1101111 1101100 1101001 1110100 1101001 1100011 1100001 1101100 100000 1100111 1101100 1100001 1100100 1101001 1100001 1110100 1101111 1110010 1110011 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 101100 100000 1100001 1101110 1100100 100000 1110111 1100101 100000 1100001 1110010 1100101 101110', 'CipherUsed': 'Binary'}}
-    cfg = make_default_config('''1010100 1101000 1100101 100000 1101100 1100001 1110011 1110100 100000 1110100 1101001 1101101 1100101 100000 1001001 100000 1101000 1100001 1100100 100000 1110100 1101000 1100101 100000 1101000 1101111 1101110 1101111 1110101 1110010 100000 1110100 1101111 100000 1100010 1100101 100000 1100101 1101100 1100101 1100011 1110100 1100101 1100100 100000 1111001 1101111 1110101 1110010 100000 1010011 1110000 1100101 1100001 1101011 1100101 1110010 100000 1001001 100000 1110011 1100001 1101001 1100100 100000 1110100 1101000 1100001 1110100 100000 1110111 1100101 100000 1100001 1110010 1100101 100000 1110100 1101000 1100101 100000 1110000 1101111 1101100 1101001 1110100 1101001 1100011 1100001 1101100 100000 1100111 1101100 1100001 1100100 1101001 1100001 1110100 1101111 1110010 1110011 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 101100 100000 1100001 1101110 1100100 100000 1110111 1100101 100000 1100001 1110010 1100101 101110''')
+def test_Binary_MYXocRWd():
+    # {'PlainText Sentences': "Later, the Crown could not, therefore, prove that the accident was directly linked to drinking. It may be beneficial to some Liberal members, but it does nothing for those who suffer, for the sick, for the growing number of children who live in poverty because of the cuts made by the Liberals and the Conservatives before them-sometimes we have a tendency to put all the blame on the Liberals, but the party that was in power before them did not do anything good either. Let me be clear. We used to have that day in July or August which was the day when we finished paying. member obviously did not hear my speech last night because he says I changed my mind. The plan pays out a fully indexed pension to people 65 years and older. I had the privilege this morning of meeting with Barbara Nathan-Marcus. I think for a variety of reasons our armed forces have come through a period of time when they have been subject to enormous public scrutiny and criticism. Let us examine the kind of management structure that is being put into place by this bill. The fiscal turnaround, coupled with low inflation and interest rates, has really helped this country to create over 1.7 million jobs and to bring back prosperity to the people of Canada. The member is known for his concern for the well-being of the nation's finances. members:\nAgreed. That is exactly what this bill is doing. We are going to be there next week in the budget to announce measures we believe will help them.", 'Encrypted Texts': {'PlainText': "Later, the Crown could not, therefore, prove that the accident was directly linked to drinking. It may be beneficial to some Liberal members, but it does nothing for those who suffer, for the sick, for the growing number of children who live in poverty because of the cuts made by the Liberals and the Conservatives before them-sometimes we have a tendency to put all the blame on the Liberals, but the party that was in power before them did not do anything good either. Let me be clear. We used to have that day in July or August which was the day when we finished paying. member obviously did not hear my speech last night because he says I changed my mind. The plan pays out a fully indexed pension to people 65 years and older. I had the privilege this morning of meeting with Barbara Nathan-Marcus. I think for a variety of reasons our armed forces have come through a period of time when they have been subject to enormous public scrutiny and criticism. Let us examine the kind of management structure that is being put into place by this bill. The fiscal turnaround, coupled with low inflation and interest rates, has really helped this country to create over 1.7 million jobs and to bring back prosperity to the people of Canada. The member is known for his concern for the well-being of the nation's finances. members:\nAgreed. That is exactly what this bill is doing. We are going to be there next week in the budget to announce measures we believe will help them.", 'EncryptedText': '1001100 1100001 1110100 1100101 1110010 101100 100000 1110100 1101000 1100101 100000 1000011 1110010 1101111 1110111 1101110 100000 1100011 1101111 1110101 1101100 1100100 100000 1101110 1101111 1110100 101100 100000 1110100 1101000 1100101 1110010 1100101 1100110 1101111 1110010 1100101 101100 100000 1110000 1110010 1101111 1110110 1100101 100000 1110100 1101000 1100001 1110100 100000 1110100 1101000 1100101 100000 1100001 1100011 1100011 1101001 1100100 1100101 1101110 1110100 100000 1110111 1100001 1110011 100000 1100100 1101001 1110010 1100101 1100011 1110100 1101100 1111001 100000 1101100 1101001 1101110 1101011 1100101 1100100 100000 1110100 1101111 100000 1100100 1110010 1101001 1101110 1101011 1101001 1101110 1100111 101110 100000 1001001 1110100 100000 1101101 1100001 1111001 100000 1100010 1100101 100000 1100010 1100101 1101110 1100101 1100110 1101001 1100011 1101001 1100001 1101100 100000 1110100 1101111 100000 1110011 1101111 1101101 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 101100 100000 1100010 1110101 1110100 100000 1101001 1110100 100000 1100100 1101111 1100101 1110011 100000 1101110 1101111 1110100 1101000 1101001 1101110 1100111 100000 1100110 1101111 1110010 100000 1110100 1101000 1101111 1110011 1100101 100000 1110111 1101000 1101111 100000 1110011 1110101 1100110 1100110 1100101 1110010 101100 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1110011 1101001 1100011 1101011 101100 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100111 1110010 1101111 1110111 1101001 1101110 1100111 100000 1101110 1110101 1101101 1100010 1100101 1110010 100000 1101111 1100110 100000 1100011 1101000 1101001 1101100 1100100 1110010 1100101 1101110 100000 1110111 1101000 1101111 100000 1101100 1101001 1110110 1100101 100000 1101001 1101110 100000 1110000 1101111 1110110 1100101 1110010 1110100 1111001 100000 1100010 1100101 1100011 1100001 1110101 1110011 1100101 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100011 1110101 1110100 1110011 100000 1101101 1100001 1100100 1100101 100000 1100010 1111001 100000 1110100 1101000 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 1110011 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1000011 1101111 1101110 1110011 1100101 1110010 1110110 1100001 1110100 1101001 1110110 1100101 1110011 100000 1100010 1100101 1100110 1101111 1110010 1100101 100000 1110100 1101000 1100101 1101101 101101 1110011 1101111 1101101 1100101 1110100 1101001 1101101 1100101 1110011 100000 1110111 1100101 100000 1101000 1100001 1110110 1100101 100000 1100001 100000 1110100 1100101 1101110 1100100 1100101 1101110 1100011 1111001 100000 1110100 1101111 100000 1110000 1110101 1110100 100000 1100001 1101100 1101100 100000 1110100 1101000 1100101 100000 1100010 1101100 1100001 1101101 1100101 100000 1101111 1101110 100000 1110100 1101000 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 1110011 101100 100000 1100010 1110101 1110100 100000 1110100 1101000 1100101 100000 1110000 1100001 1110010 1110100 1111001 100000 1110100 1101000 1100001 1110100 100000 1110111 1100001 1110011 100000 1101001 1101110 100000 1110000 1101111 1110111 1100101 1110010 100000 1100010 1100101 1100110 1101111 1110010 1100101 100000 1110100 1101000 1100101 1101101 100000 1100100 1101001 1100100 100000 1101110 1101111 1110100 100000 1100100 1101111 100000 1100001 1101110 1111001 1110100 1101000 1101001 1101110 1100111 100000 1100111 1101111 1101111 1100100 100000 1100101 1101001 1110100 1101000 1100101 1110010 101110 100000 1001100 1100101 1110100 100000 1101101 1100101 100000 1100010 1100101 100000 1100011 1101100 1100101 1100001 1110010 101110 100000 1010111 1100101 100000 1110101 1110011 1100101 1100100 100000 1110100 1101111 100000 1101000 1100001 1110110 1100101 100000 1110100 1101000 1100001 1110100 100000 1100100 1100001 1111001 100000 1101001 1101110 100000 1001010 1110101 1101100 1111001 100000 1101111 1110010 100000 1000001 1110101 1100111 1110101 1110011 1110100 100000 1110111 1101000 1101001 1100011 1101000 100000 1110111 1100001 1110011 100000 1110100 1101000 1100101 100000 1100100 1100001 1111001 100000 1110111 1101000 1100101 1101110 100000 1110111 1100101 100000 1100110 1101001 1101110 1101001 1110011 1101000 1100101 1100100 100000 1110000 1100001 1111001 1101001 1101110 1100111 101110 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1101111 1100010 1110110 1101001 1101111 1110101 1110011 1101100 1111001 100000 1100100 1101001 1100100 100000 1101110 1101111 1110100 100000 1101000 1100101 1100001 1110010 100000 1101101 1111001 100000 1110011 1110000 1100101 1100101 1100011 1101000 100000 1101100 1100001 1110011 1110100 100000 1101110 1101001 1100111 1101000 1110100 100000 1100010 1100101 1100011 1100001 1110101 1110011 1100101 100000 1101000 1100101 100000 1110011 1100001 1111001 1110011 100000 1001001 100000 1100011 1101000 1100001 1101110 1100111 1100101 1100100 100000 1101101 1111001 100000 1101101 1101001 1101110 1100100 101110 100000 1010100 1101000 1100101 100000 1110000 1101100 1100001 1101110 100000 1110000 1100001 1111001 1110011 100000 1101111 1110101 1110100 100000 1100001 100000 1100110 1110101 1101100 1101100 1111001 100000 1101001 1101110 1100100 1100101 1111000 1100101 1100100 100000 1110000 1100101 1101110 1110011 1101001 1101111 1101110 100000 1110100 1101111 100000 1110000 1100101 1101111 1110000 1101100 1100101 100000 110110 110101 100000 1111001 1100101 1100001 1110010 1110011 100000 1100001 1101110 1100100 100000 1101111 1101100 1100100 1100101 1110010 101110 100000 1001001 100000 1101000 1100001 1100100 100000 1110100 1101000 1100101 100000 1110000 1110010 1101001 1110110 1101001 1101100 1100101 1100111 1100101 100000 1110100 1101000 1101001 1110011 100000 1101101 1101111 1110010 1101110 1101001 1101110 1100111 100000 1101111 1100110 100000 1101101 1100101 1100101 1110100 1101001 1101110 1100111 100000 1110111 1101001 1110100 1101000 100000 1000010 1100001 1110010 1100010 1100001 1110010 1100001 100000 1001110 1100001 1110100 1101000 1100001 1101110 101101 1001101 1100001 1110010 1100011 1110101 1110011 101110 100000 1001001 100000 1110100 1101000 1101001 1101110 1101011 100000 1100110 1101111 1110010 100000 1100001 100000 1110110 1100001 1110010 1101001 1100101 1110100 1111001 100000 1101111 1100110 100000 1110010 1100101 1100001 1110011 1101111 1101110 1110011 100000 1101111 1110101 1110010 100000 1100001 1110010 1101101 1100101 1100100 100000 1100110 1101111 1110010 1100011 1100101 1110011 100000 1101000 1100001 1110110 1100101 100000 1100011 1101111 1101101 1100101 100000 1110100 1101000 1110010 1101111 1110101 1100111 1101000 100000 1100001 100000 1110000 1100101 1110010 1101001 1101111 1100100 100000 1101111 1100110 100000 1110100 1101001 1101101 1100101 100000 1110111 1101000 1100101 1101110 100000 1110100 1101000 1100101 1111001 100000 1101000 1100001 1110110 1100101 100000 1100010 1100101 1100101 1101110 100000 1110011 1110101 1100010 1101010 1100101 1100011 1110100 100000 1110100 1101111 100000 1100101 1101110 1101111 1110010 1101101 1101111 1110101 1110011 100000 1110000 1110101 1100010 1101100 1101001 1100011 100000 1110011 1100011 1110010 1110101 1110100 1101001 1101110 1111001 100000 1100001 1101110 1100100 100000 1100011 1110010 1101001 1110100 1101001 1100011 1101001 1110011 1101101 101110 100000 1001100 1100101 1110100 100000 1110101 1110011 100000 1100101 1111000 1100001 1101101 1101001 1101110 1100101 100000 1110100 1101000 1100101 100000 1101011 1101001 1101110 1100100 100000 1101111 1100110 100000 1101101 1100001 1101110 1100001 1100111 1100101 1101101 1100101 1101110 1110100 100000 1110011 1110100 1110010 1110101 1100011 1110100 1110101 1110010 1100101 100000 1110100 1101000 1100001 1110100 100000 1101001 1110011 100000 1100010 1100101 1101001 1101110 1100111 100000 1110000 1110101 1110100 100000 1101001 1101110 1110100 1101111 100000 1110000 1101100 1100001 1100011 1100101 100000 1100010 1111001 100000 1110100 1101000 1101001 1110011 100000 1100010 1101001 1101100 1101100 101110 100000 1010100 1101000 1100101 100000 1100110 1101001 1110011 1100011 1100001 1101100 100000 1110100 1110101 1110010 1101110 1100001 1110010 1101111 1110101 1101110 1100100 101100 100000 1100011 1101111 1110101 1110000 1101100 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1101100 1101111 1110111 100000 1101001 1101110 1100110 1101100 1100001 1110100 1101001 1101111 1101110 100000 1100001 1101110 1100100 100000 1101001 1101110 1110100 1100101 1110010 1100101 1110011 1110100 100000 1110010 1100001 1110100 1100101 1110011 101100 100000 1101000 1100001 1110011 100000 1110010 1100101 1100001 1101100 1101100 1111001 100000 1101000 1100101 1101100 1110000 1100101 1100100 100000 1110100 1101000 1101001 1110011 100000 1100011 1101111 1110101 1101110 1110100 1110010 1111001 100000 1110100 1101111 100000 1100011 1110010 1100101 1100001 1110100 1100101 100000 1101111 1110110 1100101 1110010 100000 110001 101110 110111 100000 1101101 1101001 1101100 1101100 1101001 1101111 1101110 100000 1101010 1101111 1100010 1110011 100000 1100001 1101110 1100100 100000 1110100 1101111 100000 1100010 1110010 1101001 1101110 1100111 100000 1100010 1100001 1100011 1101011 100000 1110000 1110010 1101111 1110011 1110000 1100101 1110010 1101001 1110100 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1110000 1100101 1101111 1110000 1101100 1100101 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 101110 100000 1010100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1101001 1110011 100000 1101011 1101110 1101111 1110111 1101110 100000 1100110 1101111 1110010 100000 1101000 1101001 1110011 100000 1100011 1101111 1101110 1100011 1100101 1110010 1101110 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1110111 1100101 1101100 1101100 101101 1100010 1100101 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1101110 1100001 1110100 1101001 1101111 1101110 100111 1110011 100000 1100110 1101001 1101110 1100001 1101110 1100011 1100101 1110011 101110 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 111010 1010 1000001 1100111 1110010 1100101 1100101 1100100 101110 100000 1010100 1101000 1100001 1110100 100000 1101001 1110011 100000 1100101 1111000 1100001 1100011 1110100 1101100 1111001 100000 1110111 1101000 1100001 1110100 100000 1110100 1101000 1101001 1110011 100000 1100010 1101001 1101100 1101100 100000 1101001 1110011 100000 1100100 1101111 1101001 1101110 1100111 101110 100000 1010111 1100101 100000 1100001 1110010 1100101 100000 1100111 1101111 1101001 1101110 1100111 100000 1110100 1101111 100000 1100010 1100101 100000 1110100 1101000 1100101 1110010 1100101 100000 1101110 1100101 1111000 1110100 100000 1110111 1100101 1100101 1101011 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1100010 1110101 1100100 1100111 1100101 1110100 100000 1110100 1101111 100000 1100001 1101110 1101110 1101111 1110101 1101110 1100011 1100101 100000 1101101 1100101 1100001 1110011 1110101 1110010 1100101 1110011 100000 1110111 1100101 100000 1100010 1100101 1101100 1101001 1100101 1110110 1100101 100000 1110111 1101001 1101100 1101100 100000 1101000 1100101 1101100 1110000 100000 1110100 1101000 1100101 1101101 101110', 'CipherUsed': 'Binary'}}
+    cfg = make_default_config('''1001100 1100001 1110100 1100101 1110010 101100 100000 1110100 1101000 1100101 100000 1000011 1110010 1101111 1110111 1101110 100000 1100011 1101111 1110101 1101100 1100100 100000 1101110 1101111 1110100 101100 100000 1110100 1101000 1100101 1110010 1100101 1100110 1101111 1110010 1100101 101100 100000 1110000 1110010 1101111 1110110 1100101 100000 1110100 1101000 1100001 1110100 100000 1110100 1101000 1100101 100000 1100001 1100011 1100011 1101001 1100100 1100101 1101110 1110100 100000 1110111 1100001 1110011 100000 1100100 1101001 1110010 1100101 1100011 1110100 1101100 1111001 100000 1101100 1101001 1101110 1101011 1100101 1100100 100000 1110100 1101111 100000 1100100 1110010 1101001 1101110 1101011 1101001 1101110 1100111 101110 100000 1001001 1110100 100000 1101101 1100001 1111001 100000 1100010 1100101 100000 1100010 1100101 1101110 1100101 1100110 1101001 1100011 1101001 1100001 1101100 100000 1110100 1101111 100000 1110011 1101111 1101101 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 101100 100000 1100010 1110101 1110100 100000 1101001 1110100 100000 1100100 1101111 1100101 1110011 100000 1101110 1101111 1110100 1101000 1101001 1101110 1100111 100000 1100110 1101111 1110010 100000 1110100 1101000 1101111 1110011 1100101 100000 1110111 1101000 1101111 100000 1110011 1110101 1100110 1100110 1100101 1110010 101100 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1110011 1101001 1100011 1101011 101100 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1100111 1110010 1101111 1110111 1101001 1101110 1100111 100000 1101110 1110101 1101101 1100010 1100101 1110010 100000 1101111 1100110 100000 1100011 1101000 1101001 1101100 1100100 1110010 1100101 1101110 100000 1110111 1101000 1101111 100000 1101100 1101001 1110110 1100101 100000 1101001 1101110 100000 1110000 1101111 1110110 1100101 1110010 1110100 1111001 100000 1100010 1100101 1100011 1100001 1110101 1110011 1100101 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1100011 1110101 1110100 1110011 100000 1101101 1100001 1100100 1100101 100000 1100010 1111001 100000 1110100 1101000 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 1110011 100000 1100001 1101110 1100100 100000 1110100 1101000 1100101 100000 1000011 1101111 1101110 1110011 1100101 1110010 1110110 1100001 1110100 1101001 1110110 1100101 1110011 100000 1100010 1100101 1100110 1101111 1110010 1100101 100000 1110100 1101000 1100101 1101101 101101 1110011 1101111 1101101 1100101 1110100 1101001 1101101 1100101 1110011 100000 1110111 1100101 100000 1101000 1100001 1110110 1100101 100000 1100001 100000 1110100 1100101 1101110 1100100 1100101 1101110 1100011 1111001 100000 1110100 1101111 100000 1110000 1110101 1110100 100000 1100001 1101100 1101100 100000 1110100 1101000 1100101 100000 1100010 1101100 1100001 1101101 1100101 100000 1101111 1101110 100000 1110100 1101000 1100101 100000 1001100 1101001 1100010 1100101 1110010 1100001 1101100 1110011 101100 100000 1100010 1110101 1110100 100000 1110100 1101000 1100101 100000 1110000 1100001 1110010 1110100 1111001 100000 1110100 1101000 1100001 1110100 100000 1110111 1100001 1110011 100000 1101001 1101110 100000 1110000 1101111 1110111 1100101 1110010 100000 1100010 1100101 1100110 1101111 1110010 1100101 100000 1110100 1101000 1100101 1101101 100000 1100100 1101001 1100100 100000 1101110 1101111 1110100 100000 1100100 1101111 100000 1100001 1101110 1111001 1110100 1101000 1101001 1101110 1100111 100000 1100111 1101111 1101111 1100100 100000 1100101 1101001 1110100 1101000 1100101 1110010 101110 100000 1001100 1100101 1110100 100000 1101101 1100101 100000 1100010 1100101 100000 1100011 1101100 1100101 1100001 1110010 101110 100000 1010111 1100101 100000 1110101 1110011 1100101 1100100 100000 1110100 1101111 100000 1101000 1100001 1110110 1100101 100000 1110100 1101000 1100001 1110100 100000 1100100 1100001 1111001 100000 1101001 1101110 100000 1001010 1110101 1101100 1111001 100000 1101111 1110010 100000 1000001 1110101 1100111 1110101 1110011 1110100 100000 1110111 1101000 1101001 1100011 1101000 100000 1110111 1100001 1110011 100000 1110100 1101000 1100101 100000 1100100 1100001 1111001 100000 1110111 1101000 1100101 1101110 100000 1110111 1100101 100000 1100110 1101001 1101110 1101001 1110011 1101000 1100101 1100100 100000 1110000 1100001 1111001 1101001 1101110 1100111 101110 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1101111 1100010 1110110 1101001 1101111 1110101 1110011 1101100 1111001 100000 1100100 1101001 1100100 100000 1101110 1101111 1110100 100000 1101000 1100101 1100001 1110010 100000 1101101 1111001 100000 1110011 1110000 1100101 1100101 1100011 1101000 100000 1101100 1100001 1110011 1110100 100000 1101110 1101001 1100111 1101000 1110100 100000 1100010 1100101 1100011 1100001 1110101 1110011 1100101 100000 1101000 1100101 100000 1110011 1100001 1111001 1110011 100000 1001001 100000 1100011 1101000 1100001 1101110 1100111 1100101 1100100 100000 1101101 1111001 100000 1101101 1101001 1101110 1100100 101110 100000 1010100 1101000 1100101 100000 1110000 1101100 1100001 1101110 100000 1110000 1100001 1111001 1110011 100000 1101111 1110101 1110100 100000 1100001 100000 1100110 1110101 1101100 1101100 1111001 100000 1101001 1101110 1100100 1100101 1111000 1100101 1100100 100000 1110000 1100101 1101110 1110011 1101001 1101111 1101110 100000 1110100 1101111 100000 1110000 1100101 1101111 1110000 1101100 1100101 100000 110110 110101 100000 1111001 1100101 1100001 1110010 1110011 100000 1100001 1101110 1100100 100000 1101111 1101100 1100100 1100101 1110010 101110 100000 1001001 100000 1101000 1100001 1100100 100000 1110100 1101000 1100101 100000 1110000 1110010 1101001 1110110 1101001 1101100 1100101 1100111 1100101 100000 1110100 1101000 1101001 1110011 100000 1101101 1101111 1110010 1101110 1101001 1101110 1100111 100000 1101111 1100110 100000 1101101 1100101 1100101 1110100 1101001 1101110 1100111 100000 1110111 1101001 1110100 1101000 100000 1000010 1100001 1110010 1100010 1100001 1110010 1100001 100000 1001110 1100001 1110100 1101000 1100001 1101110 101101 1001101 1100001 1110010 1100011 1110101 1110011 101110 100000 1001001 100000 1110100 1101000 1101001 1101110 1101011 100000 1100110 1101111 1110010 100000 1100001 100000 1110110 1100001 1110010 1101001 1100101 1110100 1111001 100000 1101111 1100110 100000 1110010 1100101 1100001 1110011 1101111 1101110 1110011 100000 1101111 1110101 1110010 100000 1100001 1110010 1101101 1100101 1100100 100000 1100110 1101111 1110010 1100011 1100101 1110011 100000 1101000 1100001 1110110 1100101 100000 1100011 1101111 1101101 1100101 100000 1110100 1101000 1110010 1101111 1110101 1100111 1101000 100000 1100001 100000 1110000 1100101 1110010 1101001 1101111 1100100 100000 1101111 1100110 100000 1110100 1101001 1101101 1100101 100000 1110111 1101000 1100101 1101110 100000 1110100 1101000 1100101 1111001 100000 1101000 1100001 1110110 1100101 100000 1100010 1100101 1100101 1101110 100000 1110011 1110101 1100010 1101010 1100101 1100011 1110100 100000 1110100 1101111 100000 1100101 1101110 1101111 1110010 1101101 1101111 1110101 1110011 100000 1110000 1110101 1100010 1101100 1101001 1100011 100000 1110011 1100011 1110010 1110101 1110100 1101001 1101110 1111001 100000 1100001 1101110 1100100 100000 1100011 1110010 1101001 1110100 1101001 1100011 1101001 1110011 1101101 101110 100000 1001100 1100101 1110100 100000 1110101 1110011 100000 1100101 1111000 1100001 1101101 1101001 1101110 1100101 100000 1110100 1101000 1100101 100000 1101011 1101001 1101110 1100100 100000 1101111 1100110 100000 1101101 1100001 1101110 1100001 1100111 1100101 1101101 1100101 1101110 1110100 100000 1110011 1110100 1110010 1110101 1100011 1110100 1110101 1110010 1100101 100000 1110100 1101000 1100001 1110100 100000 1101001 1110011 100000 1100010 1100101 1101001 1101110 1100111 100000 1110000 1110101 1110100 100000 1101001 1101110 1110100 1101111 100000 1110000 1101100 1100001 1100011 1100101 100000 1100010 1111001 100000 1110100 1101000 1101001 1110011 100000 1100010 1101001 1101100 1101100 101110 100000 1010100 1101000 1100101 100000 1100110 1101001 1110011 1100011 1100001 1101100 100000 1110100 1110101 1110010 1101110 1100001 1110010 1101111 1110101 1101110 1100100 101100 100000 1100011 1101111 1110101 1110000 1101100 1100101 1100100 100000 1110111 1101001 1110100 1101000 100000 1101100 1101111 1110111 100000 1101001 1101110 1100110 1101100 1100001 1110100 1101001 1101111 1101110 100000 1100001 1101110 1100100 100000 1101001 1101110 1110100 1100101 1110010 1100101 1110011 1110100 100000 1110010 1100001 1110100 1100101 1110011 101100 100000 1101000 1100001 1110011 100000 1110010 1100101 1100001 1101100 1101100 1111001 100000 1101000 1100101 1101100 1110000 1100101 1100100 100000 1110100 1101000 1101001 1110011 100000 1100011 1101111 1110101 1101110 1110100 1110010 1111001 100000 1110100 1101111 100000 1100011 1110010 1100101 1100001 1110100 1100101 100000 1101111 1110110 1100101 1110010 100000 110001 101110 110111 100000 1101101 1101001 1101100 1101100 1101001 1101111 1101110 100000 1101010 1101111 1100010 1110011 100000 1100001 1101110 1100100 100000 1110100 1101111 100000 1100010 1110010 1101001 1101110 1100111 100000 1100010 1100001 1100011 1101011 100000 1110000 1110010 1101111 1110011 1110000 1100101 1110010 1101001 1110100 1111001 100000 1110100 1101111 100000 1110100 1101000 1100101 100000 1110000 1100101 1101111 1110000 1101100 1100101 100000 1101111 1100110 100000 1000011 1100001 1101110 1100001 1100100 1100001 101110 100000 1010100 1101000 1100101 100000 1101101 1100101 1101101 1100010 1100101 1110010 100000 1101001 1110011 100000 1101011 1101110 1101111 1110111 1101110 100000 1100110 1101111 1110010 100000 1101000 1101001 1110011 100000 1100011 1101111 1101110 1100011 1100101 1110010 1101110 100000 1100110 1101111 1110010 100000 1110100 1101000 1100101 100000 1110111 1100101 1101100 1101100 101101 1100010 1100101 1101001 1101110 1100111 100000 1101111 1100110 100000 1110100 1101000 1100101 100000 1101110 1100001 1110100 1101001 1101111 1101110 100111 1110011 100000 1100110 1101001 1101110 1100001 1101110 1100011 1100101 1110011 101110 100000 1101101 1100101 1101101 1100010 1100101 1110010 1110011 111010 1010 1000001 1100111 1110010 1100101 1100101 1100100 101110 100000 1010100 1101000 1100001 1110100 100000 1101001 1110011 100000 1100101 1111000 1100001 1100011 1110100 1101100 1111001 100000 1110111 1101000 1100001 1110100 100000 1110100 1101000 1101001 1110011 100000 1100010 1101001 1101100 1101100 100000 1101001 1110011 100000 1100100 1101111 1101001 1101110 1100111 101110 100000 1010111 1100101 100000 1100001 1110010 1100101 100000 1100111 1101111 1101001 1101110 1100111 100000 1110100 1101111 100000 1100010 1100101 100000 1110100 1101000 1100101 1110010 1100101 100000 1101110 1100101 1111000 1110100 100000 1110111 1100101 1100101 1101011 100000 1101001 1101110 100000 1110100 1101000 1100101 100000 1100010 1110101 1100100 1100111 1100101 1110100 100000 1110100 1101111 100000 1100001 1101110 1101110 1101111 1110101 1101110 1100011 1100101 100000 1101101 1100101 1100001 1110011 1110101 1110010 1100101 1110011 100000 1110111 1100101 100000 1100010 1100101 1101100 1101001 1100101 1110110 1100101 100000 1110111 1101001 1101100 1101100 100000 1101000 1100101 1101100 1110000 100000 1110100 1101000 1100101 1101101 101110''')
     cfg["debug"] = "TRACE"
     result = main(cfg)
 
