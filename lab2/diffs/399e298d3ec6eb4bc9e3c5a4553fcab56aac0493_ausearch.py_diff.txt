@@ -172,12 +172,10 @@ class AuSearch(Searcher):
         for i in self.get_crackers_for(type(res)):
             inst = self._config()(i)
             additional_work.append(Edge(source=node, route=inst, info=convert_edge_info(inst.getInfo(res))))
-        if self.disable_priority:
-            priority = 0
-        elif self.invert_priority:
-            priority = -node.depth
-        else:
-            priority = node.depth
+
+        priority = min(node.depth, self.priority_cap)
+        if self.invert_priority:
+            priority = -priority
 
         self.work.add_work(priority, additional_work)
 
@@ -226,9 +224,9 @@ class AuSearch(Searcher):
                 infos = [i.info for i in chunk]
                 # Work through all of this level's results
                 while len(chunk) != 0:
-                    if self.disable_priority:
-                        chunk += self.work.get_work_chunk()
-                        infos = [i.info for i in chunk]
+                    # if self.disable_priority:
+                    #     chunk += self.work.get_work_chunk()
+                    #     infos = [i.info for i in chunk]
 
                     logger.trace(f"{len(infos)} remaining on this level")
                     step_res = cipheycore.ausearch_minimise(infos)
@@ -260,7 +258,7 @@ class AuSearch(Searcher):
         self._target_type: type = config.objs["format"]["out"]
         self.work = PriorityWorkQueue()  # Has to be defined here because of sharing
         self.invert_priority = bool(distutils.util.strtobool(self._params()["invert_priority"]))
-        self.disable_priority = bool(distutils.util.strtobool(self._params()["disable_priority"]))
+        self.priority_cap = int(self._params()["priority_cap"])
 
     @staticmethod
     def getParams() -> Optional[Dict[str, ParamSpec]]:
@@ -268,9 +266,8 @@ class AuSearch(Searcher):
             "invert_priority": ParamSpec(req=False,
                                          desc="Causes more complex encodings to be looked at first. "
                                               "Good for deeply buried encodings.",
-                                         default="False"),
-            "disable_priority": ParamSpec(req=False,
-                                         desc="Disables the priority queue altogether. "
-                                              "May be much faster, but will take *very* odd paths",
-                                         default="True")
+                                         default="True"),
+            "priority_cap": ParamSpec(req=False,
+                                      desc="Sets the maximum depth before we give up on the priority queue",
+                                      default="3")
         }
