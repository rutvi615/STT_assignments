@@ -2,6 +2,7 @@
 # http://inventwithpython.com/hacking (BSD Licensed)
 
 import transpositionDecrypt
+import math
 
 def main():
     # You might want to copy & paste this text from the source code at
@@ -27,8 +28,7 @@ def hackTransposition(message):
     # brute-force by looping through every possible key
     for key in range(1, len(message)):
         print('Trying key #%s...' % (key))
-
-        decryptedText = transpositionDecrypt.decryptMessage(key, message)
+        decryptedText = decryptMessage(key, message)
         print()
         print('Possible encryption hack:')
         print('Key %s: %s' % (key, decryptedText[:100]))
@@ -41,5 +41,37 @@ def hackTransposition(message):
 
     return None
 
+def decryptMessage(key, message):
+    # The transposition decrypt function will simulate the "columns" and
+    # "rows" of the grid that the plaintext is written on by using a list
+    # of strings. First, we need to calculate a few values.
+
+    # The number of "columns" in our transposition grid:
+    numOfColumns = math.ceil(len(message) / key)
+    # The number of "rows" in our grid will need:
+    numOfRows = key
+    # The number of "shaded boxes" in the last "column" of the grid:
+    numOfShadedBoxes = (numOfColumns * numOfRows) - len(message)
+
+    # Each string in plaintext represents a column in the grid.
+    plaintext = [''] * numOfColumns
+
+    # The col and row variables point to where in the grid the next
+    # character in the encrypted message will go.
+    col = 0
+    row = 0
+
+    for symbol in message:
+        plaintext[col] += symbol
+        col += 1 # point to next column
+
+        # If there are no more columns OR we're at a shaded box, go back to
+        # the first column and the next row.
+        if (col == numOfColumns) or (col == numOfColumns - 1 and row >= numOfRows - numOfShadedBoxes):
+            col = 0
+            row += 1
+
+    return ''.join(plaintext)
+
 if __name__ == '__main__':
     main()
\ No newline at end of file
